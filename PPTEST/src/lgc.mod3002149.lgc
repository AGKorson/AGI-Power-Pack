[******************************************************************************
[
[ lgc.mod3002149
[
[ Power Pack v1.0 source code (for AGI version 3.002.149)
[
[ These modifications are possible because AGI doesn't validate the string 
[ number passed to set.string command, which means using values greater than 
[ max (24 for most versions) will overwrite memory in the game's data section, 
[ including the jump table for AGI commands. This makes it possible to 
[ redirect commands to the string array, where custom code can be easily 
[ injected. Using this to create a memory copy function, we can then gain 
[ complete access to the entire program memory segment. Meaning it's possible 
[ to modify existing AGI functionality, and create new functionality.
[
[ The mods and patches that are included in this power pack will:
[ 
[   - add a clear controller function
[ 
[   - fix 'set.game.id' so it does not quit the game when id gets set
[
[   - modify the character printing functions to allow use of
[     extended characters in graphics and text modes, regardless of
[     color (this patch works in conjunction with the all-color patch
[     described below)
[
[   - modify 'clear.text.rect' and 'clear.lines' commands so that the
[     color that is passed is used, instead of just using black or
[     white; by passing negative values, the region is scrolled up 
[     instead of being cleared
[
[   - modify the color attributes and text printing functions so text
[     will print with any combination of foreground and background
[     colors on the graphics screen (this applies to all screen text
[     printing, including print/display commands, input line, and all
[     commands and internal functions that display text on screen 
[     regardless of screen mode and color choices)
[
[   - modify 'set.text.attributes' command to allow passing colors  
[     by variable
[
[   - modify 'set.text.attributes' command to allow "pushing" and 
[     "popping" the current attributes to make it easier to manage
[     color changes
[
[   - add a new function to allow setting message box colors 
[     (foreground, background and border) to any combination of 
[     colors
[
[   - modify 'graphics' and 'text.screen' commands to allow 
[     displaying eighty columns of text, in addition to the default 
[     forty column modes normally used by AGI; each mode can have 
[     column count set independently
[
[   - add a new 'auto-cycle' feature that will stop/start cycling
[     an object when it stops/starts moving, whether due to changing 
[     its direction value, or if it hits an obstacle
[
[   - modify the 'get.num' command so it ignores non-numeric key 
[     presses
[
[   - modify 'set.string' command to allow setting the input line
[     text programmatically
[
[   - modify 'set.string' command to allow changing the string 
[     compare function in the 'compare.strings' test command to 
[     binary (all characters match exactly), text (case is ignored 
[     but all other characters match exactly) or AGI (the default 
[     where case is ignored, and white space and several separator 
[     characters are ignored)
[
[   - add mouse support - if a mouse driver is loaded, cursor can be 
[     enabled/disabled for graphics mode (no mouse in text mode);
[     the cursor can also be customized, with different cursors
[     allowed in both 40 and 80 column mode; menus and save/restore
[     screens are automatically supported (click to highlight, 
[     double-click to select); inventory selection screen is also 
[     automatically supported (see below)
[
[   - fix input processing to ignore non-printable characters (for
[     example, if a control+key combo is not assigned to a
[     controller, AGI normally displays a control code symbol, which 
[     is always ignored by the parser)
[
[   - convert inventory screen to use graphics display; this reduces
[     the flicker that normally occurs when switching between text 
[     and graphics mode, and also allows the mouse to be used to
[     select objects
[
[   - modify 'set.cursor.char' command to allow designating a logic
[     to run as a custom status line; variables and flags can be 
[     designated as 'watch' to determine when to do an update
[ 
[   - provide 'click-to-move' support when the mouse is active; 
[     modify 'step.size' command to enable use of direct-line path
[     for movement, instead of agi default algorithm
[
[   - patch 'wander' command to correctly assign and countdown 
[     random movement length
[ 
[   - automatically detect presence of Sound Blaster or compatible
[     sound board to provide four-channel sound support in addition 
[     to the default PC speaker single channel mode 
[
[   - modify save/restore/restart to handle all power pack 
[     functionality (all features will persist in saved games)
[
[   - patch internal cursor functions to fix bug that draws an
[     unwanted blank space in certain situations (mostly when using
[     background colors other than black) and also a bug that 
[     incorrectly resets cursor after a 'get.string' command
[ 
[   - modify 'cycle.time' command to allow changing internal clock
[     to trigger 60 times a second, instead of 20; this allows for 
[     more precise control over movement and cycle timing
[
[   - add a countdown timer feature to help create accurate time 
[     triggered events and actions
[ 
[   - modify 'get.string' command to copy the current input line or 
[     the previous input line to a string
[ 
[   - enhance trace function to allow input and view/modify variables, 
[     flags and screen object information; display 'if', 'goto' and 
[     'return' commands, and also 'not', 'or', 'and' status (with the 
[     'T'/'F' result correctly reflecting 'not' status); fix  
[     formatting of trace window to right align logic number and to 
[     wrap commands and argument lists that exceed right margin; 
[     include argument type designators for clarity (v##, f##, c##, 
[     etc); include default word text in 'said' commands for clarity; 
[     fix bug in trace function that corrupts the current command 
[     pointer if a 'trace.on' command is encountered while tracing is 
[     active
[ 
[   - modify 'trace.info' function to allow full control of window 
[     placement (left/width in addition to built-in top/height)
[ 
[   - add string manipulation functions, including strLen, strCopy, 
[     strConcat, strLeft, strRight, strMid, strTrim, strInstr and 
[     strFormat, str2byte, hex2byte, byte2hex, strUpper, strLower
[
[   - patch parse command to allow parsing of all strings
[
[   - add new palette functions that allow changing the current 
[     palette, and also fading the screen in/out
[
[   - add new setmessage function that allows direct manipulation of 
[     message text, as well as support for dynamic menus
[
[   - add new setitem function to allow changing text of OBJECT file
[     inventory items
[
[   - add new itemcount function to get number of items at any 
[     location, including player inventory, in real time
[
[   - add new function that allows sending picture draw commands to  
[     to the screen after the picture is displayed
[
[   - add new function to get the priority and visual colors for any
[     coordinate location on the screen
[
[   - add set of functions to allow bitwise math (or, and, xor, 
[     bitshift)
[
[   - add functions to allow retrieval of current date/time
[
[   - add functions to allow creating data files and writing/reading 
[     string values
[
[   - add function that polls the shift, ctrl and alt keys, allowing
[     greater control over keyboard events
[
[   - add support for words to start with non-letters, and also for
[    words to contain extended characters
[
[   - add new test command to check if a coordinate is occupied by
[     a pixel of a given screen object
[
[   - add multiply and divide functions to early versions that do not
[     include those commands
[
[   - add new format option for message text that allows access to 
[     messages in any loaded logic resource
[
[   - move logic message text to a separate memory segment, freeing 
[     up heap memory for non-text resources
[
[   - add function to allow hiding all screen objects on the picture 
[     display
[
[   - add function to allow pausing the internal game clock while the
[     game is still running
[
[   - add functions to load and play sounds by variable, and also to
[     discard sounds
[
[ Detailed explanations of each power pack feature are included in its 
[ respective code block below, including syntax, limitations and 
[ considerations. Examples of all features are provided in the AGI Power Pack 
[ Demo game.
[
[******************************************************************************

[ power pack defines file
#include "powerpack.txt"

[******************************************************************************
[ these strings are used in several of the patches; instead of using a 
[ separate message for each, declare it once, then use it as needed
#message 254 "" [ \x00
#define NULLMSG    254
#message 255 "\xFF"
#define FF_MSG     255
[******************************************************************************


[******************************************************************************
[ 
[ check version number before continuing
[
if (IntVersion != VERSION_3002149) {
  return();
}
[******************************************************************************


[******************************************************************************
[
[ SET.STRING PATCH AND MEMCOPY FUNCTION
[ 
[ This patch is the first step in gaining access to power pack features. It 
[ modifies the set.string command so it can copy more than 40 characters and 
[ fixes the bug that adds an extra null character to the end of the string.
[ Finally, it moves the entire data segment to a new location, which allows 
[ the program code segment to be expanded so it can hold all the Power Pack 
[ patch code.
[
[ Two utility functions, Hex2Int and Delay that are used by several other
[ Power Pack patches are also included here.
[
[ put patch function in s1
#message  1 "\xB8\x90\x90\x2E\xA3\x5E\x0F\x2E\xA3\x60\x0F\xB8\x8C\x40\x2E\xA3"
            "\x73\x0F\xB0\x04\x2E\xA2\x77\x0F\x8B\xC6\xC3"
s1 = m1;
[ use stop.sound to run the patch
#message  2 "\x01\x01\x01\x95\xAA"
s24 = m2;
stop.sound();
[ The next step is to modify the 'said' command so it will run a custom 
[ memory copy function that will be stored in s1. (The said command is used
[ because it accepts 16 bit unsigned integers, which makes it much easier to 
[ access memory addresses.) Also, retrieve current codepage, which is needed 
[ for extended character support.
#message  3 "\xB8\x95\xAA\xA3\x9A\x07\xB8\x01\x66\xCD\x21\x89\x1E\x8B\x09\x8B"
            "\xC6\xC3"
s1 = m3;
stop.sound();
[ Finally, put the custom memcopy function in s1, so calls to said command will
[ run it. The syntax used is:
[     if (said(numbytes, msgnum, tgtaddr[, 0]) {}
[        - numbytes is the number of bytes to be copied
[        - msgnum is the message number in this logic that the data
[          will be copied from 
[        - tgtaddr is the target memory address where the data will be
[          copied to
[        if a fourth argument is used (value doesn't matter), then the target
[        segment will be the data segment, otherwise it'll be the code segment
#message  4 "\xAC\x8A\xD0\xAD\x50\xAD\x50\xE8\xBF\x79\x83\xC4\x02\x50\x1E\xAD"
            "\x50\x80\xFA\x04\x75\x03\x1E\xEB\x01\x0E\xE8\xC8\xB3\x83\xC4\x0A"
            "\x8B\xC6\xC3"
s1 = m4;
[ Now, move the entire data segment to make room for more code. This frees
[ up approximately 24KB of space, which should be plenty of room for all the
[ patches. 
      [ MoveDataPatch
#message  5 "\x56\x57\x55\x8B\xEC\x33\xDB\xB7\x10\xB4\x48\xCD\x21\x73\x17\x33"
            "\xC0\xB0\x06\x50\xE8\x46\x24\x83\xC4\x02\x50\xE8\x51\x1F\x83\xC4"
            "\x02\xE8\x82\x02\xEB\x7D\x1E\x59\x8E\xC0\x2E\xA3\x1D\x62\x2E\xA3"
            "\xBC\x63\x2E\xA3\x2A\x88\x2E\xA3\x5D\x88\x2E\xA3\x8F\x88\x2E\xA3"
            "\xC5\x88\xA1\xBA\x08\x50\x33\xC0\x50\x1E\x33\xC0\x50\x06\xE8\x28"
            "\x5E\x83\xC4\x0A\x06\x1F\x1E\x17\x33\xDB\xB7\x10\xB4\x48\xCD\x21"
            "\x72\xAD\xA3\x8F\x09\xA1\xC0\x08\x80\xEC\x03\xA3\xC0\x08\xA3\x91"
            "\x09\xB0\xC0\x2E\xA2\xD8\x2E\xB4\x01\x32\xC0\x2E\xA3\xDF\x2E\xB4"
            "\x0F\xA3\x32\x1C\xB0\x04\xA2\x31\x1C\xC7\x06\x18\x1C\x1B\x1C\xC6"
            "\x06\x1A\x1C\x1D\xC6\x06\x35\x1C\x03\xC6\x06\x59\x1B\x02\xC6\x06"
            "\x5D\x1B\x25\x8B\x46\x08\x5D\x5F\x5E\xC3"
if (said(170, 5, 1)){} [ 0001
[ error message, in case memory operation fails
#message  6 "Unable to allocate memory to support the power pack.\n\n"
            "Press any key to quit."
[ use stop.sound command to run the patch
#message  7 "\x01" [ \x00
if (said(2, 7, 1488, 0)){} [ DS:05D0
stop.sound();
[ now verify this is a PC, with EGA compatible display
#message  8 "This game will only run on a PC (or DOSBox), with EGA monitor.\n\n"
            "machine: %v20 (PC = 0)\nmonitor: %v26 (EGA = 0)"
if ((machineType != PC || monitorType != EGA)) {
  print(m8);
  quit(1);
}
[ memCopy patch is still in original data segment; it needs to be moved
[ so that area can be reused by patch code
#message 9 "\xAC\x8A\xD0\xAD\x50\xAD\x50\xE8\x53\x24\x83\xC4\x02\x50\x1E\xAD"
            "\x50\x80\xFA\x04\x75\x03\x1E\xEB\x01\x0E\xE8\x5C\x5E\x83\xC4\x0A"
            "\x8B\xC6\xC3\x58\x54"
if (said(37, 9, 1)){} [ 0001
[ change said command to use the new patch location
if (said(2, 7, 1946, 0)){} [ DS:079A
[ add a couple of functions that are used by other patches
            [ Hex2Int
#message  10 "\x80\xFC\x30\x73\x04\x32\xE4\xEB\x1A\x80\xFC\x39\x77\x05\x80\xEC"
            "\x30\xEB\x10\x80\xE4\xDF\x80\xFC\x41\x72\xEA\x80\xFC\x46\x77\xE5"
            "\x80\xEC\x37\x3C\x30\x73\x04\x32\xC0\xEB\x14\x3C\x39\x77\x04\x2C"
            "\x30\xEB\x0C\x24\xDF\x3C\x41\x72\xEE\x3C\x46\x77\xEA\x2C\x37\xC0"
            "\xE0\x04\x02\xC4\x32\xE4\xC3"
            [ Delay
            "\x50\x51\x52\x32\xE4\x8A\xC7\xB9\xE8\x03\xF7\xE1\x8B\xCA\x8B\xD0"
            "\xB4\x86\x32\xC0\xCD\x15\x5A\x59\x58\xC3"
if (said(97, 10, 40607)){} [ 9E9F
[******************************************************************************


[******************************************************************************
[
[ CLEAR.CONTROLLER FUNCTION
[
[ This patch creates a new function that allows you to clear a controller  
[ immediately instead of waiting for the next interpreter cycle. In this, 
[ the last version of AGI, Sierra finally fixed the bug in the controller
[ table, so no patch is needed.
[
[ SYNTAX:
[   [ to clear a controller from the eval table:
[   set.key(-1, -1, cNUM);
[ 
[ LIMITATIONS/CONSIDERATIONS: All 49 controller slots are now available, assign
[ as usual with the set.key command.
[
[ To clear a controller (meaning the controller() test command will no longer
[ return a value of TRUE), pass values of -1 (255) for the first two arguments.
[ This feature is useful when you have multiple blocks of code that respond to
[ a controller, but you only want one of them to run. Mouse clicks are one
[ particular situation where this is needed. See the AGI Power Pack Demo game 
[ for examples of how to use this feature.
[
[ PATCH CODE:
            [ ClearControllerPatch
#message 11 "\x89\x46\xFC\x81\x7E\xFE\xFF\xFF\x0F\x85\xB9\xAF\x8B\xF8\x88\xA5"
            "\x40\x10\xE9\xE1\xAF"
if (said(21, 11, 40704)){} [ 9F00
[ modify set.key to use clear.control patch
#message 12 "\xE9\x3B\x50"
if (said(3, 12, 20162)){} [ 4EC2
[******************************************************************************


[******************************************************************************
[
[ SET.GAME.ID PATCH
[ 
[ This patch skips the check against the built-in gameID, allowing changes to  
[ the game ID with the 'set.game.id' command without causing AGI to quit.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[  
[ LIMITATIONS/CONSIDERATIONS:  The string assigned to gameID is limited to six 
[ characters, but can now include formatting codes (such as '%v1', '%s1', 
[ '%m1', etc). If you do use formatting codes, you should make sure the 
[ formatted string is six or less characters. (The patch uses a buffer of ~40 
[ characters when doing the conversion before truncating it to 6; if your 
[ formatted string exceeds that, it may result in crashing AGI.)
[
[ With the ID check removed, you can now change the ID multiple times during a 
[ game to give users access to more save game slots, because the save game 
[ files would have different names. So you could save by 'chapter', or allow 
[ users to choose an ID to sort their save game files.
[
[ PATCH CODE:
#message 13 "\x68\xB4\x0A\x6A\x02\xC6\x06\x20\x0B\xFF\xE8\xE5\x82\x83\xC4\x04"
            "\x8B\xF8\x32\xC0\x88\x05\x6A\x07\x68\xB4\x0A\x6A\x02\xE8\xFF\xB0"
            "\x83\xC4\x06\xC3"
if (said(36, 13, 40726)){} [ 9F16
#message 14 "\xE8\x62\x8E"
if (said(3, 14, 4273)){} [ 10B1
[******************************************************************************


[******************************************************************************
[
[ EXTENDED CHARACTER SUPPORT PATCH
[
[ This patch fixes the graphics character display functions so that extended
[ characters (ascii values 128 - 254) will display properly just as they do in
[ the text mode.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: DOS includes character glyphs for all ascii 
[ values except 255. Backspace, linefeed and carriage return (8, 10, 13) have
[ glyphs, but the internal print functions adjusts cursor position for these
[ values instead of printing the associated glyph. 
[
[ PATCH CODE:
[ CopyGlyph is modified by MoveData patch to use correct glyph location
[ modify character checks to 0FFh instead of 80h
if (said(1, FF_MSG, 11622)){} [ 2D66
if (said(1, FF_MSG, 11966)){} [ 2EBE
if (said(1, FF_MSG, 11981)){} [ 2ECD
if (said(1, FF_MSG, 11986)){} [ 2ED2
#message 15 "\xF8\x07"
if (said(2, 15, 11633)){} [ 2D71
[******************************************************************************


[******************************************************************************
[
[ CLEAR REGION COLOR/SCROLL PATCH
[
[ This patch modifies clear.lines and clear.text.rect so they use the actual
[ background color, instead of just black or white. By passing a negative 
[ value, the region is scrolled up (like the trace window) instead of being 
[ cleared.
[ 
[ SYNTAX:
[   clear.lines(TOP, BTM, COLOR*); 
[   clear.text.rect(R1, C1, R2, C2, COLOR*);
[
[   * COLOR argument can be any valid color (0-15), or a negative value
[     255(-1) to 128(-127); no other change from normal syntax
[
[ LIMITATIONS/CONSIDERATIONS: This patch affects both graphics mode and 
[ text.screen mode. If COLOR is a valid color (0-15), the region is cleared to
[ that color. If COLOR is >=16 and <128, the actual color is only the lower 
[ nibble (i.e. COLOR(act) = COLOR bitOR 0Fh).
[
[ If COLOR is negative, the region is scrolled up n text rows, where
[ n = -COLOR. The exposed area of the region will be cleared to the current 
[ background color (set by last call to set.text.attributes). If n is greater
[ than the number of text rows in the region, the entire region is cleared to
[ the current background color. 
[
[ If the number of lines to scroll (n) is larger than the total number of rows
[ in the region being scrolled, the entire region is scrolled. If the bottom
[ value is less than the top value no scrolling is done.
[
[ PATCH CODE:
            [ ScrollLines
#message 16 "\x84\xC0\x78\x10\x83\x3E\x8E\x15\x01\x75\x06\x51\xB1\x04\xD2\xE0"
            "\x59\xE9\x26\xDB\xE8\x61\x06\xB4\x06\xF6\xD8\x8A\x3E\xEF\x03\x83"
            "\x3E\x8E\x15\x01\x75\x04\xB1\x04\xD2\xE7\x8B\xCF\x8A\xE9\x32\xC9"
            "\x8A\x76\xFE\x3A\xF5\x72\x28\x8A\xD6\x2A\xD5\xFE\xC2\x3A\xC2\x7E"
            "\x02\x8A\xC2\xB2\x27\x83\x3E\x8E\x15\x01\x75\x07\x80\x3E\x06\x14"
            "\x01\xEB\x05\x80\x3E\x07\x14\x01\x75\x03\x80\xC2\x28\xCD\x10\xE8"
            "\x05\x06\x8B\xC6\x8B\xE5\x5D\x5F\x5E\xC3"
            [ ScrollWnd
            "\x84\xC0\x78\x10\x83\x3E\x8E\x15\x01\x75\x06\x51\xB1\x04\xD2\xE0"
            "\x59\xE9\x10\xDB\xE8\xF7\x05\xB4\x06\xF6\xD8\x8A\x3E\xEF\x03\x83"
            "\x3E\x8E\x15\x01\x75\x04\xB1\x04\xD2\xE7\x8A\x6E\xFE\x8A\x4E\xFA"
            "\x8A\x76\xFC\x3A\xF5\x72\x11\x8A\xD6\x2A\xD5\xFE\xC2\x3A\xC2\x7E"
            "\x02\x8A\xC2\x8A\x56\xF8\xCD\x10\xE8\xB2\x05\x8B\xC6\x8B\xE5\x5D"
            "\x5F\x5E\xC3"
if (said(189, 16, 40762)){} [ 9F3A
[ modify clear.lines command
#message 17 "\xE9\xCA\x24\x90\x90\x90\x90"
if (said(7, 17, 31341)){} [ 7A6D
[ modify clear.text.rect command
#message 18 "\xE9\xE0\x24\x90\x90\x90\x90"
if (said(7, 18, 31425)){} [ 7AC1
[******************************************************************************


[******************************************************************************
[
[  FULL COLOR TEXT IN GRAPHICS MODE
[
[ This patch patch modifies the graphics text functions so all combinations 
[ of background and foreground color can be used (normal AGI functionality
[ only allows black-on-white, or any-color-on-black).
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: The DOS interrupt functions necessary to make 
[ this patch work operate on a character-by-character basis; if you are 
[ printing or displaying an extremely large amount of text you may see a slight
[ delay as the characters are added. With smaller text amounts, the effect
[ is barely noticeable.
[
[ This patch allows for customization of the standard print window. That patch 
[ is provided below.
[
[ PATCH CODE:
[ in SetBGcolor function, save the actual color not just black or white
#message 19 "\x8B\x46\x08\x5D\x5F\x5E\xC3"
if (said(7, 19, 31718)){} [ 7BE6
            [ DrawColorSpace
#message 20 "\x50\x52\x32\xC0\x88\xDF\x8B\xCA\x80\xF9\x28\x77\x0A\x90\x90\x90"
            "\xB4\x06\xCD\x10\x90\x90\x90\x5A\x32\xFF\xB4\x02\xCD\x10\x58\xC3"
            [ InputRedrawPatch
            "\xA1\xEF\x03\x80\x3E\x8E\x15\x01\x75\x04\xB1\x04\xD2\xE0\x50\xE9"
            "\x54\x9B"
if (said(50, 20, 40951)){} [ 9FF7
[ modify PutChar function to call the patch
#message 21 "\x8B\x1E\xEF\x03\x53\xE8\xD1\x72\x5B\x33\x1E\xED\x03\x80\xCB\x80"
            "\x83\x3E\xAB\x0C\x01\x75\x1C\xB3\x8F\x90"
if (said(26, 21, 11550)){} [ 2D1E
[ menus use CharInvert for shading
#message 22 "\x68\x01"
if (said(2, 22, 11591)){} [ 2D47
[ modify CharInvert to shade text instead
#message 23 "\xB8\x55\xAA\x83\x3E\xEF\x03\x0F\x74\x04\x09\x05\xEB\x02\x21\x05"
            "\x47\x47\xE2\xEF\xB0\xFF\xC3"
if (said(23, 23, 11956)){} [ 2EB4
[ ignore the preset attribute setting to print a character
#message 24 "\x90\x90\x90"
if (said(3, 24, 11641)){} [ 2D79
[ modify InputRedraw to use color patch
#message 25 "\xE9\x9B\x64"
if (said(3, 25, 15225)){} [ 3B79
[ backspace needs to use the patch too 
#message 26 "\x8A\x1E\xEF\x03\x80\x3E\x8E\x15\x01\x75\x03\xC0\xE3\x04\xE8\x16"
            "\x73\xEB\x01"
if (said(19, 26, 11472)){} [ 2CD0
[******************************************************************************


[******************************************************************************
[
[ TEXT ATTRIBUTE UPGRADE
[
[ 'set.text.attribute' normally takes numbers as arguments; this patch uses
[ the toggle.monitor command as an 'initiator' command so the next call to 
[ set.text.attribute treats the arguments as variables. It automatically
[ returns set.text.attribute to normal afterward. Also, passing a value of -1 
[ as the foreground color will save the current colors, while passing a
[ value of -1 to background color will restore previously saved colors.
[
[ SYNTAX: 
[   [ to pass colors by variable:
[   toggle.monitor();                [ initiator function
[   set.text.attribute(vFG*, vBG*);
[
[   [ to push current colors:
[   set.text.attribute(-1, any);
[
[   [ to pop stored colors into current:
[   set.text.attribute(any**, -1);
[
[   * The compiler expects numbers as arguments, not variables or messages, so
[     use the NUMBER of the variable or message, without the 'v' or 'm' prefix.
[
[  ** A value of -1 for FG will take precedence over a value of -1 for BG
[
[ LIMITATIONS/CONSIDERATIONS:
[ - colors by variable: The toggle.monitor command is used to tell AGI that the
[   next call to set.text.attribute will use variables instead of numbers. 
[   (Since the Power Pack is only available on a PC with EGA monitor, the 
[   toggle.monitor command is free to re-purpose.) After setting colors by  
[   variable, set.text.attribute will automatically return to normal mode (i.e.
[   it will expect numbers again). This means when you wish to set colors by 
[   variable, you must use the toggle.monitor initiator every time.
[
[ - save/restore colors: The function does not use a 'stack'; only one color 
[   set is stored. This means multiple saves will overwrite previous saves. 
[   Restoring colors without saving first will get AGI default colors (BG = 0
[   and FG = 15), and restoring multiple times after a single push will get the
[   same colors. 
[
[ PATCH CODE:
            [ CheckSetTextPatch
#message 27 "\x8B\x76\x08\xAC\x2A\xE4\x3C\xFF\x74\x12\x8B\xF8\xAC\x3C\xFF\x75"
            "\x08\xA0\x04\x14\x8B\xF8\xA0\x05\x14\xE9\xB6\xDA\xA1\xEF\x03\xA2"
            "\x05\x14\xA1\xED\x03\xA2\x04\x14\x8B\xC6\x40\x5D\x5F\x5E\xC3"
if (said(47, 27, 41001)){} [ A029
[ modify set.text.attribute to use the patch
#message 28 "\xE9\x3E\x25"
if (said(3, 28, 31464)){} [ 7AE8
[ patch toggle.monitor to initiate variable version of set.text.attribute
#message 29 "\xB8\x69\x7C\xA3\xF4\x05\x8B\xC6\xC3\x56\x57\x55\x32\xE4\xAC\x8A"
            "\xD8\x32\xFF\x8A\x47\x09\x8B\xF8\xAC\x8A\xD8\x8A\x47\x09\x50\x57"
            "\xE8\x86\xFE\x83\xC4\x04\xB8\xE3\x7A\xA3\xF4\x05\x8B\xC6\x5D\x5F"
            "\x5E\xC3"
if (said(50, 29, 31840)){} [ 7C60
[******************************************************************************


[******************************************************************************
[
[ CUSTOM MESSAGE BOX COLORS 
[ 
[ This patch creates a new function to allow modifying message box colors.
[    
[ SYNTAX: 
[   block(-1 , vBORDER*, vFOREGROUND*, vBACKGROUND*);
[   block(-2 , BORDER, FOREGROUND, BACKGROUND);
[
[   * The compiler expects numbers as arguments, not variables, so use the 
[     NUMBER of the variable, without the 'v' prefix.
[
[ LIMITATIONS/CONSIDERATIONS: You can pass colors by variable (using -1 as the
[ first argument) or by number (using -2 as the first argument). 
[
[ All message boxes will use the new colors, including print/print.at, pause,
[ and any other system generated message box.
[ 
[ PATCH CODE:
            [ SetMsgBoxColors
#message 30 "\x55\x8B\xEC\x8B\x46\x08\x2E\xA2\x6F\x21\x8B\x46\x06\x8A\xE0\xB0"
            "\xB0\x2E\xA3\x41\x20\x2E\xA3\x09\x89\x8B\x46\x04\x2E\xA2\x3E\x20"
            "\x2E\xA2\x6E\x21\x2E\xA2\x06\x89\x5D\xC3"
            [ GetColors
            "\x3C\x02\x74\x13\xAC\x32\xE4\xA2\x31\x1C\x50\xAC\xA2\x32\x1C\x50"
            "\xAC\xA2\x33\x1C\x50\xEB\x22\xAC\x32\xE4\x32\xFF\x8A\xD8\x8A\x47"
            "\x09\xA2\x31\x1C\x50\xAC\x8A\xD8\x8A\x47\x09\xA2\x32\x1C\x50\xAC"
            "\x8A\xD8\x8A\x47\x09\xA2\x33\x1C\x50\xE8\x9A\xFF\x83\xC4\x06\x8B"
            "\xC6\x5D\x5F\x5E\xC3"
if (said(111, 30, 41048)){} [ A058
[ save default values
[******************************************************************************


[******************************************************************************
[ 
[ 80 COLUMN TEXT SUPPORT
[
[ In both text and graphics mode, AGI uses a forty column-wide text screen to
[ display text. The EGA card is capable of displaying eighty columns in both 
[ modes without affecting the display of graphics elements. This patch creates 
[ a new function that allows you to set the column count for either mode to 
[ eighty or forty. The function is accessed by passing a value of -1 to the 
[ configure.screen command. 
[
[ SYNTAX: 
[   configure.screen(-1, MODE*, COL**);
[   
[   * if MODE is 0, the graphics mode column count will be adjusted; any other 
[     value will modify the text mode
[
[  ** if COL is 0, 40 column mode is set; any other value will set 80 column
[     mode
[
[ LIMITATION/CONSIDERATIONS: The main benefit of using 80 columns (in both 
[ modes) is that it allows you to include more verbose messages and text. For 
[ example, the Help screen is severely limited with only 40 columns; with 80 
[ columns you can include a lot more useful information. In 80 column mode, 
[ you can have a much larger menu system.
[
[ In 80 column mode, normal print messages will use the same default text 
[ width (30) as in 40 column mode. If you want message boxes to be wider than
[ that, you have to use the print.at command.
[
[ If you intend to use a wider menu in 80 column mode, be sure to set the mode 
[ BEFORE setting up your menu. If you have a menu that extends past 40 columns,
[ do not try to display it in 40 column mode; it will not display correctly.
[
[ Normally, you will set the column count once during startup of a game and
[ leave it. But the patch fully supports swapping column count at any time 
[ while a game is running, if you need that functionality in your game.
[ 
[ If you do intend to switch between modes during your game, you will need to
[ manually track which column count is currently active (a flag works for 
[ this) and check margins as needed; using widths greater than 40 in 40 
[ column mode will cause your displayed text to spill over to the next line.
[ 
[ The function will automatically refresh the screen (by calling graphics or 
[ text.screen command) after setting the new column count. This will redraw 
[ the graphics screen or clear the text screen respectively. 
[
[ PATCH CODE:
            [ SetColumnCount
#message 31 "\x8B\x76\x08\x8B\xFE\x46\x8A\x05\x2A\xE4\x3C\xFF\x0F\x85\x5C\xDB"
            "\x8B\xFE\x46\x8A\x05\x8A\xE0\x8B\xFE\x46\x8A\x05\x0A\xE4\x74\x0E"
            "\x0A\xC0\x74\x02\xB0\x01\xA2\x06\x14\xE8\x0B\xD9\xEB\x0C\x0A\xC0"
            "\x74\x02\xB0\x01\xA2\x07\x14\xE8\x35\xD9\xE9\x56\xDB"
            [ AdjustTextMode
            "\x57\x06\x8E\x06\xA9\x11\x33\xFF\xE8\x55\xFD\xB9\xFF\x7F\xB0\xFF"
            "\xEE\x32\xC0\xAA\xE2\xF8\xE8\x69\xFD\x07\x5F\x1E\x0E\x80\x3E\x06"
            "\x14\x01\x1F\x75\x12\xB0\x03\xA2\x90\x9C\xB0\x4F\xA2\x1B\x2E\xA2"
            "\x8B\x2D\xA2\xB4\x9C\xEB\x10\xB0\x01\xA2\x90\x9C\xB0\x27\xA2\x1B"
            "\x2E\xA2\x8B\x2D\xA2\xB4\x9C\x1F\xE9\x36\xFB"
            [ AdjustGrafMode
            "\x1E\x0E\x80\x3E\x07\x14\x01\x1F\x0F\x85\xBF" [ \x00
#message 32 "\xB0\x50\xA2\xE4\x9D\xA2\x4A\x9D\xA2\xC6\x9D\xA2\x1F\x21\xA2\x01"
            "\xA0\xA2\xE9\x0E\xA2\xF0\x0E\xA2\x08\x0F\xA2\x8C\x75\xA2\xC2\x0F"
            "\xA2\xC8\x0F\xB0\x52\xA2\xBE\x0F\xA2\xD0\x0F\xA2\xFC\x0F\xB0\xAE"
            "\xA2\xDD\x0F\xA2\xE7\x0F\xA2\xF1\x0F\xA2\x11\x10\xA2\x24\x10\xA2"
            "\x3D\x10\xB0\x01\xA2\xF2\x9C\xA2\x6A\x9D\xB0\xF0\xA2\x0E\x9D\xA2"
            "\x91\x9D\xB0\x0F\xA2\x1A\x9D\xA2\x9E\x9D\xB0\x4F\xA2\x8B\x2D\xA2"
            "\x1B\x2E\xA2\x22\x9E\xA2\xE0\x35\xB0\x24\xA2\x0A\x36\xB0\x1F\xA2"
            "\xA1\x36\xB0\x16\xA2\x20\x37\xB0\x18\xA2\x33\x37\xB0\x46\xA2\x61"
            "\x38\xB0\x06\xA2\x50\x90\xB0\x40\xA2\xA2\x99\xA2\x12\xA3\xB0\xFD"
            "\xA2\x4C\x90\xB8\xEB\x16\xA3\x22\x9D\xB8\xEB\x18\xA3\xA3\x9D\xB8"
            "\x90\x90\xA3\x6E\x58\xA3\xD0\x20\xA3\x5D\x21\xA3\x17\x9A\xA3\x47"
            "\x9A\xA3\x47\x90\xB8\xA1\x40\xA3\x1B\x9E\xB0\x0E\xE9\xC5" [ \x00
#message 33 "\xB0\x28\xA2\xE4\x9D\xA2\x4A\x9D\xA2\xC6\x9D\xA2\x1F\x21\xA2\x01"
            "\xA0\xA2\xE9\x0E\xA2\xF0\x0E\xA2\x08\x0F\xA2\x8C\x75\xA2\xC2\x0F"
            "\xA2\xC8\x0F\xB0\x2A\xA2\xBE\x0F\xA2\xD0\x0F\xA2\xFC\x0F\xB0\xD6"
            "\xA2\xDD\x0F\xA2\xE7\x0F\xA2\xF1\x0F\xA2\x11\x10\xA2\x24\x10\xA2"
            "\x3D\x10\xB0\x03\xA2\xF2\x9C\xA2\x6A\x9D\xB0\xC0\xA2\x0E\x9D\xA2"
            "\x91\x9D\xB0\x30\xA2\x1A\x9D\xA2\x9E\x9D\xB0\x27\xA2\x8B\x2D\xA2"
            "\x1B\x2E\xA2\x22\x9E\xA2\xE0\x35\xB0\x1E\xA2\x61\x38\xB0\x0A\xA2"
            "\x50\x90\xB0\x02\xA2\x20\x37\xB0\x10\xA2\x0A\x36\xB0\x0B\xA2\xA1"
            "\x36\xB0\x04\xA2\x33\x37\xB0\xFB\xA2\x4C\x90\xB0\x90\xA2\xA2\x99"
            "\xA2\x12\xA3\xB8\x74\x18\xA3\x22\x9D\xB8\x26\x88\xA3\xA3\x9D\xB8"
            "\xD1\xEB\xA3\x6E\x58\xB8\xD1\xE7\xA3\xD0\x20\xB8\xD1\xE0\xA3\x5D"
            "\x21\xA3\x47\x9A\xA3\x47\x90\xB8\xD1\xE7\xA3\x17\x9A\xB8\xA1\x20"
            "\xA3\x1B\x9E\xB0\x0D\x1F\x32\xE4\x50\xE8\xED\xFA\x58\xCD\x10\xE8"
            "\x5C\x31\xE9\x7B\xF9"
            [ FormatTextPatch
            "\x32\xE4\xB0\x29\x80\x3E\x8E\x15\x01\x75\x0B\x80\x3E\x06\x14\x01"
            "\x75\x0D\xB0\x51\xEB\x09\x80\x3E\x07\x14\x01\x75\x02\xB0\x51\xC3"
            [ MenuInvertPatch
            "\x8B\x44\x08\x90\x50\xE9\x2D\xF6"
            [ MenuItemColCheck
            "\x57\x8B\x7C\x0C\x8B\x45\x04\x50\xE8\xC4\xAC\x83\xC4\x02\x8B\xD0"
            "\x03\x44\x08\xB1\x27\x32\xED\x80\x3E\x07\x14\x01\x75\x03\x80\xC1"
            "\x28\x3B\xC1\x73\x05\x8B\x44\x08\xEB\x04\x2B\xCA\x8B\xC1\x89\x45"
            "\x08\x8B\x3D\x3B\x7C\x0C\x75\xF6\x5F\x56\xE8\xE5\xF5\x5E\xC3"
            [ RestorePalettePatch
            "\x33\xDB\xCD\x10\xE8\xEB\x30\xE9\x3B\xF9"
if (said(665, 31, 41159)){} [ A0C7
[ modify configure.screen to use the patch
#message 34 "\xE9\x9B\x24"
if (said(3, 34, 31785)){} [ 7C29
[ modify j_EgaTextMode to adjust columns based on text80 flag
#message 35 "\xE9\xAE\x04"
if (said(3, 35, 40019)){} [ 9C53
[ modify EgaTextMode to maintain palette
#message 36 "\xE9\xBC\x06\x90"
if (said(3, 36, 40087)){} [ 9C97
[ modify EgaGrahicsMode  to adjust columns based on graf80 flag
#message 37 "\xE9\xE7\x04"
if (said(3, 37, 40037)){} [ 9C65
[ modify InitRowTable function so it will run everytime it's called
#message 38 "\x90\x90"
if (said(2, 38, 40413)){} [ 9DDD
[ in display, and display.v, need to use patch to adjust right margin 
[ depending on number of columns
#message 39 "\xE8\x07\x7E"
if (said(3, 39, 9445)){} [ 24E5
#message 40 "\xE8\xA0\x7D"
if (said(3, 40, 9548)){} [ 254C
[ modify MenuNameDraw to use patch
#message 41 "\x90\x89\x46\xFC\xB0\x0F"
if (said(6, 41, 39330)){} [ 99A2
[ modify MenuInvert to use patch
#message 42 "\xE9\xCB\x09"
if (said(3, 42, 39233)){} [ 9941
[ modify MenuItemsDraw to check column count, and adjust menu position
[ accordingly
#message 43 "\xE8\x4F\x0A"
if (said(3, 43, 39109)){} [ 98C5
[******************************************************************************


[******************************************************************************
[
[ AUTO-CYCLE PROPERTY
[
[ This patch creates a new property for screen objects that allows you to have 
[ the object (including ego) automatically stop cycling when not moving, and 
[ start cycling when the object begins moving. It eliminates the need for 
[ complicated code to check object position and then manually start/stop 
[ motion. The patch is accessed by the set.upper.left command.
[
[ SYNTAX: 
[   set.upper.left(oNUM*, vMODE**);
[
[   * The compiler expects numbers as arguments, not objects, so use the 
[     NUMBER of the object, without the 'o' prefix.
[
[  ** if value of vMODE is 0, auto-cycling is disabled (normal AGI behavior)
[     if value of vMODE is any non-zero value, auto-cycling is ENABLED
[     Pass vMODE as a number, without the 'v' prefix.
[
[ LIMITATIONS/CONSIDERATIONS: The set.upper.left command is a null function
[ in AGI so it can be re-purposed. 
[
[ The auto-cycle property overrides all other cycling modes. If you want a 
[ stationary object to cycle (by using end.of.loop or any other cycling mode) 
[ you must first disable the auto-cycle property.
[
[ This patch also fixes two minor bugs: one with blocks - when movement is 
[ stopped due to hitting a block, AGI won't update the object's loop based on 
[ direction, like it does with hitting other objects or control lines. This 
[ patch fixes that.
[
[ The object collision check has a bug in it that uses the wrong  value when 
[ comparing object left/right edges; this prevents objects from being next to 
[ one another (the bug causes objects to need an extra pixel between them).
[ This patch fixes that so objects can correctly be right up next to another
[ object without causing a position error.
[
[ PATCH CODE:
            [ MoveObjPatch
#message 44 "\x81\x64\x25\xFF\xFB\xF6\x44\x25\x20\x74\x34\xF6\x44\x26\x80\x74"
            "\x16\x80\x7C\x21\x01\x72\x28\x8B\x46\xFC\x3B\x44\x03\x75\x08\x8B"
            "\x46\xFA\x3B\x44\x05\x74\x18\x80\x7C\x20\x01\x72\x12\xFE\x4C\x20"
            "\x75\x0D\x56\xE8\x78\xA7\x83\xC4\x02\x8A\x44\x1F\x88\x44\x20\x3B"
            "\x36\xD0\x07\x75\x20\x80\x3E\x02\x14\x01\x75\x19\x8B\x46\xFC\x3B"
            "\x44\x03\x75\x0C\x8B\x46\xFA\x3B\x44\x05\x75\x04\xB0\x01\xEB\x02"
            "\x32\xC0\xA2\x41\x1C\xC3"
            [ SetAutoCycle
            "\x56\x57\x55\x8B\xEC\x8B\x76\x08\x8B\xFE\x46\x8A\x05\x2A\xE4\x6B"
            "\xC0\x2B\x8B\xF8\x03\x3E\xD0\x07\x8A\x04\x46\x32\xE4\x8B\xD8\x8A"
            "\x47\x09\x3C\x01\x72\x06\x80\x4D\x26\x80\xEB\x05\x81\x65\x25\xFF"
            "\x7F\x8B\xC6\x5D\x5F\x5E\xC3"
            [ CheckBlockPatch
            "\x56\x57\x55\xE9\xC2\x62\xE8\xF7\xFF\x8A\x44\x21\xE9\x7C\x73"
if (said(172, 44, 41824)){} [ A360
[ skip over current cel cycle code
#message 45 "\xEB\x05"
if (said(2, 45, 1525)){} [ 05F5
[ modify MoveObjects function to use patch with auto-cycle flag (8000h)
#message 46 "\xE8\xE3\x8A\x90\x90"
if (said(5, 46, 6266)){} [ 187A
[ ignore CheckBlock calls in UpdateMovement
#message 47 "\x45"
if (said(1, 47, 1697)){} [ 06A1
#message 48 "\x33"
if (said(1, 48, 1715)){} [ 06B3
[ call CheckBlock from MoveObjects function
#message 49 "\xE9\x7B\x8C"
if (said(3, 49, 6021)){} [ 1785
[ use set.upper.left to control auto-cycle feature
#message 50 "\xC6\xA3"
if (said(2, 50, 1708, 0)){} [ DS:06AC
[ fix bug in object collision check function
#message 51 "\x7E"
if (said(1, 51, 18875)){} [ 49BB
#message 52 "\x7D"
if (said(1, 52, 18888)){} [ 49C8
[******************************************************************************


[******************************************************************************
[
[ GET.NUMBER INPUT FILTER
[
[ This patch modifies the get.number command so it ignores any non-numeric
[ keystrokes, preventing users from entering anything other than the digits 
[ 0-9, ENTER, ESC, or BACKSPACE. This makes it easier to control what users 
[ input.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: none
[
[ PATCH CODE:
            [ CheckForNumber
#message 53 "\x83\xFF\x20\x72\x17\x80\x3E\x88\x09\x01\x75\x0A\x83\xFF\x30\x72"
            "\x0B\x83\xFF\x39\x77\x06\x8B\xDE\x46\xE9\x31\x6C\xE9\xD5\x6B"
            [ SetCheckNumFlag
            "\xC6\x06\x88\x09\x01\x8B\x76\x08\xE9\x41\xD1"
            [ ResetCheckNumFlag
            "\xC6\x06\x88\x09" [ \x00
#message 54 "\x83\xC4\x04\xE9\x80\xD1"
if (said(53, 53, 41996)){} [ A40C
[ patch the getinput function to use the flag
#message 55 "\xE9\xB3\x93"
if (said(3, 55, 4182)){} [ 1056
[ modify getnum to set checknumber flag before getting input
#message 56 "\xE9\xB4\x2E"
if (said(3, 56, 30068)){} [ 7574
[ modify getnum to RESET checknumber flag when done
#message 57 "\xE9\x75\x2E"
if (said(3, 57, 30142)){} [ 75BE
[******************************************************************************


[******************************************************************************
[
[ SET INPUT AND STRING COMPARE FEATURES
[
[ This patch modifies set.string to provide two new features - you can send 
[ text directly to the input line (replacing what the user has currently 
[ typed there), and you can adjust the compare mode used by the 
[ 'compare.strings' test command to binary, text or AGI (default).
[
[ SYNTAX: 
[   [ to set the input line:
[   set.string(s255, mInput);
[
[   [ to change string compare mode:
[   set.string(s254, MODE*);
[
[   * The compiler expects the second argument to be a message number so pass 
[     MODE as m0, m1 or m2.
[         MODE = 0: restore normal AGI comparison
[         MODE = 1: text compare (case insensitive)
[         MODE = 2: binary compare (case sensitive)
[
[ LIMITATIONS/CONSIDERATIONS: The message used to set the input line can 
[ contain formatting codes such as '%v', '%s' and so on. If the formatted 
[ length of the message is greater than 38, it will get truncated to 38. If 
[ there is already text on the input line, it is completely replaced by the
[ new text.
[
[ The default AGI string compare mode is to ignore case, and most non-
[ alphanumeric characters (See the WinAGI Help file for details on normal
[ AGI string comparison). Use a value of 0 for MODE to reset the default  
[ AGI mode.
[
[ The new 'text' compare mode will ignore case, but all other characters, 
[ including those that the default mode ignores must match for the test to 
[ return true.
[
[ With the new 'binary' compare mode, all characters must match exactly, 
[ including case, for the test to return true.
[
[ This patch also fixes a buffer overflow bug in the compare function if either 
[ string exceeds forty characters. Strings longer than forty characters are 
[ now truncated before being compared.
[
[ PATCH CODE:
            [ SetInput
#message 58 "\x50\xE8\x19\x80\x83\xC4\x02\x83\xEC\x64\x6A\x26\x50\x8D\x46\x9C"
            "\x50\xE8\x74\x7D\x83\xC4\x06\x6A\x26\x8D\x46\x9C\x50\xB8\xC5\x0D"
            "\x50\xE8\xD0\xAB\x83\xC4\x6A\x50\xE8\x7A\xAB\x83\xC4\x02\xA3\x19"
            "\x0E\xE8\xF1\x96\xC3"
            [ SetStringPatch
            "\x8A\x07\x2A\xE4\x3C\xFF\x74\x12\x3C\xFE\x0F\x85\xD0\x6A\xAC\x3C"
            "\x02\x76\x02\x32\xC0\xA2\x34\x1C\xEB\x06\xAC\x56\xE8\xAC\xFF\x5E"
            "\x8B\xC6\x5D\x5F\x5E\xC3"
            [ AgiStrCleanPatch1
            "\x56\x80\x3D\x01\x72\x0C\x2B\x76\x0A\x83\xFE\x28\x74\x04\x5E\xE9"
            "\x78\x6C\x5E\xE9\x9F\x6C"
            [ AgiStrCleanPatch2
            "\x80\x3E\x34\x1C\x01\x0F\x83\x7E\x6C\x2A\xE4\x50\xE9\x6A\x6C"
            [ AgiStrCleanPatch3
            "\x80\x3E\x34\x1C\x02\x0F\x84\x80\x6C\x2A\xE4\x50\xE9\x74\x6C"
if (said(143, 58, 42049)){} [ A441
[ modify set.string to use the mode change patch
#message 59 "\xE9\x23\x95\x90"
if (said(4, 59, 3920)){} [ 0F50
[ modify string clean function to handle different compares
#message 60 "\xE9\x78\x93"
if (said(3, 60, 4385)){} [ 1121
#message 61 "\xE9\x87\x93"
if (said(3, 61, 4392)){} [ 1128
#message 62 "\xE9\x7D\x93"
if (said(3, 62, 4417)){} [ 1141
[ reset bCompareMode to zero
[ use null message (m254)
if (said(1, NULLMSG, 7220, 0)){} [ DS:1C34
[******************************************************************************


[******************************************************************************
[
[ MOUSE SUPPORT
[
[ This patch adds support for mouse by replacing some of the joystick code. 
[ The patch will automatically detect a mouse driver, and if one is found, the
[ mouse functions are available for use. The patch provides access to mouse
[ position and button status by assigning three new reserved variables. Right 
[ and left button click and double-click events are supported. Mouse support 
[ for menus is also provided. Custom cursors can easily be loaded as needed.
[
[ SYNTAX: 
[   [ to enable (show) mouse:
[   enable.item(c255);
[
[   [ to disable (hide) mouse:
[   disable.item(c255);
[
[   [ to load a cursor:
[   set.key(FN_MODE, mCURSOR*, c255);
[
[   [ to change mouse variables:
[   block(-3, XVAR, YVAR, BVAR);
[
[   * The compiler expects the second argument to be a number so pass 
[     mCURSOR as a number without the 'm' prefix.
[
[ LIMITATIONS/CONSIDERATIONS: The mouse patch uses several joystick elements,
[ so the joystick is not available, even if it's connected. The init.joystick
[ command is set to a null function to avoid potential conflicts.
[
[ The patch first checks for a mouse, and sets reserved flag f8 
[ (enableDblClick) if found. If no mouse is detected, the flag is reset.
[ If a mouse driver is not found, calls to 'enable mouse' are ignored, and the
[ game will continue to run normally, just without mouse support. Calls to 
[ 'disable mouse' when the mouse is already disabled are also ignored.
[ 
[ When enabled, variables v27, v28 and v29 are the default reserved variables  
[ for mouse-X, mouse-Y and mouse-Btn respectively. You can change the 
[ variables that store mouse information by using the block command with -3 as
[ the first argument. XVAR will be the number of the new mouse-X, YVAR the new 
[ mouse-Y, and BVAR the new mouse-Btn. The mouse variables are updated 
[ continuously. To determine current mouse position, just check mouse-X and 
[ mouse-Y variables. Note that mouse-Y is always relative to the picture screen
[ regardless of its position (set by the configure.screen command). This means
[ mouse-y values when the cursor is above the picture will be negative.
[
[ Mouse button status is set as follows: 
[    0 if no button pressed
[    1 if left button is pressed
[    2 if right button is pressed
[    3 if both buttons are pressed
[
[ Similar to the joystick, a left click will send an 'ENTER' key press and 
[ right click will send an 'ESCAPE' key press when a message box is visible. 
[
[ Mouse click and double-click events replace joystick button events. To use 
[ these events, assign controllers using set.key command as follows:
[   1, 1 = mouse left button click
[   1, 2 = mouse right button click
[   1, 3 = mouse left button double-click
[   1, 4 = mouse right button double-click
[
[ Mouse double-click is enabled by default if a mouse is detected (reserved 
[ flag f8 is set). Reset flag f8 to ignore double-clicks. Double-click speed  
[ can be controlled by setting reserved variable v15 (dblClickDelay). 
[ 
[ When the mouse is disabled (hidden), no mouse events will occur, and the 
[ mouse variables will NOT update. If text mode is set while the mouse is 
[ enabled the mouse is temporarily hidden. Button events will still activate
[ and BVAR will updated, but mouse position (XVAR and YVAR) will not. Switching
[ back to graphics mode will re-enable the mouse.
[
[ When the cursor is visible, support for menus is automatically enabled, but 
[ you must still call menu.input() to actually show the menu (usually by 
[ testing for a left mouse click on the top text row of the screen). Clicking 
[ a menu will select it. Clicking a menu item will highlight that item (if it
[ is enabled). Double-click an item to select it. Right-click anywhere to close
[ the menu without making a selection.
[
[ To change the mouse cursor, use the set.key command, passing -1 for the first
[ and second arguments, and a message (using the 'c' prefix instead of 'm') as
[ the third argument. The cursor string must be exactly 132 characters, 
[ comprised of 66 two-digit hex values. The first two digits are the 
[ column (x) offset of the cursor hotspot, the next two are the row (y) offset.
[ The remaining 128 digits are the screen and cursor masks. For details on how
[ to define a cursor, see the examples in the Power Pack Demo game.
[
[ PATCH CODE:
            [ Check4MouseDriver
#message 63 "\x33\xC0\xCD\x33\x3C\xFF\xB0\x08\x75\x05\xE8\x45\xD3\xEB\x03\xE8"
            "\x46\xD3\x8B\xC6\xC3"
            [ ReloadCursor
            "\x83\x3E\x8E\x15\x01\x74\x2D\x33\xC0\xB0\x01\xA2\xFE\x13\xA2" [ \x00
#message 64 ""
            "\x14\xCD\x33\xBF\x89\x1B\x80\x3E\x07\x14\x01\x75\x03\x83\xC7\x46"
            "\x80\x3D\xFF\x75\x0F\x8B\x4D\x04\x8B\x5D\x02\x83\xC7\x06\x8B\xD7"
            "\xB0\x09\xCD\x33\xC3"
            [ EnableMouse
            "\x3C\xFF\x74\x06\xE8\x78\xF1\xE9\x1B\xF1\x80\x3E\xFE\x13\x01\x74"
            "\xF6\x33\xC0\xCD\x33\x3C\xFF\x75\xEE\xE8\xAF\xFF\xEB\xE9"
            [ DisableMouse
            "\x3C\xFF\x74\x06\xE8\x5A\xF1\xE9\x4E\xF1\x33\xC0\xA2\xFE\x13\xA2"
            "" [ \x00
#message 65 "\x14\xB0\x02\xCD\x33\xEB\xEF"
            [ GraphicsModePatch
            "\x80\x3E\xFE\x13\x01\x75\x03\xE8\x8B\xFF\xB8\x03\x10\xE9\x0E\xF7"
            [ PollMouse
            "\x33\xC0\x80\x3E\xFE\x13\x01\x75\x37\xB0\x03\xCD\x33\x88\x1E\x17"
            "\x1C\x88\xD8\x32\xFF\x8A\x1E\x1A\x1C\x88\x47\x09\x80\x3E" [ \x00
#message 66 "\x14"
            "\x01\x75\x1D\xC1\xE9\x02\x88\x0E\x15\x1C\x8A\x1E\x18\x1C\x88\x4F"
            "\x09\x88\x16\x16\x1C\x8A\x1E\x19\x1C\x2A\x16\xB1\x11\x88\x57\x09"
            "\xC3"
            "\x80\x3E" [ \x00
#message 67 "\x14\x01\x74\x01\xC3\x50\x33\xC0\xB0\x01\xCD\x33\x58"
            "\xC3"
            [ HideCursor
            "\x80\x3E" [ \x00
#message 68 "\x14\x01\x74\x01\xC3\x50\x33\xC0\xB0\x02\xCD\x33\x58"
            "\xC3"
            [ CopyPixPatch
            "\xE8\xEC\xFF\xE8\x0C\xF7\xE8\xD5\xFF\xC3"
            [ DrawBoxPatch
            "\xE8\xE2\xFF\xE8\x84\xF7\xE8\xCB\xFF\xC3"
            [ PutCharPatch
            "\xE8\xD8\xFF\xB4\x09\xCD\x10\xE8\xC0\xFF\xC3"
            [ ClearLinePatch
            "\xE8\xCD\xFF\xB4\x27\x80\x3E\x07\x14\x01\x72\x02\xB4\x4F\x3A\xCC"
            "\x76\x02\x8A\xCC\x3A\xD4\x76\x02\x8A\xD4\xB4\x06\xCD\x10\xE8\x9E"
            "\xFF\xC3"
            [ MenuInputHandler
            "\x3D\x01\x02\x74\x03\x3D\x01\x04\x0F\x84\xA2\xF1\x3D\x01\x03\x74"
            "\x08\x3D\x01\x01\x74\x03\xE9\x92\xF2\x89\x46\xFE\x80\x3E\x16\x1C"
            "\x08\x73\x57\xA0\x15\x1C\x32\xE4\xD1\xE8\x80\x3E\x07\x14\x01\x74"
            "\x04\xD1\xE8\xEB\x01\x48\x8B\xC8\x8B\x1E\x71\x1B\x3B\x4F\x08\x72"
            "\xD5\x8B\x47\x04\x53\x50\xE8\x99\xA9\x83\xC4\x02\x5B\x02\x47\x08"
            "\x39\xC1\x76\x0A\x8B\x1F\x3B\x1E\x71\x1B\x74\xBA\xEB\xDE\x39\xF3"
            "\x74\xB4\x53\x57\x56\xE8\xA6\xF2\x83\xC4\x04\x5B\x8B\xF3\x8B\x7C"
            "\x0E\x56\xE8\x47\xF2\x83\xC4\x02\xEB\x9C\x80\x3E\x16\x1C\x10\x72"
            "\x95\xA0\x15\x1C\x8B\x1E\x77\x1B\x8B\x0E\x79\x1B\x80\xC7\x02\x80"
            "\x3E\x07\x14\x01\x74\x03\x80\xC7\x02\x3A\xC7\x72\xDB\x02\xF9\x80"
            "\xEF\x04\x80\x3E\x07\x14\x01\x74\x03\x80\xEF\x04\x3A\xC7\x76\x03"
            "\xE9\x63\xFF\xA0\x16\x1C\x2C\x10\xB1\x03\xD2\xE8\xFE\xC0\x3A\x44"
            "\x10\x77\xB5\x32\xE4\x50\x57\xE8\xC0\xF2\x83\xC4\x02\x59\x8B\x7C"
            "\x0C\xEB\x02\x8B\x3D\xE2\xFC\x80\x7D\x0A\x01\x74\x04\x8B\x3E\x75"
            "\x1B\x81\x7E\xFE\x01\x03\x0F\x84\xB1\xF0\xE9\x14\xF1"
            [ MenuInitPatch
            "\x33\xC0\xA3\x6A\x13\xA3\x76\x13\x80\x3E" [ \x00
#message 69 "\x14\x01\x74\x07\x8B"
            "\x36\x73\x1B\xE9\x61\xF0\x80\x3E\x16\x1C\x08\x73\xF2\xA0\x15\x1C"
            "\x32\xE4\xD1\xE8\x80\x3E\x07\x14\x01\x74\x04\xD1\xE8\xEB\x01\x48"
            "\x8B\xC8\x8B\x1E\x71\x1B\x3B\x4F\x08\x72\x1D\x8B\x47\x04\x53\x50"
            "\xE8\xB2\xA8\x83\xC4\x02\x5B\x02\x47\x08\x39\xC1\x76\x0A\x8B\x1F"
            "\x3B\x1E\x71\x1B\x74\xB9\xEB\xDE\x89\x1E\x73\x1B\x8B\x47\x0C\x89"
            "\x06\x75\x1B\x89\x47\x0E\xEB\xA7"
            [ LoadCursor
            "\x3C\x01\x72\x05\x8A\xDC\x8A\x67\x09\x8A\xC4\x32\xE4\x50\xE8\xF4"
            "\x7C\x83\xC4\x02\x8B\xF0\x81\xC4\x06\xFF\x8D\xBE\x02\xFF\x57\x56"
            "\xC6\x06\x20\x0B\xFF\xC6\x06\x1E\x0B\x01\xE8\x82\x7A\x8B\xF8\x32"
            "\xC0\x88\x05\x5E\xE8\x56\xA8\x5E\x3C\x84\x74\x02\xEB\x40\xBF\x89"
            "\x1B\x80\x3E\x07\x14\x01\x75\x03\x83\xC7\x46\xC7\x05\xFF\xFF\x83"
            "\xC7\x02\xAD\xE8\xF0\xF6\x8B\xD8\x89\x05\x83\xC7\x02\xAD\xE8\xE5"
            "\xF6\x8B\xD0\x89\x05\x83\xC7\x02\x33\xC9\xB1\x40\xAD\xE8\xD6\xF6"
            "\xAA\xE2\xF9\x8B\xCA\x8D\x55\xC0\x33\xC0\xB0\x09\xCD\x33\x83\xC4"
            "\x7D\x83\xC4\x7D\xC3"
            [ TextModePatch
            "\x80\x3E\xFE\x13\x01\x75\x05\x33\xC0\xA2" [ \x00
#message 70 "\x14\xB8\x03\x10\xE9"
            "\xA7\xF4"
            [ SetMouseVars
            "\xAC\xA2\x18\x1C\xAC\xA2\x19\x1C\xAC\xA2\x1A\x1C\x8B\xC6\x5D\x5F"
            "\x5E\xC3"
if (said(818, 63, 42192)){} [ A4D0
[ use patch command to run the detection function
#message 71 "\xD0\xA4"
if (said(2, 71, 1488, 0)){} [ DS:05D0
stop.sound();
[ enable.item command  insert point
#message 72 "\xE9\xDB\x0E"
if (said(3, 72, 38460)){} [ 963C
[ disable.item command insertion point
#message 73 "\xE9\xA8\x0E"
if (said(3, 73, 38541)){} [ 968D
[ modify graphics mode to use patch
#message 74 "\xE9\xE3\x08\x90"
if (said(4, 74, 40042)){} [ 9C6A
[ modify textmode to hide cursor
#message 75 "\xE9\x48\x0B\x90"
if (said(4, 75, 40083)){} [ 9C93
[ graphics insertion points
#message 76 "\xE9\x64\x09"
if (said(3, 76, 40028)){} [ 9C5C
#message 77 "\xE9\x68\x09"
if (said(3, 77, 40034)){} [ 9C62
#message 78 "\xE8\x52\x78\x90"
if (said(4, 78, 11650)){} [ 2D82
#message 79 "\xE8\x67\x77\x90"
if (said(4, 79, 11896)){} [ 2E78
#message 80 "\xE8\x42\x77\x90"
if (said(4, 80, 11933)){} [ 2E9D
#message 81 "\xE8\xAB\x05"
if (said(3, 81, 40964)){} [ A004
#message 82 "\xE8\x93\x05"
if (said(3, 82, 40971)){} [ A00B
[ menu handler redirect
#message 83 "\xE9\x12\x0E"
if (said(3, 83, 38895)){} [ 97EF
[ modify GetButton to use poll values
#message 84 "\xE8\xB6\x3D\x8A\xD8\x32\xFF\x80\xE3\x01\x89\x1E\x68\x13\xD0\xE8"
            "\x8A\xD8\x80\xE3\x01\x89\x1E\x74\x13\xC3"
if (said(27, 84, 26535)){} [ 67A7
[ modify PollJoystickButtons function to correctly respond to clicks/dbl clicks
#message 85 "\x83\x3C\x01\x75\x26\x83\x7C\x02\x01\x73\x11\xC6\x44\x02\x01\xFF"
            "\x74\x04\x6A\x01\xE8\xDF\xE0\x83\xC4\x04\xEB\xD8\x83\x7C\x02\x02"
            "\x75\xD2\xFF\x74\x06\xC6\x44\x02\x03\xEB\xE7\x8B\x44\x02\x83\xF8"
            "\x03\x76\x02\xEB\xBF\xD1\xE0\x8B\xD8\x2E\xFF\xA7\x3C\x66\x49\x66"
            "\x4B\x66\x76\x66\x44\x66\x32\xC0\x88\x44\x02\xEB\xA7\xB0\x08\xE8"
            "\xE6\x11\x75\x02\xEB\xF0\xA0\x18" [ \x00
#message 86 "\x2A\xE4\x99\x8B\xD8\x8B\xCA\xA1\x29\x01\x8B\x16\x2B\x01\x03\xC3"
            "\x13\xD1\x89\x44\x08\x89\x54\x0A\xC6\x44\x02\x02\xE9\x7C\xFF\x8B"
            "\x44\x08\x8B\x54\x0A\x3B\x16\x2B\x01\x7C\xC2\x0F\x8F\x6C\xFF\x3B"
            "\x06\x29\x01\x0F\x87\x64\xFF\xEB\xB4"
if (said(146, 85, 26110)){} [ 65FE
[ with modified button handler don't clear joystick when waiting for keypress
#message 87 "\x90\x90\x90"
if (said(3, 87, 18133)){} [ 46D5
[ don't poll joystick in EventWait function
if (said(3, 87, 18340)){} [ 47A4
[ or in main game loop
if (said(3, 87, 366)){} [ 016E
[ in menu handler disable the button conversion (new patch handles it)
if (said(3, 87, 38784)){} [ 9780
[ modify menu initialization to check for mouse on top row
#message 88 "\xE9\x8A\x0F"
if (said(3, 88, 38756)){} [ 9764
[ point init.joystick command to null function
#message 89 "\x86\x52"
if (said(2, 89, 1644, 0)){} [ DS:066C
[******************************************************************************


[******************************************************************************
[ 
[ INPUT FILTER
[
[ Key presses that generate control code ascii values (such as CTRL plus any
[ key) are displayed on the input line as character glyphs (unless assigned to
[ a controller). But they shouldn't, as there is no way for AGI to use or 
[ interact with them. This patch fixes that bug.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: none
[
[ PATCH CODE:
            [ IsPrintable
#message 90 "\x80\xFC\x01\x73\x0C\x3C\x20\x73\x0A\x3C\x0D\x74\x06\x3C\x08\x74"
            "\x02\xF8\xC3\xF9\xC3"
            [ InputCharPatch
            "\x8B\x76\x08\x8B\xC6\xE8\xE3\xFF\x73\x03\xE9\x45\x91\x5D\x5F\x5E"
            "\xC3"
            [ CharWaitPatch
            "\xE8\xD7\xFF\x72\xF7\x3C\x1B\x74\xF3\x3C\x03\x74\xEF\xE9\xFF\x9F"
if (said(54, 90, 43010)){} [ A802
[ redirect inputchar to the patch
#message 91 "\xE9\xAE\x6E"
if (said(3, 91, 14694)){} [ 3966
[ redirect charwait to the patch
#message 92 "\xE9\xEB\x5F"
if (said(3, 92, 18490)){} [ 483A
[******************************************************************************


[******************************************************************************
[
[ INVENTORY SCREEN PATCH
[ 
[ The inventory screen uses the text mode, but it doesn't have to. This patch 
[ changes it to use the graphics mode, which reduces flicker, and also allows 
[ the mouse to be used. You can highlight items by clicking them, and select 
[ them by double-clicking. Right-clicking will dismiss the screen, same as 
[ escape.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: The graphics mode uses a slightly different font
[ than the text mode, but it is barely noticeable. This is a property of DOS
[ and cannot be modified. 
[
[ If the mouse is enabled and item selection is enabled (calling status command
[ with flag f13 set to TRUE), you can click on an item to highlight it. 
[ Double-click an item to select it.
[
[ This patch also fixes a bug that misplaces the input line when switching to
[ text mode. (It is rare to allow input in text mode, but if you want to, the
[ input line will now be correctly positioned.)
[
[ PATCH CODE:
            [ ClearInvScreen
#message 93 "\xA1\x8E\x15\xA3\xFC\x13\x3C\x01\xB0\x0F\x75\x0D\xE8\x1E\xF4\x32"
            "\xC0\xA2\x8E\x15\xB0\x8F\xA3\xF1\x03\x50\xB0\x18\x50\x33\xC0\x50"
            "\xE8\xB7\x85\x83\xC4\x06\xC3"
            [ RestoreScreen
            "\xA0\xFC\x13\x3C\x01\x75\x0A\xA2\x8E\x15\xE8\x6B\xD4\xE8\x8F\xD1"
            "\xC3\x33\xC0\xE8\xDC\xFF\xE8\xF7\xAE\xE8\x94\x8F\xE8\xE8\x92\xC3"
            [ FMTItem
            "\x57\x55\x8B\xEC\x68\xCF\x1A\xFF\x76\x08\xC6\x06\x20\x0B\xFF\xC6"
            "\x06\x1E\x0B\x01\xE8\x72\x79\x8B\xF8\x32\xC0\x88\x05\x58\x58\x5D"
            "\x5F\xC3"
            [ FMTstrLen
            "\xE8\xDB\xFF\x50\xE8\x3E\xA7\x83\xC4\x02\xC3"
            [ FMTAgiPrintf
            "\xE8\xD0\xFF\x50\xE8\x4B\x7D\x83\xC4\x02\xC3"
            [ AddItemStrLen
            "\xFF\x74\x02\xE8\xE4\xFF\x83\xC4\x02\x88\x44\x07\x83\xC6\x08\xE9"
            "\xB3\x8C"
            [ InvMouseHandler
            "\x3D\x01\x02\x74\x03\x3D\x01\x04\x0F\x84\x87\x8D\x3D\x01\x03\x0F"
            "\x84\x79\x8D\x3D\x01\x01\x74\x03\xE9\x5C\x8D\xA0\x16\x1C\x32\xE4"
            "\xC1\xE8\x03\x3C\x02\x72\xF1\x8B\x9E\x64\xFE\x80\xFB\x01\x72\xE8"
            "\x4B\xD1\xEB\x2C\x02\x3B\xC3\x77\xDF\xC1\xE0\x04\x8D\xBE\x6E\xFE"
            "\x03\xF8\xA0\x15\x1C\xB3\x4F\xD0\xE8\x80\x3E\x07\x14\x01\x74\x05"
            "\xD0\xE8\x80\xEB\x28\x3C\x01\x72\xBF\x3A\xC3\x73\xBB\x8A\x4D\x07"
            "\x3A\xC1\x76\x12\x3B\xBE\x6A\xFE\x74\xAE\x83\xC7\x08\x8B\xCB\x2A"
            "\x4D\x07\x3A\xC1\x72\xA2\x57\x56\xE8\x72\x8E\x83\xC4\x04\x8B\xF7"
            "\xEB\x96"
if (said(275, 93, 43064)){} [ A838
[ modify status command to use patch
#message 94 "\xE8\xFF\x72"
if (said(3, 94, 13622)){} [ 3536
[ modify status command to return to display mode it came from
#message 95 "\xE8\x17\x73"
if (said(3, 95, 13637)){} [ 3545
[ modify SetInventory to save the string length of added items
#message 96 "\xE9\xC9\x72"
if (said(3, 96, 13803)){} [ 35EB
[ patch SetInventory to call the mouse handler
#message 97 "\x3C\x0D\x74\xEE\x3C\x1B\x74\xF1\xE9\x5B\x72\x90"
if (said(12, 97, 13923)){} [ 3663
#message 98 "\x8B\x05\xEB\x3D"
if (said(4, 98, 13893)){} [ 3645
[ patch SetInventory to right align formatted object text
#message 99 "\xE8\xC7\x72"
if (said(3, 99, 13783)){} [ 35D7
[ patch DrawInvScreen to display formatted object text
#message 100 "\xE8\xAD\x71"
if (said(3, 100, 14076)){} [ 36FC
[ SwapItem patch 1
#message 101 "\xE8\xC8\x70"
if (said(3, 101, 14305)){} [ 37E1
[ SwapItem patch 2
#message 102 "\xE8\xA6\x70"
if (said(3, 102, 14339)){} [ 3803
[ patch textmode function to fix bug that uses wrong background color
#message 103 "\x8A\x3E\xF1\x03\xB8" [ \x00
#message 104 "\x06"
if (said(7, 103, 40106)){} [ 9CAA
[ modify text.screen command to add input line if it's in use (also streamlines
[ by removing redundant code)
#message 105 "\xC6\x06\x8E\x15\x01\xFF\x36\xEF\x03\xFF\x36\xED\x03\xE8\xF3" [ \x00
#message 106 "\x83\xC4\x04\xE8\x37\x22\xE8\x47\xC1\xEB\x0F"
if (said(27, 105, 31238)){} [ 7A06
[******************************************************************************


[******************************************************************************
[
[ CUSTOM STATUS LINE
[
[ This patch allows you to designate a logic that will run in place of the 
[ built in status line update code. The logic will run when ever variables or 
[ flags that you choose change their value. Use the set.cursor.char function to
[ enable or disable the custom status line.
[
[ SYNTAX:
[   [ to enable or modify custom status line parameters:
[   set.cursor.char(" lNUM, vA, vB, vC, vD, vE, fA, fB, fC, fD, fE");
[   
[   [ to disable the custom status line:
[   set.cursor.char(" ");
[
[ LIMITATIONS/CONSIDERATIONS:
[ To enable the custom status line, the message passed to set.cursor.char must 
[ begin with a space (chosen because it doesn't have any practical value as a 
[ real cursor character). The rest of the message indicates what logic to run 
[ (prefix 'l' then number), and up to five variables and/or five flags that, 
[ when changed, will cause the logic to run. The parameters don't need to be 
[ separated, but you can include spaces and punctuation to improve readability.
[ Note that you cannot use define values; you must use 'v##' and 'f##' format.
[
[ If you don't designate a logic to run, or if you pass a single space 
[ character, the custom status line will be disabled instead.
[
[ Once enabled, you can hide/display the custom status line the same as the 
[ built-in line, using status.line.on and status.line.off commands.
[
[ During the main game cycle, if any of your designated variables or flags have
[ changed value, AGI will run your designated logic. (This approach means 
[ your status line doesn't update in each cycle; only when there's a change 
[ that matters. This reduces screen flicker.) The logic can be as simple or 
[ as complicated as you wish. See the Power Pack Demo game for some examples 
[ of custom status lines. 
[
[ When the custom status line is disabled, the built-in status line 
[ functionality is automatically restored. 
[
[ PATCH CODE:
            [ CheckStatus
#message 107 "\x80\x3E\xFA\x13\x01\x73\x06\xA0\x0C" [ \x00
#message 108 "\xE9\x98\x58\xBE\x1B\x1C\x32\xE4\x33\xD2\xAC\x84\xC0\x74\x13\x8B"
            "\xC8\xAC\x8B\xD8\x8A\x47\x09\x3A\x04\x74\x04\xB2\x01\x88\x04\x46"
            "\xE2\xEF\xBE\x26\x1C\xAC\x84\xC0\x74\x1E\x8B\xC8\xAC\xE8\xB1\xCE"
            "\x3A\x04\x74\x04\xB2\x01\x88\x04\x46\xE2\xF1\x80\x3E\xFA\x13\x02"
            "\x75\x06\xFF\x0E\xFA\x13\xEB\x07\x80\xFA\x01\x0F\x85\x6E\x58\xE9"
            "\x68\x58"
            [ DrawCustomStatLine
            "\x80\x3E\xF9\x03\x01\x75\x1F\x80\x3E\xFA\x13\x01\xB0\x01\x73\x01"
            "\xC3\xC6\x06\xFA\x13\x01\xA0\xFB\x13\x2A\xE4\x0B\xC0\x74\xF1\x50"
            "\xE8\xF9\x6A\x83\xC4\x02\x33\xC0\xC3"
            [ SetCursorPatch
            "\x83\xEC\x02\x56\x3C\x20\x74\x19\xA2\xF7\x03\xEB\x0D\x90\x90\xC6"
            "\x06\xFA\x13" [ \x00
#message 109 "\xC7\x06\x36\x04\xFF\xFF\x58\x8B\xE5\x5D\x5F\x5E\xC3\x8B\xF7\x32"
            "\xC0\xA2\xFB\x13\xA2\x1B\x1C\xA2\x26\x1C\xAC\x84\xC0\x74\x72\x0C"
            "\x20\x3C\x6C\x74\x56\x3C\x76\x74\x2B\x3C\x66\x75\xED\x8D\x46\xFE"
            "\x50\x56\xE8\x6B\x7B\x83\xC4\x04\x8B\xF0\xA0\x26\x1C\x3C\x04\x77"
            "\xD9\xBF\x27\x1C\x32\xE4\xD0\xE0\x03\xF8\xFF\x06\x26\x1C\x8A\x46"
            "\xFE\xAA\xEB\xC6\x8D\x46\xFE\x50\x56\xE8\x44\x7B\x83\xC4\x04\x8B"
            "\xF0\xA0\x1B\x1C\x3C\x04\x77\xB2\xBF\x1C\x1C\x32\xE4\xD0\xE0\x03"
            "\xF8\xFF\x06\x1B\x1C\x8A\x46\xFE\xAA\xEB\x9F\x8D\x46\xFE\x50\x56"
            "\xE8\x1D\x7B\x83\xC4\x04\x8B\xF0\xBF\xFB\x13\x8A\x46\xFE\xAA\xEB"
            "\x89\x80\x3E\xFB\x13\x01\x0F\x82\x61\xFF\xC6\x06\xFA\x13\x02\xE9"
            "\x64\xFF"
if (said(315, 107, 43339)){} [ A94B
[ adjust main loop to ignore updates if using custom status line
#message 110 "\xE8\x5D\x37\x8B\x3E\xD0\x07\x83\x3E\x39\x01\x01\x75\x08\xA0\x0F"
            [ \x00
#message 111 "\x88\x45\x21\xEB\x06\x8A\x45\x21\xA2\x0F" [ \x00
#message 112 "\xE8\xC7\x04\x80\x3E\xFA\x13\x01\x74\x15"
if (said(38, 110, 366)){} [ 016E
[ patch gameloop to check for/use custom status line function
#message 113 "\xE9\x5B\xA7"
if (said(3, 113, 493)){} [ 01ED
[ skip extra lines that reset stored score value after new.room call
#message 114 "\xEB\xD8"
if (said(2, 114, 473)){} [ 01D9
[ modify DrawStatusLine to use the custom status line function
#message 115 "\xE8\x8A\x71\x0B\xC0"
if (said(5, 115, 14362)){} [ 381A
[ patch set.cursor.char command to check for status line input
#message 116 "\xE8\x70\x6E"
if (said(3, 116, 15197)){} [ 3B5D
[ reset custom check table
[ use null message (m254)
if (said(1, NULLMSG, 7195, 0)){} [ DS:1C1B
if (said(1, NULLMSG, 7206, 0)){} [ DS:1C26
[******************************************************************************


[******************************************************************************
[
[ POINT AND CLICK MOVEMENT
[
[ When the mouse is enabled, point-and-click movement control for ego is 
[ provided automatically. Two path calculation modes are supported - the 
[ default AGI mode (move diagonally then horizontal/vertical) or a direct line 
[ mode.
[
[ SYNTAX: 
[   [ to enable point-and-click:
[   set(f17);
[
[   [ to disable point-and-click:
[   reset(f17);
[
[   [ to change path mode:
[   step.size(ego, vMODE*);
[
[   [ to stop ego during point-and-click movement:
[   vDIR = 0;
[   set.dir(ego, vDIR); 
[ 
[   * use a value of -1 for vMODE to set direct line mode;
[     use a value of -2 for vMODE to set the default AGI mode
[
[   **you can use any variable for vMODE or vDIR
[
[ LIMITATIONS/CONSIDERATIONS: Flag f17 is designated reserved with this patch. 
[ You can't use that flag for anything else.
[
[ The AGI default path mode will move ego diagonally until it is horizontally
[ or vertically aligned with the target location. You can switch to the direct 
[ line mode by using the step.size command on ego with a value of -1. To reset 
[ back to AGI default mode use a value of -2.
[ 
[ Pressing a direction key while ego is moving will override the point-and-
[ click motion. Normally, set.dir can't be used to control ego direction, but 
[ you can programmatically cancel point-and-click movement by using set.dir
[ command on ego as indicated. 
[
[ When canceled, ego will continue to move in the last calculated direction. 
[ If you want to cancel point-and-click movement and stop ego at the same time, 
[ use egodir (v6) as vDIR.
[ 
[ Do not set egodir to any other value while a point-and-click movement is in
[ progress. It will cause ego to move off the calculated path for one cycle 
[ which will prevent ego from reaching the clicked destination.
[
[ See the Power Pack Demo game for examples of how to program point-and-click
[ movement.
[
[ PATCH CODE:
            [ UpdateMovementPatch
#message 117 "\x50\x8B\x1E\xD0\x07\x3B\xF3\x74\x06\x58\x3C\x02\xE9\x1D\x5C\x3C"
            "\xFF\x75\x0B\xA0\x39\x01\x22\x06\x02\x14\x3C\x01\x74\x07\x32\xC0"
            "\xA2\x02\x14\xEB\xE4\x58\x56\xE8\x21\x02\xE9\xEA\x5B"
            [ ObjReachedDestPatch
            "\x8B\x76\x08\x8B\x1E\xD0\x07\x3B\xF3\x74\x03\xE9\x16\x6E\x80\x3E"
            "\x02\x14\x01\x75\xF6\x32\xC0\xA2\x02\x14\x5D\x5F\x5E\xC3"
            [ CalcDirPatch
            "\x3B\x36\xD0\x07\x75\x0E\x80\x3E\x02\x14\x01\x75\x07\x80\x3E\x36"
            "\x1C\x01\x74\x04\x5D\x5F\x5E\xC3\x80\x7C\x21\x01\x73\x0D\x32\xC0"
            "\xA2\x02\x14\xA2\x36\x1C\xA2\x3F\x1C\xEB\xE9\x80\x3E\x41\x1C\x01"
            "\x75\x17\xA1\x37\x1C\x2B\x06\x39\x1C\xA3\x37\x1C\x03\x06\x3B\x1C"
            "\x3B\x06\x39\x1C\x7F\x03\xA3\x37\x1C\x83\x3E\x37\x1C\x01\x7C\x1B"
            "\x80\x3E\x3F\x1C\x01\x74\x0B\xA0\x3D\x1C\xD0\xE0\xF6\xD8\x04\x05"
            "\xEB\x22\xA0\x3E\x1C\xD0\xE0\x04\x03\xEB\x19\x8A\x26\x3D\x1C\xFE"
            "\xC4\xA0\x3E\x1C\xFE\xC0\x32\xC4\xF6\xD8\xFE\xCC\xD0\xE4\xF6\xDC"
            "\x02\xC4\x04\x06\x88\x44\x21\xA2\x0F" [ \x00
#message 118 "\xA1\x37\x1C\x03\x06\x39\x1C\x3B\x06\x39\x1C\x7E\x04\x2B\x06\x3B"
            "\x1C\xA3\x37\x1C\xE9\x73\xFF"
            [ SetPath
            "\x33\xDB\x89\x1E\x36\x1C\x80\x3E\x03\x14\x01\x74\x01\xC3\xB3\x01"
            "\xA1\x42\x1C\x2B\x45\x03\x7F\x07\x75\x01\xC3\xF7\xD8\xF7\xDB\x88"
            "\x1E\x3D\x1C\x8B\xD0\x33\xDB\xB3\x01\xA1\x44\x1C\x2B\x45\x05\x7F"
            "\x07\x75\x01\xC3\xF7\xD8\xF7\xDB\x88\x1E\x3E\x1C\x8B\xF0\x3B\xC2"
            "\x74\x70\xC6\x06\x36\x1C\x01\x77\x28\x8B\xC2\xF7\xD8\xA3\x37\x1C"
            "\xF7\xD8\xD1\xE0\xA3\x3B\x1C\x8B\xD0\x8B\xC6\xD1\xE0\xF7\xD8\x03"
            "\xC2\xA3\x39\x1C\x33\xC0\xA2\x3F\x1C\xA0\x3D\x1C\x48\xF6\xD8\xEB"
            "\x35\xF7\xD8\xA3\x37\x1C\xF7\xD8\xD1\xE0\xA3\x3B\x1C\x8B\xF0\x8B"
            "\xC2\xD1\xE0\xF7\xD8\x03\xC6\xA3\x39\x1C\x33\xC0\x40\xA2\x3F\x1C"
            "\xD1\xEE\x8B\xC2\xD1\xE0\x3B\xC6\x72\x08\xA0\x3D\x1C\x48\xF6\xD8"
            "\xEB\x04\xB0\x05\x28\xD8\xD0\xE8\xA2\x40\x1C\xA1\x39\x1C\x01\x06"
            "\x37\x1C\xC3"
            [ CheckMouseMove
            "\x0B\xC0\x74\x50\x50\x8B\xF0\x8B\x44\x02\x3D\x01\x01\x75\x3D\xB0"
            "\x11\xE8\xFD\xCB\x22\x06\x39\x01\x3C\x01\x75\x30\xA0\x16\x1C\x32"
            "\xE4\x2B\x06\xB1\x11\x83\xF8\x01\x7C\x22\x3C\xAF\x77\x1E\xA3\x44"
            "\x1C\xA0\x15\x1C\x32\xE4\x8B\x3E\xD0\x07\x8B\x5D\x1A\xD1\xEB\x2B"
            "\xC3\xA3\x42\x1C\xB0\x01\xA2\x02\x14\xE8\x01\xFF\x58\x50\xE8\x3B"
            "\x9B\x83\xC4\x02\xC3"
            [ SetDirPatch
            "\x88\x45\x21\x3B\x3E\xD0\x07\x75\x07\x3C\x01\x73\x03\xA2\x02\x14"
            "\xC3"
            [ AutoLoopPatch
            "\x3B\x36\xD0\x07\x75\x17\x80\x3E\x02\x14\x01\x75\x10\x80\x3E\x36"
            "\x1C\x01\x75\x09\xA0\x40\x1C\x88\x46\xFF\xE9\x2C\x59\x8A\x44\x21"
            "\xE9\x1B\x59"
            [ NewRoomPatch
            "\x88\x26\x02\x14\xE9\x45\xCB"
            [ StepSizePatch
            "\x3B\x3E\xD0\x07\x75\x12\x3C\xFF\x75\x04\xB0\x01\xEB\x06\x3C\xFE"
            "\x75\x06\x32\xC0\xA2\x03\x14\xC3\x88\x45\x1E\xC3"
            [ MouseMoveCalc
            "\x56\x57\x55\x8B\xEC\x8B\x76\x08\x8A\x44\x1E\x2A\xE4\x50\xFF\x36"
            "\x44\x1C\xFF\x36\x42\x1C\xE9\xB8\x6B"
if (said(612, 117, 43654)){} [ AA86
[ initialize data used by custom patch function
#message 119 "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"
if (said(12, 119, 7222, 0)){} [ DS:1C36
[ patch UpdateMovement to check for mousemove
#message 120 "\xE9\xD4\xA3"
if (said(3, 120, 1711)){} [ 06AF
[ second patch to UpdateMovement to use custom path loop
#message 121 "\xE9\xC2\xA6"
if (said(3, 121, 1478)){} [ 05C6
[ patch ObjReachDest to check for mousemove
#message 122 "\xE9\xDC\x91"
if (said(3, 122, 6356)){} [ 18D4
[ patch CalcMoveDir to use custom path calculation
#message 123 "\xE9\x03\x92"
if (said(3, 123, 6347)){} [ 18CB
[ patch InputPoll to look for mousecontrol clicks
#message 124 "\xE8\x37\x73"
if (said(3, 124, 14571)){} [ 38EB
[ patch egodirchange section of InputPoll to reset mousemove flag
#message 125 "\x32\xC0\xA2\x02\x14\x8B\x44\x02\x3B\xC7\x75\x02\x2B\xC0"
if (said(14, 125, 14620)){} [ 391C
[ modify stepsize to enable/disable custom path
#message 126 "\xE8\xC9\x39"
if (said(3, 126, 29417)){} [ 72E9
[ patch SetDir to stop an in-progress mousemove
#message 127 "\xE8\x0E\x39"
if (said(3, 127, 29545)){} [ 7369
[ patch NewRoom to cancel mousemoves
#message 128 "\xE8\x8C\x91"
if (said(3, 128, 6943)){} [ 1B1F
[******************************************************************************


[******************************************************************************
[
[ WANDER COMMAND BUG FIX
[
[ The wander command appears to have a minor bug in it. When the distance 
[ counter reaches zero, a new direction is chosen randomly, but the counter 
[ gets set to 255, instead of choosing a new counter. A new counter is only 
[ chosen if the object stops (due to hitting an obstacle) AND the current 
[ counter is less than six. The effect of this bug is that objects tend to go 
[ in straight lines much further than the desired maximum of 51, and mostly 
[ change direction only when hitting an obstacle. This is usually not 
[ noticeable, because most rooms don't have that much space available for 
[ objects to wander. This patch fixes that bug, so objects will choose a new 
[ distance counter between 6 and 51 any time a new direction is chosen, as it 
[ appears that was the original intent. 
[
[ SYNTAX: n/a - patch does not modify any command syntax
[ 
[ LIMITATIONS/CONSIDERATIONS: If you would rather use the original algorithm 
[ for wandering, just comment out this patch.
[
[ PATCH CODE:
#message 129 "\xC6\x45\x22\x01\xC6\x45\x27" [ \x00
#message 130 "\xC3"
if (said(9, 129, 44266)){} [ ACEA
[ modify wander command to call patch
#message 131 "\xE8\xDD\x3A\x90"
if (said(4, 131, 29194)){} [ 720A
[ inline patch to correctly assign random direction/distance
#message 132 "\x0B\xC0\x74\x0A\xFE\x4C\x27"
if (said(7, 132, 16843)){} [ 41CB
[******************************************************************************


[******************************************************************************
[
[ FOUR CHANNEL SOUND
[  
[ The PC version of AGI will only play single channel sound through the PC 
[ speaker. This patch will automatically check for a Sound Blaster (or 
[ compatible) FM synthesizer sound board and enable all three sound channels if
[ one is present. The noise channel is also supported.
[ It will also detect the presence of a general MIDI device (such as a Roland)
[ and allow playback of sounds as MIDI music.
[
[ SYNTAX: 
[   [ to enable four channel sound:
[   set(f18);
[   [ to disable four channel sound:
[   reset(f18);
[
[   [ to switch between FM synthesizer and MIDI:
[   set.key(MODE, ANY**, c254);
[
[   [ to change channel envelopes (instruments):
[   set.key(vCHANNEL*, vINSTRUMENT*, c253);
[
[   [ to set a custom envelope for a sound channel:
[   set.key(vCHANNEL*, vENVDATASTR*, c252);
[
[   * The compiler expects this argument to be a number so pass the 
[     variable as a number without the 'v' prefix
[
[  ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: Flag f18 is reserved for use by this patch to 
[ control number of sound channels. It should not be used for anything else. 
[
[ The patch checks for both types of sound card- FM synthesizer and MIDI 
[ playback device. If one or both are found, four channel sound will be 
[ available. If neither sound card is detected, the patch will play single 
[ channel sound only, regardless of the value of f18.
[
[ The patch sets reserved variable v22 when it runs as follows: 
[      1: no sound boards/devices detected
[      2: FM synth sound board only detected
[      3: MIDI device only detected
[      4: Both FM synth and MIDI devices detected.
[ You can check this variable to know what sound capabilities are available. 
[
[ In addition to playing all sound channels, volume control is also supported 
[ (unlike the normal PC mode which ignores volume information). Individual 
[ notes in a sound file are limited to a four-bit (0-15) volume value, but 
[ since the sound card uses six bits, values for the master volume level 
[ (reserved variable v23) can be from 0 (no attenuation, maximum volume) to 
[ 63 (maximum attenuation, muted sound). This gives you much finer control 
[ over the volume of sounds being played.
[
[ The default mode is FM synth. To change the mode, pass a variable with value 
[ of 1 (for MIDI mode) or 0 (for FM Synth mode) to set.key with c254 as the  
[ controller argument.
[
[ In FM synthesis mode, the sounds are generated by the sound card's frequency
[ modulation (FM) chip. You can program 'instruments' by changing a channel's
[ envelope registers. The default envelope for the FM music channels is the 
[ one provided in the original AGISB hack by Anders M. Olsson (AGISB). The 
[ noisechannel FM defaults (both tone and white noise) are best estimates to 
[ match original AGI sound.
[
[ A set of 127 additional 'instruments' that roughly correspond to standard 
[ MIDI instruments is also included. You can change the instrument for each 
[ channel independently by passing the instrument number (0-127 for standard 
[ MIDI instruments, 128 for default music channels, 129 for default white 
[ noise and 130 for default tone) to the set.key command with c253 as the 
[ controller argument. For the noise channels use a channel value of 3 to 
[ change the white noise instrument, and 4 to change the tone instrument. See 
[ the Power Pack demo game for a complete list of all 128 instruments that are 
[ available.
[ 
[ Keep in mind that the sound is generated by an FM chip, not using sampled 
[ sounds such as in MIDI sound boards. So the results aren't going to sound 
[ much like their MIDI counterparts. But through experimentation, you can find 
[ instrument values that do provide for very nice playback of sounds, with 
[ lots of variety.
[ 
[ You can also set the envelope data to a custom value by passing a string 
[ (by variable) that contains 11 2-digit byte codes to the set.key command 
[ with c252 as the controller argument. You need to have a good understanding 
[ of FM chip details if you plan to use this option. See the Power Pack demo 
[ game for additional information on how to use this option, and for links to 
[ some resources for working with sound card FM chips.
[
[ In MIDI mode, instruments can be changed as well, but only for the three 
[ tone tracks. The noise track is preset to a percussion instrument. 
[ You cannot customize instruments when in MIDI mode. Only instruments 0-127 
[ are available in MIDI mode.
[
[ Separate instrument settings are maintained for each mode. You should always
[ stop sounds before changing modes to avoid unexpected results. 
[
[ PATCH CODE:
            [ WriteFM
#message 133 "\x50\x51\x52\xBA\x88\x03\x86\xE0\xEE\xB1\x19\xEC\xFE\xC9\x75\xFB"
            "\x42\x8A\xC4\xEE\x4A\xB1\x64\xEC\xFE\xC9\x75\xFB\x5A\x59\x58\xC3"
            [ ResetSound
            "\x33\xDB\xA0\xF2\x13\x40\x88\x47\x1F\x32\xC0\x80\x3E\xF2\x13\x02"
            "\x75\x02\x04\x02\xA2\xA6\x1C\xC6\x06\xF3\x13\xFF\x80\x26\x0B\x01"
            "\xDF\x88\x1E\xA9\x1C\x88\x1E\xAA\x1C\x88\x1E\xAB\x1C\x6A\x0B\xB8"
            "\xAC\xB7\x50\x0E\xB8\xF5\xB1\x50\x0E\xE8\x2B\xB1\x83\xC4\x04\xB8"
            "" [ \x00
#message 134 "\xB2\x50\x0E\xE8\x20\xB1\x83\xC4\x04\xB8\x0B\xB2\x50\x0E\xE8"
            "\x15\xB1\x83\xC4\x0A\x6A\x16\x68\xB7\xB7\x0E\x68\x16\xB2\x0E\xE8"
            "\x05\xB1\x83\xC4\x0A\xC3"
            [ DetectFM
            "\x56\x33\xC0\xB4\x01\xE8\x72\xFF\xB8\x60\x04\xE8\x6C\xFF\xB8\x80"
            "\x04\xE8\x66\xFF\xBA\x88\x03\xEC\x80\xE0\xE0\x50\xB8\xFF\x02\xE8"
            "\x58\xFF\xB8\x21\x04\xE8\x52\xFF\xBA\x88\x03\x33\xC9\x49\x74\x05"
            "\xEC\x0A\xC0\x79\xF8\x59\x8A\xE8\x80\xE5\xE0\xB8\x60\x04\xE8\x39"
            "\xFF\xB8\x80\x04\xE8\x33\xFF\x33\xDB\x80\xF9\x01\x73\x06\x80\xFD"
            "\xC0\x75\x01\x43\x88\x1E\xF2\x13\x80\xFB\x01\x75\x2C\xB3\x8B\x53"
            "\xE8\x82\x76\x83\xC4\x02\x8B\xF0\xBF\x2C\xB2\xB9\xA1\x05\x06\x0E"
            "\x07\xAD\xE8\xB1\xF0\xAA\xE2\xF9\x07\x33\xC0\xBB\x68\x1C\x89\x07"
            "\x89\x47\x02\x89\x47\x04\x89\x47\x06\xBA\x01\x03\xB7\x10\xE8\xDC"
            "\xF0\xEC\x24\x40\x75\x0F\x4A\xB0\xF8\xEE\xB7\x10\xE8\xCE\xF0\x42"
            "\xEC\x24\x40\x74\x0A\x80\xC2\x30\x80\xFA\x31\x76\xDF\x33\xD2\x80"
            "\xE2\xFE\x89\x16\xA7\x1C\x83\xFA\x01\x72\x0C\x80\x0E\xF2\x13\x02"
            "\xB0\xFF\xEE\xB0\x3F\x42\xEE\xE8\xD0\xFE\x58\xC3"
if (said(338, 133, 44275)){} [ ACF3
[ use patch command to run the detection function
#message 135 "\x79\xAD"
if (said(2, 135, 1488, 0)){} [ DS:05D0
stop.sound();
[ now add the rest of the 3-channel patches
            [ NoteOff
#message 136 "\x8B\x87\x68\x1C\x50\x8A\xE3\xD0\xEC\x80\xC4\xA0\xE8\x6B\xFF\x58"
            "\x8A\xC4\x8A\xE3\xD0\xEC\x80\xC4\xB0\xE8\x5E\xFF\xC3"
            [ SoundStopPC
            "\x80\x3E\xA6\x1C\x02\x0F\x83\x1E\x04\x53\x33\xDB\x33\xC0\x89\x87"
            "\x68\x1C\xE8\xCE\xFF\x80\xC3\x02\x33\xC0\x89\x87\x68\x1C\xE8\xC2"
            "\xFF\x80\xC3\x02\x33\xC0\x89\x87\x68\x1C\xE8\xB6\xFF\x80\xC3\x02"
            "\x33\xC0\x89\x87\x68\x1C\xE8\xAA\xFF\x5B\x33\xC0\xA3\x90\x10\xA0"
            "\xA2\x10\xE8\x47\xCA\xC3"
            [ NoiseOn
            "\x56\xF6\xC6\x04\x74\x1A\x80\x3E\x70\x1C\x01\x74\x24\xC6\x06\x70"
            "\x1C\x01\xBE\x16\xB2\x1E\x0E\x1F\xB1\x03\xE8\x37\x01\x1F\xEB\x11"
            "\x80\x3E\x70\x1C\x02\x74\x0A\xC6\x06\x70\x1C\x02\xBE\x21\xB2\xEB"
            "\xE4\x5E\x80\xE6\x03\x80\xFE\x03\x75\x05\xA1\x6C\x1C\xEB\x0E\x8A"
            "\xE6\x80\xC4\x05\xD0\xE4\xD0\xE4\x80\xC4\x01\xB0\x80\x89\x87\x68"
            "\x1C\xB3\xA3\xC3"
            [ NoteOn
            "\x80\x3E\xA6\x1C\x02\x0F\x83\x24\x03\xE8\x3D\xFF\x80\xFB\x06\x75"
            "\x05\xE8\x98\xFF\xEB\x43\x53\x80\xE6\x0F\x8A\xDE\x32\xF6\x80\xE2"
            "\x3F\xB1\x04\xD3\xE2\x03\xDA\x0B\xDB\x75\x04\x33\xC0\xEB\x20\xB1"
            "\x02\x81\xFB\x3F\x03\x7D\x09\xFE\xC1\xD1\xE3\x80\xF9\x07\x75\xF1"
            "\xB8\xE5\xF2\xB2\x08\x32\xF6\xF7\xF3\xD0\xE1\xD0\xE1\x0A\xE1\x5B"
            "\x89\x87\x68\x1C\xD1\xEB\x80\xC3\xA0\x80\xCC\x20\x50\x8A\xE3\xE8"
            "\x61\xFE\x58\x8A\xC4\x80\xC3\x10\x8A\xE3\xE8\x56\xFE\xC3"
            [ SoundVolume
            "\x53\x8A\x87\xDF\x15\xF6\xD8\x04\x0F\x50\x33\xDB\x8A\x47\x20\x5B"
            "\x3C\x3F\x73\x06\xF6\xD8\x04\x3F\xEB\x02\x33\xC0\xF6\xE3\xB3\x0F"
            "\xF6\xF3\x5B\x80\x3E\xA6\x1C\x02\x0F\x83\x08\x03\x3C\x01\x73\x0D"
            "\x8A\xE3\xD0\xEC\x80\xC4\xB0\x32\xC0\xE8\x19\xFE\xC3\x8B\xC8\x53"
            "\x8A\xE3\xD0\xEC\x50\x8A\xC4\xB3\x0B\xF6\xE3\x8B\xD8\x81\xC3\xF8"
            "\xB1\x2E\x8A\x07\x50\x24\x3F\xF6\xD8\x04\x3F\xF6\xE1\xB1\x3F\xF6"
            "\xF1\xF6\xD8\x04\x3F\x59\x80\xE1\xC0\x08\xC1\x58\x80\xFC\x03\x75"
            "\x03\x80\xC4\x05\x8A\xC1\x80\xC4\x43\xE8\xD9\xFD\x5B\xC3"
            [ SendChannelData
            "\xAC\x80\xFC\xC0\x74\x08\x80\xF9\x03\x75\x03\x80\xC4\x05\x02\xE1"
            "\xE8\xC4\xFD\xC3"
            [ SetOneInstrument
            "\xB4\x20\xE8\xE7\xFF\xB4\x23\xE8\xE2\xFF\xB4\x40\xE8\xDD\xFF\xB4"
            "\x43\xE8\xD8\xFF\xB4\x60\xE8\xD3\xFF\xB4\x63\xE8\xCE\xFF\xB4\x80"
            "\xE8\xC9\xFF\xB4\x83\xE8\xC4\xFF\xB4\xE0\xE8\xBF\xFF\xB4\xE3\xE8"
            "\xBA\xFF\xB4\xC0\xE8\xB5\xFF\xC3"
            [ SetAllInstruments
            "\xF6\x06\xF2\x13\x01\x74\x1B\x56\xBE\xF5\xB1\x1E\x0E\x1F\xFC\x32"
            "\xC9\xE8\xB4\xFF\xFE\xC1\x80\xF9\x03\x75\xF6\x1F\xC6\x06\x70\x1C"
            "\xFF\x5E\xC3"
            [ InitSound
            "\xF6\x06\xA6\x1C\x02\x74\x1B\xB1\x03\x32\xED\xB0\xC1\xBB\xA9\x1C"
            "\x8A\x27\xE8\xA3\x01\x86\xC4\xE8\x9E\x01\x86\xC4\xFE\xC0\x43\xE2"
            "\xEF\xC3\xB1\x01\x32\xC0\x8A\xE1\xE8\x3D\xFD\xFE\xC1\x80\xF9\xF5"
            "\x76\xF2\xB8\x20\x01\xE8\x30\xFD\xB8\x20\xBD\xE8\x2A\xFD\xE8\x9C"
            "\xFF\xC3"
            [ CmdSoundPatch
            "\x56\xF6\x06\xF2\x13\x03\x74\x59\xB0\x12\xE8\x5C\xC8\x3A\x06\xF3"
            "\x13\x75\x0D\x3C\x01\x72\x7A\x80\x3E\xA6\x1C\x01\x72\x73\xEB\x39"
            "\xA2\xF3\x13\x1E\x0E\x1F\x0B\xC0\x74\x39\xB8\xC8\x29\xA3\xCC\x83"
            "\xB8\xD9\x29\xA3\xBB\x83\xB8\x8A\x2A\xA3\xA4\x83\xB8\x43\x2B\xA3"
            "\x59\x83\xB8\x19\x2B\xA3\x83\x83\xB8\xF4\x2A\xA3\xA8\x83\xB0\x08"
            "\xA2\xFB\x82\xB0\x04\xA2\x01\x83\x1F\x80\x26\xA6\x1C\x02\xE8\x5D"
            "\xFF\xEB\x2E\xB8\x1B\x01\xA3\x59\x83\xB0\x07\x32\xE4\xA3\xCC\x83"
            "\xB0\x18\xA3\xBB\x83\xB0\x61\xA3\xA4\x83\xB0\xF1\xA3\x83\x83\xB0"
            "\xCC\xA3\xA8\x83\xB0\x02\xA2\xFB\x82\xB0\x01\xA2\x01\x83\x90\x90"
            "\x1F\x5E\x8B\xDE\x46\xC3"
            [ SetSndMode
            "\x3C\x01\x72\x02\xB0\x01\x40\x84\x06\xF2\x13\x74\x05\x0C\x01\xA2"
            "\xA6\x1C\xC3"
            [ ChangeInst
            "\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\xF6\x06\xA6\x1C\x02\x74"
            "\x10\x3C\x03\x73\x34\x80\xFC\x80\x73\x2F\x8A\xD8\x88\xA7\xA9\x1C"
            "\xC3\x3C\x05\x73\x24\x80\xFC\x82\x77\x1F\x6A\x0B\x8A\xD8\xB0\x0B"
            "\xF6\xE4\x05\x2C\xB2\x50\x0E\xB0\x0B\xF6\xE3\x05\xF5\xB1\x50\x0E"
            "\xE8\xC1\xAD\x83\xC4\x0A\xE8\xA9\xFE\xC3"
            [ CustomInst
            "\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x3C\x05\x73\x28\x50\x8A"
            "\xC4\xB4\x28\xF6\xE4\x05\x0D\x02\x90\x90\x8B\xF0\x58\xB1\x0B\x32"
            "\xED\xF6\xE1\x05\xF5\xB1\x8B\xF8\x06\x0E\x07\xAD\xE8\xB0\xED\xAA"
            "\xE2\xF9\x07\xE8\x72\xFE\xC3"
            [ GetMIDINote
            "\xB2\x2D\x81\xFB\x04\x02\x7D\x07\x80\xC2\x0C\xD1\xE3\xEB\xF3\xB1"
            "\x0B\x32\xED\xB8\xCE\x03\x3B\xD8\x7D\x12\x52\x51\xB9\x98\x03\xF7"
            "\xE1\xB9\xCE\x03\xF7\xF1\x59\x5A\xFE\xC2\xE2\xEA\xC3"
            [ GetMIDINoise
            "\x80\xE6\xF7\xB0\x33\x80\xFE\xE4\x74\x12\xB0\x2E\x80\xFE\xE5\x74"
            "\x0B\xB0\x31\x80\xFE\xE6\x74\x04\x33\xD2\xF9\xC3\x8A\xD0\xC3"
            [ SendMIDIData
            "\x52\x50\x8B\x16\xA7\x1C\x42\xEC\x24\x40\x75\xFB\x58\x4A\xEE\x5A"
            "\xC3"
            [ ChannelAdjust
            "\x8A\xC3\x3C\x03\x75\x02\xB0\x08\xC3"
            [ NoteOnMIDI
            "\x3C\x0F\x75\x02\x33\xD2\xD1\xEB\x53\x8A\x8F\x68\x1C\xE8\xE7\xFF"
            "\x0A\xC9\x74\x0F\x04\x81\xE8\xCD\xFF\x8A\xC1\xE8\xC8\xFF\x32\xC0"
            "\xE8\xC3\xFF\x80\xFB\x03\x75\x05\xE8\x9C\xFF\x73\x1B\x80\xE6\x0F"
            "\x8A\xDE\x32\xF6\x80\xE2\x3F\xB1\x04\xD3\xE2\x03\xDA\x75\x06\x5B"
            "\x88\x97\x68\x1C\xC3\xE8\x52\xFF\x5B\x88\x97\x68\x1C\xE8\xA7\xFF"
            "\x04\x91\xE8\x91\xFF\x8A\xC2\xE8\x8C\xFF\xB0\x7F\xE8\x87\xFF\xC3"
            [ StopSndMIDI
            "\xB1\x04\x32\xED\x33\xD2\x8B\xD9\x4B\xD1\xE3\x51\xE8\x91\xFF\x59"
            "\xE2\xF2\xE9\xFE\xFB"
            [ SndVolMIDI
            "\x53\xD1\xEB\x3A\x87\x6C\x1C\x74\x18\x88\x87\x6C\x1C\x50\xE8\x71"
            "\xFF\x04\xB1\xE8\x5B\xFF\xB0\x07\xE8\x56\xFF\x58\xD0\xE0\xE8\x50"
            "\xFF\x5B\xC3"
if (said(1148, 136, 44409)){} [ AD79
[ modify sound command to use the patch
#message 137 "\xE8\xB6\x5B"
if (said(3, 137, 21524)){} [ 5414
[ patch InitNewGame to set sound channel correctly
#message 138 "\xA0\xF2\x13\x40\xB3\x1F\x32\xFF\x88\x07\x3C\x02\x73\x05\xEB\x0D"
if (said(16, 138, 4795)){} [ 12BB
[ instrument data
#message 139 "02023000F1F5840400000082040500F1A50C3500000242040805F1F401C4010002"
            "04420106A1F4214301010082442000F3F3030300010004042003A1A20102010100"
            "02C410087162E1E203030008080707F7F7070703030688842007F1F10303000000"
            "0C640707F7FE072303010002043F0100F50016000002C2C22000A1A12525000006"
            "8C040D0087F5812D03000402042100F1A715160200088C44200323438F1E000004"
            "8202030388411C110003048C440F0087A4871800010662C41F0016A5142502030E"
            "84421C00FF8124830003000442070385A5872201000604C4070387878734030306"
            "04821A034742878300000604420F03FB41011700030004C2000347438783010000"
            "02821000F4F5F10401020202020D00F3F4410300020284CC1100F26525D5020102"
            "02C21003F4F4F1F1000002C2042000F1F5F17400010208822F00F1F47474020308"
            "0282030075A1A15300030882821002A3F3F3F3000004E2620000F1F2F1A1000000"
            "C2420000F973F19300020002C22000F1F3F1F30002002222050681F11111000000"
            "42021700F5F3030301000402C2200051FF5112000200C8022000F4F104B6010108"
            "4C020305F5F5D30501010404420D038C530B5302030EA2101700AE8F190501010E"
            "04440505F5F5051501010408140505F5F5050501010408440500F5F50517000100"
            "08440503F5F24C0503010CA4A41700F5F503030000060202100013A31103000000"
            "02C2200051A50102000200024209093151011100000002422008F1F20102000000"
            "82440808F1F1010201000084C4200811A101220000000844200811A10152000000"
            "0244200811A101A20000000282000055D4040400000204C21C0055FF0505000200"
            "0242200345F105050002000244000324280424020106C44211085A712424010200"
            "02480E005454212302020602480E0A5451211402000A02440006F6F40704010004"
            "0444100CF4FE030200000C02040800AAF51A0300020A04021004F4F40404000004"
            "02020404F4F4040400000402020400F4F80404000204C2C21705FFFF0105010004"
            "0202040454A804110001040204130BF1F1116102010844481703F1311122000100"
            "02423F0300F1000500020444C4200355F1F10500000202423F01FFFF0507000000"
            "42442103A133211302000044C4200333F1F12500000204020108F1F10101010100"
            "02C43F0500A1005400000002040101F122080102010004020808F1F11101020102"
            "0402080AE2F1010400000002021703F1F301810000000202000381F38101000000"
            "82021000F1F103010003000442200011A101A20000000202000081818181000000"
            "0202080881F101010000000844200811A101A20000000202200081818181000000"
            "02020800448183830000000844200811A101A200000002021000F18141C1000000"
            "44A83200D2E2D2B2020202E2041000F491F5F102000082C410001181F2F2010002"
            "02020010F1FF010100030E0C680200FDF1C411000002C8441C0392825292020000"
            "C4040000225183620101004242200355F1F1F1010000C2C23000F1F1F1F1000000"
            "E2E83000F1F1F1F10001002CA83000F1D1F1F6000306E2EC3000F172F174000000"
            "E4E83C007B553315030102F02C05002AF54F05010004183C3100336C0378010004"
            "C2C432047443159501020E04421003743105130003047CF03B041A7C9E7C02020A"
            "38481B0545F59F0503010A14140505F5F1050401000414140505F5F50505010104"
            "1414050345F5430501010414B00F057CF5DD050301040802110BF5F10401000000"
            "02020003F1F1010500000002023F0061F1010601000002020000F12F0107020204"
            "02020E08F1F1010300000802020010F1F1010200000E02020010F1FF010100030E"
            "02083F00003F001A00000002883F00F1550131000200828200081111010100000E"
            "828200081111010100000E02020000FFF5150700000E22215909FFFF030F020000"
            "2F200000FFFF0F0F00030E22242100C0C00C0C000000"
[******************************************************************************


[******************************************************************************
[
[ SAVE/RESTORE/RESTART SUPPORT
[
[ This patch provides support for save/restore/restart functions for all of 
[ the patches in this power pack. 
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: Games that are saved by the power pack include a 
[ version marker that ensures restored games are compatible with the AGI 
[ version and power pack version they were saved from. If you try to restore a
[ game from the wrong version, AGI will raise an error and quit. 
[
[ The patch restores the status bar state (normal AGI doesn't). It also fixes 
[ a bug that didn't correctly reload a trace logic, if one was loaded when the 
[ game was saved.
[
[ After a restart, the interpreter version (as an index value, i.e. 1 = v2.089,
[ 2 = 2.272, etc.) is returned in v19 (errorParameter) in case your code needs
[ to know. For this interpreter version, the index value is:
[
[   version 3.002.149 --> index == 19
[
[ PATCH CODE:
            [ SavePatch
#message 140 "\x6A\x02\xC7\x46\xFE\x95\x10\x8D\x46\xFE\x50\xFF\xB6\x34\xFF\xE8"
            "\x9D\x73\x83\xC4\x06\x0B\xC0\x74\x65\xA0\xF9\x03\xA2\xF8\x13\xA0"
            "\x55\x1B\xA2\xF9\x13\xA0\x4B\x1B\x8A\x26\x4D\x1B\xA3\xF4\x13\xA0"
            "\x59\x1B\x8A\x26\x5D\x1B\xA3\xF6\x13\x32\xE4\xB0\x15\x50\xB8\xF3"
            "\x13\x50\xFF\xB6\x34\xFF\xE8\x66\x73\x83\xC4\x06\x0B\xC0\x74\x2E"
            "\xB0\xC2\x50\xB8\x89\x1B\x50\xFF\xB6\x34\xFF\xE8\x51\x73\x83\xC4"
            "\x06\x0B\xC0\x74\x19\x1E\x0E\x1F\xB0\xC0\x50\xB8\x76\xD4\x50\xFF"
            "\xB6\x34\xFF\xE8\x5D\xA8\x83\xC4\x06\x1F\x0B\xC0\x75\x03\xE9\xDF"
            "\x72\xFF\xB6\x34\xFF\xE9\xF6\x72"
            [ RestorePatch
            "\x8D\x46\xFE\x50\xFF\xB6\x34\xFF\xE8\xE2\x70\x83\xC4\x04\x0B\xC0"
            "\x74\x61\x81\x7E\xFE\x95\x10\x75\x5A\xB8\xF3\x13\x50\xFF\xB6\x34"
            "\xFF\xE8\xC9\x70\x83\xC4\x04\x0B\xC0\x74\x48\xA0\xF8\x13\xA2\xF9"
            "\x03\xB8\x89\x1B\x50\xFF\xB6\x34\xFF\xE8\xB1\x70\x83\xC4\x04\x0B"
            "\xC0\x74\x30\xB0\xC0\x90\x90\x90\x90\x90\x90\x50\x8D\x86\x36\xFF"
            "\x50\xFF\xB6\x34\xFF\xE8\xD0\xA7\x83\xC4\x06\x0B\xC0\x74\x14\x50"
            "\x8D\x86\x36\xFF\x50\x1E\xB8\x76\xD4\x50\x0E\xE8\xB7\xA5\x83\xC4"
            "\x0A\xEB\x03\xE9\xE5\x6F\xE8\x82\xE3\x33\xC0\xE8\xB7\x9B\x83\x3E"
            "\xFE\x13\x01\x75\x03\xE8\x08\xEC\x33\xC0\xA3\x55\x1B\xA0\x31\x1C"
            "\x50\xA0\x32\x1C\x50\xA0\x33\x1C\x50\xE8\x67\xE7\x83\xC4\x06\xA0"
            "\x35\x1C\x2E\xA2\x49\x88\x2C\x04\xF6\xD8\xB4\x14\xF6\xE4\x2E\xA2"
            "\x35\x82\xA1\xF4\x13\xA2\x4B\x1B\x88\x26\x4D\x1B\xA1\xF6\x13\xA2"
            "\x59\x1B\x88\x26\x5D\x1B\xE8\xF5\xF3\xFF\xB6\x34\xFF\xE9\xA6\x6F"
            [ RestartPatch
            "\x2B\xC0\x50\xB0\x15\x50\xB8\xF3\x13\x50\xE8\x73\xA5\x83\xC4\x04"
            "\x2B\xC0\xB0\xC2\x50\xB8\x89\x1B\x50\xE8\x64\xA5\x83\xC4\x06\xB0"
            "\x0D\x32\xE4\xCD\x10\xE8\x16\x1B\xE8" [ \x00
#message 141 "\xE3\x33\xC0\xA3\x8E\x15"
            "\xA3\xF9\x03\xE8\x2F\x9B\x33\xC0\xB0\x04\xA2\x31\x1C\x50\x33\xC0"
            "\x50\xB0\x0F\xA2\x33\x1C\x50\xE8\xE9\xE6\x83\xC4\x06\xB0\x03\xA2"
            "\x35\x1C\x2E\xA2\x49\x88\xB0\x14\x2E\xA2\x35\x82\x33\xC0\xA2\x46"
            "\x1C\xA3\x53\x1B\xA3\x55\x1B\xC6\x06\x59\x1B\x02\xC6\x06\x5D\x1B"
            "\x25\xC6\x06\x4B\x1B\x01\xC6\x06\x4D\x1B\x0F\xB0\x1B\xA2\x18\x1C"
            "\xFE\xC0\xA2\x19\x1C\xFE\xC0\xA2\x1A\x1C\xE8\x61\xF3\xC3"
            [ IntVersionPatch
            "\x32\xFF\xB3\x12\xB0\x13\x88\x47\x09\x32\xE4\xB0\x06\xC3"
            [ SlotMouseHandler
            "\x3D\x01\x02\x74\x03\x3D\x01\x04\x0F\x84\x96\xD4\x3D\x01\x03\x74"
            "\x08\x3D\x01\x01\x74\x03\xE9\x2B\xD4\x8B\xC8\x33\xFF\xA0\x15\x1C"
            "\x32\xE4\xD1\xE8\x80\x3E\x07\x14\x01\x74\x02\xD1\xE8\x3B\x06\x30"
            "\x0B\x72\xE3\x3B\x06\x34\x0B\x77\xDD\xA0\x16\x1C\xC1\xE8\x03\x2B"
            "\x86\x06\xFE\x3C\xFF\x7E\xCF\x8B\x9E\x0C\xFE\x4B\x39\xD8\x7F\xC6"
            "\x81\xF9\x01\x03\x0F\x84\x02\xD4\x50\x8B\x86\x0E\xFE\x03\x86\x06"
            "\xFE\x50\xE8\x8D\xD5\x83\xC4\x02\x58\xE9\xC9\xD3"
            [ StateReloadPatch
            "\xE8\x6B\x5C\xA0\xF9\x13\x3C\x01\x72\x0C\xA2\x55\x1B\x30\xE4\x50"
            "\xE8\x68\x59\x83\xC4\x02\xC3"
if (said(631, 140, 47053)){} [ B7CD
[ patch savegame to use the patch
#message 142 "\xE9\x83\x8C"
if (said(3, 142, 11079)){} [ 2B47
[ patch restoregame to use the patch
#message 143 "\xE9\x8B\x8F"
if (said(3, 143, 10439)){} [ 28C7
[ patch restartgame to use the patch
#message 144 "\x62\xE8\x06\x92"
if (said(4, 144, 10011)){} [ 271B
[ patch StateReload to use the patch
#message 145 "\xE8\x49\x4E"
if (said(3, 145, 27617)){} [ 6BE1
[ pass interpreter version during reset
#message 146 "\xE8\x7B\x92"
if (said(3, 146, 10037)){} [ 2735
[ change call to DrawCursor in restart.game command to CheckMouse
#message 147 "\xE8\x52\x7D"
if (said(3, 147, 10107)){} [ 277B
[ patch GetGameNumber to call the mouse handler
#message 148 "\x3C\x0D\x74\xAE\x3C\x1B\x74\xF2\xE9\x4D\x2B\x90"
if (said(12, 148, 36457)){} [ 8E69
[ skip the joystick button check
#message 149 "\x8B\x04\xE9\xBF" [ \x00
if (said(5, 149, 36362)){} [ 8E0A
[ skip the computer/monitor/sound variable reset
#message 150 "\xEB\x27"
if (said(2, 150, 10467)){} [ 28E3
[******************************************************************************


[******************************************************************************
[
[ ERASE CURSOR BUG FIX
[ 
[ There are several locations in AGI code where the cursor needs to be erased,
[ but due to a bug, a blank character with the current background color is 
[ drawn. There is also a bug in the get.string command that misplaces the 
[ cursor when the command is done. This patch fixes these bugs.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: none
[
[ PATCH CODE:
            [ HideCursor
#message 151 "\x50\x33\xC0\xA3\xC3\x0D\x58\xC3"
            [ FixCursorPos
            "\x4A\xB4\x02\xCD\x10\xE8\x5C\x80\xC3"
if (said(17, 151, 47684)){} [ BA44
[ change EraseCursor calls to HideCursor calls in InputRedraw
#message 152 "\xE8\xCB\x7E"
if (said(3, 152, 15222)){} [ 3B76
[ and StateReload
#message 153 "\xE8\x01\x4D"
if (said(3, 153, 27968)){} [ 6D40
[ and graphics command
#message 154 "\xE8\x06\x40"
if (said(3, 154, 31291)){} [ 7A3B
[ and prevent.input command
#message 155 "\xE8\x2A\x7F"
if (said(3, 155, 15127)){} [ 3B17
[ and status command
#message 156 "\xE8\x1E\x85"
if (said(3, 156, 13603)){} [ 3523
[ patch get.string command to fix cursor pos on return
#message 157 "\xE8\x0F\xAB"
if (said(3, 157, 3898)){} [ 0F3A
[******************************************************************************


[******************************************************************************
[
[ MAIN CYCLE TIMING TURBO MODE & TIMER FUNCTIONS
[
[ AGI uses a custom timing interrupt to manage the internal game clock that 
[ controls sound timing as well as the main interpreter loop timing. The timer
[ interrupt runs 60 times a second (which is why sound resources use a 'tick' 
[ length of 1/60 sec). The main loop timer uses three of the main timer ticks
[ for each game cycle (which is why animation intervals are measured in 1/20  
[ sec ticks). This patch changes the game timer to fire at the same frequency 
[ as the main timer (60 times per second). The patch also adds a delay function
[ that can be used to create accurate delay times during logic execution, and 
[ a countdown timer function to easily add highly accurate timer features.
[
[ SYNTAX:
[   [ to change game loop base interval (20 cps/60 cps)
[   cycle.time(o255, vMODE*);
[
[   [ to set a delay time
[   cycle.time(o254, vDELAY**);
[
[   [ to create a countdown timer
[   block(-29, vMINUTES***, vSECONDS***, fDONE***);
[
[   [ to stop/restart a timer
[   block(-30, STATE, ANY****, ANY****);
[
[    * set value of vMODE to 1 to set game cycle speed to 'turbo' mode;
[      set value of vMODE to 0 to restore normal game cycle speed
[
[   ** value of vDELAY is number of milliseconds to delay before processing  
[      the next command
[
[  *** The compiler expects numbers for all arguments so pass variables and 
[      flags as numbers, without the 'v' or 'f' prefix
[
[ **** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: The turbo mode runs game cycles three times 
[ faster than normal. So if animationInterval (v10) is 1 in normal mode, 
[ setting it to 3 in turbo mode will give the same game speed. 
[
[ With the faster cycle time, you can have much finer control over animation 
[ and movement timing. See the Power Pack Demo game for a demonstration of 
[ this.
[
[ To create a delay time, set vDELAY to the desired number of milliseconds. 
[ (For delays longer than 255 ms, use multiple calls to the delay function.)  
[ This function is very accurate, within a few microseconds on most PCs 
[ (including DOSBox). Besides being more accurate, it is much simpler to 
[ program in AGI; one command can now take the place of complicated loop  
[ structures that try to create delays by counting down variables or comparing
[ time against the game clock.
[
[ Use the block command, with -28 for the first argument to start a countdown
[ timer. The variables, vMINUTES and vSECONDS should be set to the desired
[ countdown value. Once the countdown starts, these variables will be updated 
[ in real time by the main timer interrupt. Once the timer hits zero, fDONE 
[ will be set to TRUE. If you alter the input variables after the countodwn 
[ starts, the timer will continue the countdown with the newly revised values.
[
[ To pause a running timer, use the block command with -29 as the first 
[ argument. If STATE = 0, the timer is paused. If STATE = 1 (or any other 
[ value) a paused timer will restart.
[
[ PATCH CODE:
#message 158 "\x81\xF9\xD5\x2A\x74\x33\x81\xF9\xAA\x2A\x74\x03\xE9\x93\xB5\x2A"
            "\xE4\x8B\xD8\x8A\x47\x09\x3C\x01\x72\x3F\x50\x3C\x41\x76\x02\xB0"
            "\x41\xB9\xE8\x03\xF7\xE1\x8B\xCA\x8B\xD0\xB4\x86\x32\xC0\xCD\x15"
            "\x58\x3C\x41\x76\x24\x2C\x41\xEB\xDD\x2A\xE4\x8B\xD8\x8A\x47\x09"
            "\x3C\x01\x74\x02\xB0\x03\xA2\x35\x1C\x2E\xA2\x49\x88\x2C\x04\xF6"
            "\xD8\xB4\x14\xF6\xE4\x2E\xA2\x35\x82\x8B\xC6\x8B\xE5\x5D\x5F\x5E"
            "\xC3"
            [ TimerPatch
            "\x80\x3E\x38\x04\x01\x73\x52\x80\x3E\x46\x1C\x01\x72\x4B\xFE\x06"
            "\x47\x1C\x80\x3E\x47\x1C\x3C\x72\x40\x53\x32\xFF\x8A\x1E\x48\x1C"
            "\xFE\x4F\x09\x80\x7F\x09\x01\x73\x1A\x8A\x1E\x49\x1C\x80\x7F\x09"
            "\x01\x73\x21\x88\x3E\x46\x1C\xA0\x4A\x1C\x51\xE8\x2E\xBD\x59\x32"
            "\xFF\xEB\x11\x80\x7F\x09\xFF\x75\x0B\x80\x6F\x09\xC4\x8A\x1E\x49"
            "\x1C\xFE\x4F\x09\x88\x3E\x47\x1C\x5B\x1F\x58\xCF\x90"
            [ StartTimer
            "\xAC\x32\xFF\x8A\xD8\x8A\x4F\x09\xA2\x49\x1C\xAC\x8A\xD8\x8A\x6F"
            "\x09\xA2\x48\x1C\xAC\x83\xF9\x01\x73\x05\xE8\xF2\xBC\xEB\x0F\xA2"
            "\x4A\x1C\xC6\x06\x46\x1C\x01\x88\x3E\x47\x1C\xE8\xE7\xBC\x8B\xC6"
            "\x5D\x5F\x5E\xC3"
            [ ToggleTimer
            "\xAC\x3C\x01\x72\x02\xB0\x01\xA2\x46\x1C\xAD\x8B\xC6\x5D\x5F\x5E"
            "\xC3"
if (said(259, 158, 47701)){} [ BA55
[ modify cycle.time to use the patch
#message 159 "\xE9\x5E\x4A"
if (said(3, 159, 28660)){} [ 6FF4
[ change timer reset to zero it out
#message 160 "\x33\xC0\xA3\xBD\x15"
if (said(5, 160, 33336)){} [ 8238
[ patch timer interrupt to check for countdown timer
#message 161 "\xE9\x64\x32"
if (said(3, 161, 34895)){} [ 884F
[ clear timer fields
[ use null message (m254)
if (said(1, NULLMSG, 7238, 0)){} [ DS:1C46
if (said(1, NULLMSG, 7239, 0)){} [ DS:1C47
[******************************************************************************


[******************************************************************************
[
[ TRACE FUNCTION ENHANCEMENTS
[
[ AGI's trace mode let's you step through logic commands, but the display is 
[ rudimentary, and there are no debugging options while trace mode is active.
[ This patch significantly enhances the the trace mode, including:
[
[ - changes the trace mode toggle key from ScrollLock to CTRL+BACKSPACE
[ - enables text input, ego direction changes and controller activations
[ - view and change variable and flag values while trace window is active
[ - 'return', 'goto' and 'if' statements are displayed as commands
[ - test commands include 'not' (!), 'or' (||) and 'and' (&&) symbols
[ - the result column shows correct value if the test is 'not'ed
[ - false results are displayed in red
[ - arguments include prefixes ('v', 'f', 'm', etc)
[ - said commands use default word text instead of numbers
[ - commands/arguments that extend past right margin are word-wrapped
[ - the window left and width properties can be set
[
[ SYNTAX:
[   [ to change trace window left/width
[   trace.info(0, LEFT, WIDTH);
[
[ LIMITATIONS/CONSIDERATIONS: This patch changes the key press to toggle the 
[ trace mode from the ScrollLock button to CTRL+BACKSPACE, since many modern 
[ keyboards no longer include the ScrollLock button. 
[ 
[ When the trace window is active, you can press the INSERT key to temporarily
[ enable input. Press INSERT again to return to normal trace mode. When this 
[ feature is activated, key presses are put on the input line (if it is 
[ active). If the key press is a controller, then the controller is activated. 
[ Ego direction keys are also processed (unless ego is in program control 
[ mode). Each time you enable input, reserved flag f2 (haveInput) is reset in 
[ order to allow subsequent said commands to match. You do have to press the
[ ENTER key to have AGI parse the input and set f2 to TRUE. If you activate
[ the input mode again, it will reset f2 again, so your previously entered 
[ input will now be ignored. (TIP: if you are going to do multiple inputs 
[ (controllers and ego direction), do those before entering text input.)
[
[ You can also view flags and variables while tracing by pressing CTRL+F and 
[ CTRL+V. After entering the flag/variable number, the value is then displayed.
[ You can edit the value, pressing ENTER to save the new value. Pressing ENTER
[ without editing the value (or pressing ESCAPE) will leave the value 
[ unchanged. For flags, a value of 'T' or 't' or any non-zero number will set 
[ the flag, all other values will reset the flag.
[
[ Pressing CTRL+O will allow you to view screen object parameters (the same as 
[ the obj.status.v command). 
[
[ Making the trace window too small will crowd the display. The 80 column mode
[ works best for tracing, because you can move the window to keep areas of 
[ interest uncovered.
[
[ Just as with print.at settings, don't use a LEFT value less than 2 or a 
[ WIDTH value that results in a right margin (LEFT + WIDTH - 1) greater than 
[ 37 (or 77 in 80 column mode), or the trace window will not draw correctly. 
[
[ This patch also fixes a bug in the trace function that corrupts the running 
[ logic if a trace.on command is encountered while trace function is active.
[
[ PATCH CODE:
            [ LogicExecPatch1
#message 162 "\x83\x3E\x53\x1B\x01\x75\x14\x3C\xFE\x73\x04\x84\xC0\x75\x0C\x50"
            "\x32\xE4\x56\x50\xE8\xA0\xCB\x83\xC4\x04\x58\x84\xC0\x0F\x84\xC8"
            "\x66\xE9\xB1\x66"
            [ TraceAddPatch1
            "\x8B\x3E\xE6\x07\x89\x7E\xFE\x8A\x45\x02\x2A\xE4\x50\x8B\xD8\xB8"
            "\x58\x1C\x80\xFB\x0A\x72\x07\x40\x80\xFB\x64\x72\x01\x40\x50\xE8"
            "\x88\x60\x83\xC4\x04\x83\x7E\x10\xFF\x74\x44\x80\x3E\x4B\x1C\xFF"
            "\x74\x18\x80\x3E\x4D\x1C\x01\x74\x05\xB8\x5E\x1C\xEB\x03\xB8\x63"
            "\x1C\x50\xE8\x65\x60\x83\xC4\x02\xEB\x15\x32\xC0\xA2\x4B\x1C\xA1"
            "\x59\x1B\x04\x07\x50\xFF\x36\x5B\x1B\xE8\x09\x68\x83\xC4\x04\x80"
            "\x3E\x4C\x1C\x01\x75\x09\xB0\x21\x50\xE8\xEC\x66\x83\xC4\x02\x80"
            "\x7E\x08\xFE\x72\x15\x74\x0D\xB0\xFF\xA2\x4B\x1C\xA2\x4C\x1C\xB8"
            "\x4E\x1C\xEB\x03\xB8\x52\x1C\xE9\x08\xCC\xA1\xE6\x07\xE9\xB3\xCB"
            [ TraceAddPatch2
            "\xFF\x76\x0A\x80\x7E\x08\xFE\x0F\x82\x17\xCC\x74\x02\xEB\x19\x8B"
            "\x7E\x0C\x8B\x05\x50\xB8\x44\x1B\x50\xE8\xFE\x5F\x83\xC4\x04\xB0"
            "\x29\x50\xE8\xA3\x66\x83\xC4\x02\xE9\xFA\xCB"
            [ TraceAddPatch3
            "\x2A\xE4\xB0\x3A\x50\xE8\x95\x66\x83\xC4\x02\x8A\x46\x10\x80\x3E"
            "\x4C\x1C\x01\x75\x02\x34\x01\x3C\x01\x74\x10\x6A\x0F\x6A\x04\xE8"
            "\xD8\xB4\x83\xC4\x04\xB0\x46\x2A\xE4\xEB\x02\xB0\x54\x50\xE8\x6C"
            "\x66\x83\xC4\x02\xC3"
            [ TraceAddPatch4
            "\x80\x7E\x08\xFF\x0F\x84\x22\xCC\x83\x7E\x10\xFF\xE9\xBD\xCB"
            [ TraceAddPatch5
            "\x80\x3E\x4B\x1C\xFF\x74\x04\xE8\x68\xCD\xC3\x8A\x36\x5B\x1B\x8A"
            "\x16\x59\x1B\x32\xFF\xB4\x02\xCD\x10\xC3"
            [ LogicExecPatch2
            "\x89\x1E\x4C\x1C\xE9\xBD\x43"
            [ TraceInfoPatch
            "\x3C\x01\x72\x06\xA3\x55\x1B\xE9\x15\xCA\xAC\xA2\x59\x1B\x8A\xD8"
            "\xAC\x02\xC3\x48\xA2\x5D\x1B\xE9\x29\xCA"
            [ AddArgPrefix
            "\xE8\xF7\xCC\x83\x3E\x51\x1B\x01\x74\x4D\x50\x8B\xF5\x8B\x1C\x8B"
            "\x47\x08\xB4\x07\xF6\xE4\x80\x7F\x0E\x01\x72\x05\xBB\x1E\xCF\xEB"
            "\x03\xBB\x24\xCA\x03\xD8\x03\x5E\xF8\x2E\x8A\x07\x3C\x01\x74\x07"
            "\x50\xE8\xEA\x65\x83\xC4\x02\x58\xE9\x01\xCC"
            [ Check4Scroll
            "\x3A\x16\x5D\x1B\x7C\x15\xE8\xF3\xCC\xE8\x1A\x67\xE8\xF6\x66\xFE"
            "\xC2\x8A\xC6\x52\x50\xE8\xD8\x66\x83\xC4\x04\xC3"
            [ FindSaidWords
            "\x8B\x36\xB2\x0A\x83\xC6\x35\x8B\xCE\x8B\xD1\x3B\x36\xD6\x07\x73"
            "\xD0\xF6\x04\x80\x75\x03\x46\xEB\xF2\x8A\x7C\x01\x8A\x5C\x02\x39"
            "\xD8\x74\x12\x83\xC6\x03\x8B\xCE\xFF\xC1\x83\x3C\x01\x73\xDC\x8B"
            "\xD6\xFF\xC2\xEB\xD6\x83\xEC\x28\x8D\x7E\xCA\x8B\xF2\xAC\x24\x7F"
            "\x34\x7F\x88\x05\xFF\xC7\xF6\x44\xFF\x80\x74\xF1\x83\xC6\x03\x39"
            "\xCE\x77\x0C\x8D\x7E\xCA\x33\xD2\x8A\x54\xFF\x01\xD7\xEB\xDE\x33"
            "\xC0\x88\x05\x8D\x7E\xCA\x57\x32\xFF\xB4\x03\xCD\x10\xE8\x91\x88"
            "\x02\xD0\x80\xC2\x01\xE8\x6C\xFF\xE8\x9E\x5E\x83\xC4\x2E\xE9\x75"
            "\xCB"
            [ ArgLineFeed
            "\x83\xC4\x02\x80\xC2\x05\xE8\x5A\xFF\xE9\x49\xCB"
            [ GetInput
            "\x55\x8B\xEC\x6A\x0F\x6A\x02\xE8\x8D\xB3\x83\xC4\x04\xE8\x43\xCC"
            "\xFF\x76\x04\xE8\x76\x5E\x83\xC4\x02\x33\xC0\x8A\x46\x08\xA2\x88"
            "\x09\x8A\x46\x0A\x50\xFF\x76\x06\xE8\x1A\x48\x83\xC4\x04\x88\x26"
            "\x88\x09\x3C\x0D\x74\x05\xB8\xFF\xFF\xEB\x0B\xFF\x76\x06\xE8\x27"
            "\x89\x83\xC4\x02\x2A\xE4\x8B\xE5\x5D\xC3"
            [ prompt offsets
            "\x82\x13\x8D\x13\x94\x13"
            [ CheckIt
            "\x55\x8B\xEC\x83\xEC\x0F\xBE\x84\xC0\x2E\x89\x36\x42\x5E\xE8\x71"
            "\xF2\xD1\xE0\x8B\xF0\x05\xBA\xC7\x8B\xD8\x6A\x04\x6A\x01\x33\xC0"
            "\x89\x46\xFC\x8D\x46\xFC\x50\x2E\xFF\x37\xE8\x83\xFF\x83\xC4\x08"
            "\x3D\xFF\xFF\x74\x50\x81\xC6\xFC\xC7\x2E\xFF\x24\x04\xC8\x49\xC8"
            "\xA3\xC8\x8B\xD8\x89\x46\xF1\x8A\x47\x09\x50\x68\x44\x1B\x8D\x46"
            "\xFC\x50\xE8\xCB\x5D\x83\xC4\x06\x6A\x04\x6A\x01\x8D\x46\xFC\x50"
            "\xFF\x76\xF1\x68\x9D\x13\x8D\x46\xF3\x50\xE8\xB3\x5D\x83\xC4\x06"
            "\x8D\x46\xF3\x50\xE8\x39\xFF\x83\xC4\x08\x8B\x5E\xF1\x3D\xFF\xFF"
            "\x74\x55\x88\x47\x09\xEB\x50\x89\x46\xF1\xE8\xE7\xAF\x3C\x01\x74"
            "\x04\xB0\x46\xEB\x02\xB0\x54\x32\xE4\x89\x46\xFC\x6A\x02\x33\xC0"
            "\x50\x8D\x46\xFC\x50\xFF\x76\xF1\x68\xA5\x13\x8D\x46\xF3\x50\xE8"
            "\x6E\x5D\x83\xC4\x06\x8D\x46\xF3\x50\xE8\xF4\xFE\x83\xC4\x08\x3D"
            "\xFF\xFF\x74\x56\x3C\x01\x73\x11\x8A\x46\xFC\x0C\x20\x3C\x74\x74"
            "\x08\x8B\x46\xF1\xE8\x8F\xAF\xEB\x41\x8B\x46\xF1\xE8\x81\xAF\xEB"
            "\x39\x8B\x1E\xD6\x07\x3A\x47\xFF\x76\x0F\xE8\x16\xCB\xB8\xAD\x13"
            "\x50\xE8\x48\x5D\x83\xC4\x02\xEB\x21\xFF\x36\x08\x01\xA2\x08\x01"
            "\xC6\x06\x4F\x1B\xFF\x68\x4F\x1B\xE8\x1C\xAD\x83\xC4\x02\x8F\x06"
            "\x08\x01\x33\xC0\xA3\x53\x1B\xE8\x16\xC7\xE8\xE6\xCA\xB8\x79\x1C"
            "\x50\xE8\x18\x5D\x83\xC4\x02\xBE\xEB\xC8\x2E\x89\x36\x42\x5E\xC6"
            "\x06\xC3\x0D\x01\x8B\xE5\x5D\xC3"
            [ TraceInput
            "\x8B\x45\x02\x80\xFC\x52\x74\x1F\x3C\x16\x74\x0B\x3C\x06\x74\x0F"
            "\x3C\x0F\x74\x0F\xE9\x52\xC9\xB0\x01\xE8\xAC\xFE\xE9\x23\xC9\xB0"
            "\x02\xEB\xF6\xB0\x03\xEB\xF2\x50\xB0\x02\xE8\x01\xAF\x58\x6A\x0F"
            "\x6A\x01\xE8\xDA\xB1\x83\xC4\x04\xE8\x90\xCA\xB8\x71\x1C\x50\xE8"
            "\xC2\x5C\x83\xC4\x02\xE8\x02\x7E\x83\x3E\x53\x1B\x01\x72\xC5\x50"
            "\xE8\x64\x7E\x83\xC4\x02\x8B\xF0\x0B\xC0\x74\xE9\x8B\x04\x3C\x01"
            "\x74\x0A\x3C\x02\x74\x6A\x3C\x03\x74\x64\xEB\xD9\x8B\x44\x02\xB3"
            "\x1C\x32\xFF\x88\x07\x83\x3E\xF3\x03\x01\x72\x33\xE8\x76\x64\xE8"
            "\x5B\xB3\xFF\x74\x02\xE8\xDF\x6F\x83\xC4\x02\xE8\x46\x64\xE8\x12"
            "\xB3\xFF\x36\x59\x1B\xFF\x36\x5B\x1B\xE8\x23\x64\x83\xC4\x04\x6A"
            "\x0F\x6A\x01\xE8\x69\xB1\x83\xC4\x04\x80\x7C\x02\x0D\x74\x08\x80"
            "\x7C\x03\x52\x74\x07\xEB\x8E\xB0\x04\xE8\x72\xAE\xE8\x0C\xCA\xB8"
            "\x79\x1C\x50\xE8\x3E\x5C\x83\xC4\x02\x33\xC0\xE9\x74\xC8\xEB\x41"
            "\x83\x3E\x39\x01\x01\x72\xDE\x8B\x1E\xD0\x07\x8A\x47\x21\x2A\xE4"
            "\x8B\xF8\x8B\x44\x02\x3B\xC7\x75\x04\x2B\xC0\xEB\x03\x8B\x44\x02"
            "\x88\x47\x21\xB3\x0F\x32\xFF\x88\x07\x50\xE8\xCE\xC9\xB8\x8A\x1C"
            "\x50\xE8" [ \x00
#message 163 "\x5C\x83\xC4\x04\x8B\x3E\xD0\x07\x88\x45\x22\xE9\x34"
            "\xFF\x8B\x7C\x02\xC6\x85\x40\x10\x01\xE8\xAF\xC9\x57\xB8\x96\x1C"
            "\x50\xE8\xE0\x5B\x83\xC4\x04\xE9\x1B\xFF"
if (said(1268, 162, 50480)){} [ C530
[ change enable/disable trace keystroke to CTRL+BACKSPACE
#message 164 "\xEB\x28\x3D\x7F\x0E\x74\x06\x84\xC0\x74\x33\xEB\x2F\x83\x3E\x53"
            "\x1B\x01\x74\x05\xE8\xD1\x31\xEB\x17\xE8\x97\x32\xEB\x12"
if (said(30, 164, 24074)){} [ 5E0A
#message 165 "\xEB\xC8"
if (said(2, 165, 24130)){} [ 5E42
[ modify traceon to check for input key
#message 166 "\xE9\x97\x36"
if (said(3, 166, 37472)){} [ 9260
[ modify LogicExecute to add if and goto statements
#message 167 "\xE9\x2C\x99"
if (said(3, 167, 11265)){} [ 2C01
[ modify TraceAdd to check for 'if', 'goto'
#message 168 "\xE9\xC0\x33"
if (said(3, 168, 37265)){} [ 9191
#message 169 "\xE9\xDE\x33"
if (said(3, 169, 37379)){} [ 9203
#message 170 "\xE9\x35\x34"
if (said(3, 170, 37388)){} [ 920C
#message 171 "\xE8\xDC\x34"
if (said(3, 171, 37236)){} [ 9174
[ save 'not' status in LogicEval
#message 172 "\xE8\x24\x9A"
if (said(3, 172, 11334)){} [ 2C46
[ modify TraceAdd to show false result in red
#message 173 "\xE8\xE9\x33\xEB\x14"
if (said(5, 173, 37411)){} [ 9223
[ check for arguments that extend past right edge
#message 174 "\xE9\x74\x34"
if (said(5, 174, 37615)){} [ 92EF
[ modify main line printing to skip logic number
#message 175 "\x90"
if (said(1, 175, 37313)){} [ 91C1
if (said(1, 175, 37359)){} [ 91EF
#message 176 "\x04"
if (said(1, 176, 37323)){} [ 91CB
if (said(1, 176, 37369)){} [ 91F9
#message 177 "\x2E"
if (said(1, 177, 37315)){} [ 91C3
#message 178 "\x35"
if (said(1, 178, 37361)){} [ 91F1
[ modify window placement to use custom placement parameters
#message 179 "\x2B\x06\xFD\x03\x8B\xF8\x47\xA1\x5D\x1B\x40\x2B\x06\x59\x1B\x8A"
            "\xE0\x90\x90"
if (said(19, 179, 36906)){} [ 902A
#message 180 "\xA0\x59\x1B\xD1\xE0\xD1\xE0\x04\xFB\x86\xC4\x04\x0A\x8A\xE8\x32"
            "\xC0\x0B\xC7\xA3\x5F\x1B\xA1\x4D\x1B\xB1\x03\xD3\xE0\x04\x0A\x86"
            "\xC4\x8A\xC5\x90"
if (said(36, 180, 36932)){} [ 9044
[ modify TraceInfo to allow setting left/width of trace window
#message 181 "\xE9\xE1\x35"
if (said(3, 181, 37008)){} [ 9090
[ modify TraceArgPrint to add prefixes
#message 182 "\xE9\xC4\x33"
if (said(3, 182, 37575)){} [ 92C7
[ fix bug in trace.on, if it is called while tracing is active
[ use null message (m254)
if (said(1, NULLMSG, 36838)){} [ 8FE6
[ adjust right margin for result character, to be closer to edge
if (said(1, FF_MSG, 37398)){} [ 9216
[ strings used by new trace functions
#message 183 "\x02\x02\x02\x69\x66\x20" [ \x00
#message 184 "\x67\x6F\x74\x6F\x28" [ \x00
#message 185 "\x20\x20\x25\x64\x3A" [ \x00
#message 186 "\x20\x26\x26\x20" [ \x00
#message 187 "\x20\xB3\xB3\x20" [ \x00
if (said(29, 183, 7243, 0)){} [ DS:1C4B
[ strings used by trace input mode
#message 188 "<input>"
if (said(8, 188, 7281, 0)){} [ DS:1C71
#message 189 "<resume tracing>"
if (said(17, 189, 7289, 0)){} [ DS:1C79
#message 190 "ego dir: %d"
if (said(12, 190, 7306, 0)){} [ DS:1C8A
#message 191 "controller: c%d"
if (said(16, 191, 7318, 0)){} [ DS:1C96
#message 192 "variable: "
if (said(11, 192, 4994, 0)){} [ DS:1382
#message 193 "flag: "
if (said(7, 193, 5005, 0)){} [ DS:138D
#message 194 "object: "
if (said(9, 194, 5012, 0)){} [ DS:1394
#message 195 "  v%d: "
if (said(8, 195, 5021, 0)){} [ DS:139D
#message 196 "  f%d: "
if (said(8, 196, 5029, 0)){} [ DS:13A5
#message 197 "invalid object number"
if (said(22, 197, 5037, 0)){} [ DS:13AD
[ Action command argument prefixes
#message 198 "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x76\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x66\x01\x01\x01\x01\x01\x01\x66\x01\x01\x01\x01\x01\x01"
            "\x66\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x76\x76\x01\x01\x01\x01\x6F\x76\x76\x01\x01\x01\x01"
            "\x6F\x76\x76\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x6F\x76\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x66\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x66\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x66\x01\x01"
            "\x6F\x76\x76\x76\x66\x01\x01\x6F\x01\x66\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x69\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x69\x01\x01\x01\x01\x01\x01\x69\x76\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x76\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x66\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01"
            "\x76\x76\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x6D\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x73\x6D\x01\x01\x01\x01\x01\x73\x6D\x01\x01\x01\x01\x01"
            "\x73\x77\x01\x01\x01\x01\x01\x73\x01\x01\x01\x01\x01\x01"
            "\x6D\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x63\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x76\x76\x76\x76\x76\x76"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01\x01\x01"
            "\x6D\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x76\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x6D\x01\x01\x01\x01\x01\x01\x6D\x63\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x63\x01\x01\x01\x01\x01\x01"
            "\x63\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x73\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
[ Test command argument prefixes
            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"
            "\x76\x76\x01\x01\x01\x01\x01\x66\x01\x01\x01\x01\x01\x01"
            "\x76\x01\x01\x01\x01\x01\x01\x69\x01\x01\x01\x01\x01\x01"
            "\x69\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x63\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
            "\x01\x01\x01\x01\x01\x01\x01\x73\x73\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"
            "\x6F\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"
if (said(1414, 198, 51748)){} [ CA24
[******************************************************************************


[******************************************************************************
[
[ GET INPUT LINE
[ 
[ This patch modifies the get.string command to allow retrieval of the current 
[ input line, as well as the most recently entered input.
[
[ SYNTAX:
[   [ to get current input line
[   get.string(sA, mANY*, -1, ANY*, ANY*);
[
[   [ to get previous input line
[   get.string(sA, mANY*, -2, ANY*, ANY*);
[
[   * These arguments are ignored, so they can be any value
[
[ LIMITATIONS/CONSIDERATIONS: String sA is replaced with the current or 
[ previous input line. If sA is not valid (i.e.greater than the maximum 
[ allowed string value), the command is ignored.
[
[ The current input line means everything the player has currently typed for 
[ input, exactly as it is, no cleaning up like what parsing does. The previous 
[ input line means what was on the input line the last time the player pressed 
[ ENTER (also as-is, no clean up).
[
[ PATCH CODE:
#message 199 "\x8B\x76\x08\x80\x7C\x02\xFE\x73\x03\xE9\xE8\x3E\xB8\xC5\x0D\x75"
            "\x03\xB8\xEF\x0D\x50\x8A\x04\x83\xC6\x05\x3C\x0B\x77\x0B\xB4\x28"
            "\xF6\xEC\x05\x0D\x02\x50\xE8\x2E\x80\xE9\x67\x3F"
if (said(44, 199, 53162)){} [ CFAA
#message 200 "\xE9\x0C\xC1"
if (said(3, 200, 3739)){} [ 0E9B
[******************************************************************************


[******************************************************************************
[ 
[ STRING FUNCTIONS
[
[ Strings aren't very useful in AGI because there are no commands that let you
[ manipulate them. This patch provides 16 basic string functions.
[
[ SYNTAX*:
[   [ strLen
[   block(-4, sINPUT, vRESULT, ANY**); 
[
[   [ strCopy
[   block(-5, sFROM, sTO, ANY**);
[
[   [ strConcat
[   block(-6, sINPUT, sADD, ANY**);
[
[   [ sLeft
[   block(-7, sINPUT, sRESULT, vLEN);
[
[   [ sRight
[   block(-8, sINPUT, sRESULT, vLEN);
[
[   [ sMid
[   block(-9, sINPUT, vPOS, vLEN);
[
[   [ strTrim
[   block(-10, sINPUT, sRESULT, vMODE);
[
[   [ sInstr
[   block(-11, sINPUT, vCHAR, vPOS);
[
[   [ sFormat
[   block(-12, sINPUT, sRESULT, ANY**);
[
[   [ str2byte
[   block(-13, sINPUT, vRESULT, ANY**);
[
[   [ hex2byte
[   block(-14, sINPUT, vRESULT, ANY**);
[
[   [ byte2Hex
[   block(-15, sRESULT, vINPUT, ANY**); 
[
[   [ strUpper
[   block(-16, sINPUT, sRESULT, ANY**);
[
[   [ strLower
[   block(-17, sINPUT, sRESULT, ANY**);
[
[   [ Byte2Char
[   block(-18, sRESULT, vCHAR, ANY**); 
[
[   [ Char2Byte
[   block(-19, vRESULT, sIN, ANY**); 
[
[   [ set.string.v
[   block(-20, vSTR, vMSG, ANY**);
[
[    * The compiler expects numbers for all arguments so pass strings and 
[      variables as numbers, without the 's' or 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: These functions all use the block command. To
[ access them, use the correct function identifier for the first argument.
[ If you pass an invalid string value to any of these functions, the function 
[ will exit without making any changes.
[
[ Details on usage of each function are provided below:
[
[   strLen - The length of sINPUT is returned in variable vRESULT.
[
[   strCopy - sINPUT is copied to sRESULT. No change is made to sINPUT.
[
[   strConCat - sADD is added to the end of sINPUT. sADD is not affected.  
[   sADD can be the same as sINPUT, in which case sINPUT will be doubled 
[   up.
[
[   strLeft - n characters (where n = value of vLEN) are copied from the
[   left of sINPUT into sRESULT. If vLEN is greater than the length of
[   sINPUT all of sINPUT is copied.
[
[   strRight - n characters (where n = value of vLEN) are copied from the 
[   right of sINPUT into sRESULT. If vLEN is greater than the length of 
[   sINPUT all of sINPUT is copied.
[
[   strMid - **This function modifies sINPUT, instead of putting the
[   result in a different string.**
[   n characters (where n = value of vLEN) are copied from sINPUT,
[   starting at character p (where p = value of vPOS). Position values 
[   are zero-based (meaning first character is 0, last character is
[   length-1). If vPOS is >= length of sINPUT, a null string is returned.
[   
[   strTrim - sINPUT is copied to sRESULT, with leading and/or trailing 
[   spaces removed. Pass mode by variable. Four modes are supported:
[   mode = 0: full trim, both right and left
[   mode = 1: only leading spaces are removed (ltrim)
[   mode = 2: only trailing spaces are removed (rtrim)
[   mode = 3: the string is 'cleaned' using the same function AGI uses 
[             when parsing the input line (see WinAGI Help file for
[             details on how input is 'cleaned')
[
[  strInstr - Starting at character p (where p = value of vPOS) variable
[  vPOS is set to the position of the next instance of character c
[  (where c = value of vCHAR) in sINPUT. Position values are zero-based 
[  (meaning first character is 0, last character is length-1). If the
[  character is not found, the returned value is 255. If vPOS is >=
[  length of sINPUT, the returned value is 255. 
[
[  strFormat - sINPUT is formatted and then copied to sRESULT. Formatting 
[  means print format codes (%v, %s, %m, etc) are replaced with their 
[  respective values. sRESULT can be the same as sINPUT.
[
[  str2byte: sINPUT is converted to a numerical value, and returned in 
[  vRESULT. Numerical digits are processed until the end of the string is 
[  reached, or a non-numerical character is encountered. If the value is 
[  greater than 255, the result is value MOD 256.
[
[  hex2byte: the first two bytes of sINPUT are converted from hexadecimal
[  to a numerical value; the result is stored in vRESULT. If any characters
[  in sINPUT are not valid hex numbers (0-9, a-f or A-F), they are treated
[  as zeros. 
[
[  byte2hex: vINPUT is converted to a two-digit hex string and stored in
[  sRESULT.
[
[  strUpper: sINPUT is copied to sRESULT and then converted to upper case.
[  sRESULT can be the same as sINPUT.
[
[  strLower: sINPUT is copied to sRESULT and then converted to lower case.
[  sRESULT can be the same as sINPUT.
[ 
[  byte2char: sRESULT is set to the ascii character of vCHAR.
[
[  char2byte: vRESULT is set to the ascii value of the first character in sIN
[
[  set.string.v: message mB is assigned to string sA, where B is the value 
[  of vMSG and A is the value of vSTR.
[
[ This patch also fixes a bug that limits the number of strings that can be
[ parsed. Now all strings can be parsed.
[
[ PATCH CODE:
            [ FunctionHandler
#message 201 "\x80\xFB\x28\x0F\x84\xC1\x02\xAC\x56\x3C\x0C\x73\x2F\xB4\x28\xF6"
            "\xE4\x05\x0D\x02\x80\xEB\x08\x2E\xFF\xA7\xF2\xCF\x19\xD0\x2C\xD0"
            "\x2C\xD0\x50\xD0\x71\xD0\xA2\xD0\xD8\xD0\x45\xD1\x8A\xD1\xCA\xD1"
            "\xDD\xD1\xF0\xD1\x44\xD2\x62\xD2\x80\xD2\x8F\xD2\x58\x40\x40\x5D"
            "\x5F\x5E\xC3"
            [ strLen
            "\x50\xE8\xC9\x7F\x83\xC4\x02\x8A\xC8\xAC\x8A\xD8\x32\xFF\x88\x4F"
            "\x09\xEB\xE6"
            [ strCopyConcat
            "\x8B\xF8\xAC\x3C\x0C\x73\xDF\xB4\x28\xF6\xE4\x05\x0D\x02\x80\xFB"
            "\x04\x74\x07\x57\x50\xE8\xBD\x7F\xEB\x05\x50\x57\xE8\x29\x80\x83"
            "\xC4\x04\xEB\xC2"
            [ strLeft
            "\x8B\xF8\xAD\x8A\xDC\x32\xFF\x8A\x5F\x09\x43\x53\x3C\x0C\x73\xB2"
            "\xB4\x28\xF6\xE4\x05\x0D\x02\x57\x50\xE8\xC9\x7F\x83\xC4\x06\xEB"
            "\xA1"
            [ strRight
            "\x8B\xF8\xAD\x8A\xDC\x32\xFF\x8A\x4F\x09\x3C\x0C\x73\x93\xB4\x28"
            "\xF6\xE4\x05\x0D\x02\x8B\xF0\x57\xE8\x5A\x7F\x83\xC4\x02\x3A\xC1"
            "\x76\x04\x2A\xC1\x03\xF8\x57\x56\xE8\x65\x7F\x83\xC4\x04\xE9\x70"
            "\xFF"
            [ strMid
            "\x8B\xF8\xAD\x8B\xF7\x8A\xD8\x8A\x4F\x09\x8A\xDC\x8A\x6F\x09\x57"
            "\xE8\x31\x7F\x83\xC4\x02\x3A\xC1\x76\x15\x8A\xC1\x03\xF8\x8A\xCD"
            "\x32\xED\x41\x51\x57\x56\xE8\x6A\x7F\x83\xC4\x06\xE9\x41\xFF\x33"
            "\xC0\x88\x05\xE9\x3A\xFF"
            [ strTrim
            "\x8B\xF8\xAC\x3C\x0C\x73\xF6\xB4\x28\xF6\xE4\x05\x0D\x02\x50\xAC"
            "\x5E\x8A\xD8\x8A\x57\x09\x80\xFA\x03\x73\x3E\x80\xFA\x01\x77\x0D"
            "\x80\x3D\x20\x75\x08\x80\x3D\x01\x72\x03\x47\xEB\xF3\x57\x56\xE8"
            "\xF7\x7E\x83\xC4\x04\x8B\xF8\x80\xFA\x01\x74\xC1\x80\x3C\x01\x72"
            "\xBC\x46\x80\x3C\x01\x73\xFA\x4E\x3B\xF7\x72\x05\x80\x3C\x20\x74"
            "\xF6\x46\x32\xC0\x88\x04\xE9\xE1\xFE\x57\xE8\xF0\x4A\x83\xC4\x02"
            "\x68\xB4\x0A\x56\xE8\xC2\x7E\x83\xC4\x04\xE9\xCD\xFE"
            [ strInstr
            "\x8B\xF8\xAD\x8B\xF7\x50\x8A\xD8\x8A\x6F\x09\x8A\xDC\x80\xFD\x01"
            "\x72\x26\x8A\x4F\x09\x57\xE8\x88\x7E\x83\xC4\x02\x3A\xC1\x76\x18"
            "\x33\xC0\x8A\xC5\x32\xED\x03\xF9\x50\x57\xE8\x20\x81\x83\xC4\x04"
            "\x3C\x01\x72\x04\x2B\xC6\xEB\x02\xB0\xFF\x5B\x8A\xDF\x32\xFF\x88"
            "\x47\x09\xE9\x88\xFE"
            [ strFormat
            "\x8B\xF8\xAC\x3C\x0C\x73\x36\xB4\x28\xF6\xE4\x05\x0D\x02\x81\xEC"
            "\x01\x01\x8B\xF0\x8D\x86\xFD\xFE\x50\x57\xC6\x06\x20\x0B\xFF\xC6"
            "\x06\x1E\x0B\x01\xE8\x57\x50\x83\xC4\x04\x8B\xF8\x33\xC0\x88\x05"
            "\x8D\x86\xFD\xFE\x50\x56\xE8\x3E\x7E\x81\xC4\x05\x01\xE9\x48\xFE"
            [ Str2Byte
            "\x50\xE8\x0C\x7F\x83\xC4\x02\x8A\xC8\xAC\x8A\xD8\x32\xFF\x88\x4F"
            "\x09\xEB\xEA"
            [ Hex2Byte
            "\x8B\xF8\x8B\x05\xE8\xBB\xCC\x8A\xC8\xAC\x8A\xD8\x32\xFF\x88\x4F"
            "\x09\xEB\xD7"
            [ Byte2Hex
            "\x8B\xF8\xAC\x32\xE4\x8B\xD8\x8A\x47\x09\x50\xE8\xA8\x7F\x83\xC4"
            "\x02\x6A\x02\x50\xE8\x4C\x7F\x83\xC4\x04\x50\x57\xE8\xF2\x7D\x83"
            "\xC4\x04\xEB\xB3"
            [ ToUpper
            "\x56\x80\x3C\x01\x72\x10\x80\x3C\x61\x72\x08\x80\x3C\x7A\x77\x03"
            "\x80\x2C\x20\x46\xEB\xEB\x5E\xC3"
            [ ToLower
            "\x56\x80\x3C\x01\x72\x10\x80\x3C\x41\x72\x08\x80\x3C\x5A\x77\x03"
            "\x80\x04\x20\x46\xEB\xEB\x5E\xC3"
            [ strUpper
            "\x8B\xF8\xAC\x3C\x0C\x73\x14\xB4\x28\xF6\xE4\x05\x0D\x02\x57\x50"
            "\xE8\xAA\x7D\x83\xC4\x04\x8B\xF0\xE8\xB5\xFF\xE9\xB0\xFD"
            [ strLower
            "\x8B\xF8\xAC\x3C\x0C\x73\x14\xB4\x28\xF6\xE4\x05\x0D\x02\x57\x50"
            "\xE8\x8C\x7D\x83\xC4\x04\x8B\xF0\xE8\xAF\xFF\xE9\x92\xFD"
            [ Byte2Char
            "\x8B\xF8\xAC\x32\xE4\x8B\xD8\x8A\x47\x09\x89\x05\xE9\x83\xFD"
            [ Char2Byte
            "\x8B\xF8\xAC\x32\xE4\x8B\xD8\x8A\x05\x88\x47\x09\xE9\x74\xFD"
            [ set.string.v
            "\xAD\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x46\x8A\xDC\x56\x3C"
            "\x0C\x73\x1A\xB4\x28\xF6\xE4\x05\x0D\x02\x8B\xF8\x8B\xC3\x50\xE8"
            "\x9E\x51\x83\xC4\x02\x50\x57\xE8\x39\x7D\x83\xC4\x04\x58\x5D\x5F"
            "\x5E\xC3"
if (said(762, 201, 53206)){} [ CFD6
[ ConcatPatch
#message 202 "\x56\x80\x3C\x01\x72\x03\x46\xEB\xF8\x8B\xC6\x8B\xCF\xF7\xD9\x80"
            "\x3D\x01\x72\x03\x47\xEB\xF8\x03\xCF\x41\x8B\x76\x0A\x8B\xF8\xF3"
            "\xA4\x32\xC0\x88\x45\xFF\x58\x90"
if (said(40, 202, 20610)){} [ 5082
[ Dec2hex function uses upper case in this version; lower case is desired
#message 203 "\x61\x62\x63\x64\x65\x66"
if (said(6, 203, 4222, 0)){} [ DS:107E
[******************************************************************************


[******************************************************************************
[ 
[ PALETTE FUNCTIONS
[
[ This patch creates custom functions that allow you to change the display 
[ color palette. It also includes functions that will fade the screen to/from 
[ fully black or fully white that are useful for creating transitions when 
[ changing rooms.
[
[ SYNTAX: 
[   [ to change the palette
[   block(-21, FN_MODE, PALETTE, LOADONLY);
[
[   [ to fade screen in from blank 
[   block(-22, FN_MODE, DELAY, COLOR); 
[
[   [ to fade screen out to blank
[   block(-23, FN_MODE, DELAY, COLOR);
[
[ LIMITATIONS/CONSIDERATIONS: To change the current display palette, use the 
[ block command with -19 as the first argument. PALETTE is a message that 
[ contains hexadecimal values of the new colors. Format characters (%s, %v, 
[ %m, etc) are allowed. The formatted string must be exactly 96 characters, 
[ representing 48 two-digit hex values - three hex values (in the form of 
[ RRGGBB) for each of the sixteen colors. Do not use spaces or any other 
[ characters. If non-hex characters are passed, they will be treated as zeros. 
[ Passing a string that is not exactly 96 characters long will be ignored (the 
[ function will not change the palette). 
[
[ The LOADONLY argument should normally be set to 0. If you want to change 
[ palettes between fade actions (fade out with one palette, then fade in with 
[ a different palette), you can use a value of 1 for LOADONLY to load the 
[ palette without forcing an immediate change.
[
[ The fade commands do not change the stored palette information. They will 
[ use the current palette settings, and gradually darken the screen to black 
[ (if COLOR is 0) or gradually brighten the screen to full white (if COLOR is 
[ 1). The function uses 64 steps to go from normal to fully faded. You can 
[ control the speed of the fade by passing a non-zero value for DELAY. Each 
[ step is paused by DELAY milliseconds. Passing a value of zero for DELAY will
[ immediately blank the screen to the desired color, with no delay.
[
[ Take care when using fade functions. You should make sure that for each fade 
[ out command, there is a matching fade in command to restore the screen. 
[
[ By default, arguments are passed as numbers. If you want to pass them by 
[ variable, use a numeric value of 1 for FN_MODE; the other two arguments in 
[ all commands will then be passed by variable.
[
[ The Power Pack Demo game contains many examples and more detailed 
[ explanations on how the palette functions work.
[
[ PATCH CODE:
            [ SetDAC
#message 204 "\x50\x51\x52\x53\x8D\x96\x40\xFF\xB8\x12\x10\x33\xDB\x8B\xCB\xB1"
            "\x40\xCD\x10\x5B\x5A\x59\x58\xC3"
            [ CopyPaletteData
            "\xB0\xC0\x50\x8D\x96\x40\xFF\x52\x1E\x68\x76\xD4\x0E\xE8\x82\x8B"
            "\x83\xC4\x0A\xC3"
            [ LoadPalette
            "\x32\xE4\x50\xE8\x5C\x51\x83\xC4\x02\x8B\xF0\x8D\xBE\x10\xFF\x57"
            "\x56\xC6\x06\x20\x0B\xFF\xC6\x06\x1E\x0B\x01\xE8\xEE\x4E\x8B\xF8"
            "\x32\xC0\x88\x05\x5E\xE8\xC2\x7C\x5F\x3C\x60\x74\x03\x33\xF6\xC3"
            "\x8B\xF7\x8B\xDF\x33\xC9\xB1\x30\xAD\xE8\x67\xCB\xAA\xE2\xF9\x8D"
            "\x96\x40\xFF\x32\xE4\xB0\x18\x50\x8B\xC3\x8B\xF8\x33\xDB\x50\x1E"
            "\x52\x1E\xE8\x29\x8B\x83\xC4\x04\x83\xC2\x18\x52\x1E\xE8\x1E\x8B"
            "\x83\xC4\x08\x8B\xC7\x83\xC0\x18\x83\xC2\x18\x43\x80\xFB\x02\x75"
            "\xDD\x83\xC4\x02\x6A\x60\x8B\xC2\x83\xE8\x60\x50\x1E\x52\x1E\xE8"
            "\xFC\x8A\x83\xC4\x0A\xE8\x64\xFF\xC3"
            [ SetPalette
            "\xAC\x3C\x01\xAD\x72\x0A\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09"
            "\x81\xC4\x10\xFF\x56\x3C\x01\x72\x12\x50\xE8\x5A\xFF\x58\x83\xFE"
            "\x01\x72\x08\x80\xFC\x01\x73\x03\xE8\x20\xFF\x58\x8B\xE5\x5D\x5F"
            "\x5E\xC3"
            [ FadePalette
            "\x3C\x2C\x74\x04\xB5\x01\xEB\x02\x32\xED\xAC\x3C\x01\xAD\x72\x0A"
            "\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x81\xC4\x10\xFF\x56\x8A"
            "\xCC\x8A\xF8\x80\xFD\x01\x72\x0E\x3C\x01\x73\x06\x32\xD2\xB7\x05"
            "\xEB\x10\xB2\x3F\xEB\x0C\x3C\x01\x73\x06\xB2\x3F\xB7\x05\xEB\x02"
            "\x32\xD2\xB6\x3F\x32\xDB\x8D\xBE\x40\xFF\xBE\x76\xD4\x2E\x8A\x04"
            "\x24\x3F\x46\x80\xF9\x01\x72\x0E\xF6\xD8\x04\x3F\xF6\xE2\xF6\xF6"
            "\xF6\xD8\x04\x3F\xEB\x04\xF6\xE2\xF6\xF6\xAA\x43\x80\xFB\xC0\x75"
            "\xDC\xE8\xA5\xFE\xE8\xB8\xCA\x80\xFD\x01\x72\x08\x4A\x80\xFA\xFF"
            "\x75\xC2\xEB\x06\x42\x80\xFA\x40\x75\xBA\x58\x8B\xE5\x5D\x5F\x5E"
            "\xC3"
            [ RestorePalette
            "\x50\x53\x51\x52\x06\x0E\x07\xBA\x76\xD4\x33\xC9\xB1\x40\x33\xDB"
            "\xB8\x12\x10\xCD\x10\x07\x5A\x59\x5B\x58\xC3"
            [ SavePalette
            "\x06\x0E\x07\xBA\x76\xD4\x33\xDB\x8B\xCB\xB1\x40\xB8\x17\x10\xCD"
            "\x10\x07\xC3"
            [ default palette data
            "\x80\x80\x80\x80\x80\x2A\x80\x2A\x80\x80\x2A\x2A\x2A\x80\x80\x2A"
            "\x80\x2A\x2A\x15\x80\x2A\x2A\x2A\x80\x80\x80\x80\x80\x2A\x80\x2A"
            "\x80\x80\x2A\x2A\x2A\x80\x80\x2A\x80\x2A\x2A\x15\x80\x2A\x2A\x2A"
            "\x15\x15\x15\x15\x15\x3F\x80\x3F\x15\x15\x3F\x3F\x3F\x15\x15\x3F"
            "\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F\x15\x15\x15\x15\x15\x3F\x80\x3F"
            "\x15\x15\x3F\x3F\x3F\x15\x15\x3F\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F"
            "\x80\x80\x80\x80\x80\x2A\x80\x2A\x80\x80\x2A\x2A\x2A\x80\x80\x2A"
            "\x80\x2A\x2A\x15\x80\x2A\x2A\x2A\x80\x80\x80\x80\x80\x2A\x80\x2A"
            "\x80\x80\x2A\x2A\x2A\x80\x80\x2A\x80\x2A\x2A\x15\x80\x2A\x2A\x2A"
            "\x15\x15\x15\x15\x15\x3F\x80\x3F\x15\x15\x3F\x3F\x3F\x15\x15\x3F"
            "\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F\x15\x15\x15\x15\x15\x3F\x80\x3F"
            "\x15\x15\x3F\x3F\x3F\x15\x15\x3F\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F"
if (said(614, 204, 53968)){} [ D2D0
[******************************************************************************


[******************************************************************************
[
[ SETMESSAGE FUNCTION
[
[ This function allows you to change the text of a message, setting it to a
[ string value. It also modifies the MenuInput function to update menu text
[ when the assigned messages changes.
[
[ SYNTAX:
[   block(-24, FN_MODE, MSGOLD*, STRNEW*);
[
[    * The compiler expects numbers for all arguments so pass messages, strings
[      and variables as numbers, without the 'm', 's' or 'v' prefix
[
[ LIMITATIONS/CONSIDERATIONS: Changing message values is an advanced technique
[ that should only be done with extreme care. It is critical that the new value
[ assigned to a message (string STRNEW) is not longer than the original message
[ (MSGOLD) text, or it will over-write the message that follows.
[
[ You should always reference modified messages by the message number in code,
[ not the text string. Otherwise your compiled code will still think the 
[ message is its original value, not the updated value. This can lead to 
[ unexpected results. The Power Pack demo game includes detailed examples and 
[ explanations on how to manage message changes.
[
[ By default, MSGOLD and STRNEW are passed as numbers, i.e. 'm1', 's2'. To pass
[ by variable, use a numeric value of 1 for FN_MODE; the other two arguments 
[ will then be passed by variable.
[
[ One of the primary benefits of changing messages is the ability to create 
[ dynamic menus. The menu input function is also modified by this patch so 
[ that any changes to menu messages will be updated the next time the menu is
[ displayed. See the Power Pack demo game for detailed examples of using
[ dynamic menus.
[
[ PATCH CODE:
#message 205 "\xAC\x3C\x01\xAD\x72\x0A\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09"
            "\x8B\xC8\x06\x8A\xC4\x3C\x0C\x73\x3A\xB4\x28\xF6\xE4\x05\x0D\x02"
            "\x50\x8A\xC1\x32\xE4\x8B\x1E\xE6\x07\x90\x80\x7F\x02\x01\x72\x14"
            "\x8B\x5F\x08\xD1\xE0\x8B\xCB\x03\xD8\xA1\x8F\x09\x50\x07\x26\x03"
            "\x0F\x51\xEB\x08\x50\xE8\xE0\x4E\x83\xC4\x02\x50\xE8\x7C\x7A\x83"
            "\xC4\x04\x07\x8B\xC6\x8B\xE5\x5D\x5F\x5E\xC3"
            [ DrawMenuPatch
            "\xE8\x3A\x58\x33\xC0\x40\xA3\x69\x1B\x8B\x3E\x71\x1B\xA1\x69\x1B"
            "\x88\x45\x08\x8B\xC8\x8B\x75\x0C\xFF\x74\x04\xE8\x37\x7A\x83\xC4"
            "\x02\x03\xC1\xB2\x27\x83\x3E\x07\x14\x01\x75\x03\x80\xC2\x28\x3A"
            "\xC2\x72\x06\x2B\xC1\x2A\xD0\x8A\xCA\x89\x4C\x08\x8B\x34\x3B\x75"
            "\x0C\x75\xF6\xFF\x75\x04\xE8\x0C\x7A\x83\xC4\x02\x3C\x01\x73\x07"
            "\x33\xC9\x88\x4D\x0A\xEB\x09\xC6\x45\x0A\x01\x40\x01\x06\x69\x1B"
            "\x8B\x3D\xA1\x71\x1B\x3B\xC7\x75\xA4\xE9\x3C\xC1"
if (said(199, 205, 54582)){} [ D536
[ modify MenuInput to use patch
#message 206 "\xE9\x58\x3E"
if (said(3, 206, 38710)){} [ 9736
[ patch stringcopy function to work across different segments
#message 207 "\x56\x57\x55\x8B\xEC\x8B\x7E\x08\x8B\x76\x0A\x57\xEB\x01\xA4\x80"
            "\x3C\x01\x73\xFA\xA4\x58\x5D\x5F\x5E\xC3"
if (said(26, 207, 20481)){} [ 5001
[******************************************************************************


[******************************************************************************
[
[ SETITEM FUNCTION
[
[ This function allows you to change the text of an inventory item, setting it 
[ to a string value.
[
[ SYNTAX:
[   block(-25, FN_MODE, ITEM*, STRNEW*);
[
[    * The compiler expects numbers for all arguments so pass messages, strings
[      and variables as numbers, without the 'i', 's' or 'v' prefix
[
[ LIMITATIONS/CONSIDERATIONS: Changing item text values is an advanced
[ technique that should only be done with extreme care. It is critical that 
[ the new text (STRNEW) assigned to an item (ITEM) is not longer than its 
[ original text, or it will overwrite the item that follows. STRNEW can 
[ contain format codes allowing you greater flexibility in managing item 
[ names. The Power Pack Demo includes detailed examples and explanations on 
[ how to manage item changes.
[
[ By default, ITEM and STRNEW are passed as numbers, i.e. 'i1', 's2'. To pass 
[ by variable, use a numeric value of 1 for FN_MODE; the other two arguments 
[ will then be passed by variable.
[
[ PATCH CODE:
#message 208 "\xAC\x3C\x01\xAD\x72\x0A\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09"
            "\x50\xB4\x03\xF6\xE4\x03\x06\xD6\x07\x8B\xD8\x8B\x07\x03\x06\xD6"
            "\x07\x8B\xC8\x5B\x8A\xC7\x3C\x0C\x73\x2F\xB4\x28\xF6\xE4\x05\x0D"
            "\x02\x83\xEC\x7F\x51\x8D\x7E\x81\x57\x50\xC6\x06\x20\x0B\xFF\xC6"
            "\x06\x1E\x0B\x01\xE8\xC4\x4B\x8B\xF8\x32\xC0\x88\x05\x83\xC4\x04"
            "\x59\x54\x51\xE8\xAE\x79\x83\xC4\x04\x8B\xC6\x8B\xE5\x5D\x5F\x5E"
            "\xC3"
if (said(97, 208, 54781)){} [ D5FD
[******************************************************************************


[******************************************************************************
[
[ ITEMCOUNT FUNCTION
[
[ This function returns the number of inventory items that are currently marked
[ as being in a given location in a variable.
[
[ SYNTAX:
[   block(-26, vLOCATION*, vRESULT*, ANY**);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: If the value of vLOCATION is zero, this function
[ returns the total number of inventory objects in the OBJECT file. If the 
[ value of vLOCATION is 255, it will return the count of items currently in the
[ player's inventory. Any other value will return the number of items that
[ are currently assigned to that room. 
[
[ PATCH CODE:
#message 209 "\xAD\x46\x33\xDB\x8A\xD8\x8A\x47\x09\x8B\xD0\x8B\x1E\xD6\x07\x33"
            "\xC9\x80\xFA\x01\x72\x07\x3A\x57\x02\x74\x02\xEB\x01\x41\x43\x43"
            "\x43\x3B\x1E\xD8\x07\x72\xEA\x33\xDB\x8A\xDE\x88\x4F\x09\x8B\xC6"
            "\x8B\xE5\x5D\x5F\x5E\xC3"
if (said(54, 209, 54878)){} [ D65E
[******************************************************************************


[******************************************************************************
[
[ PICDRAW FUNCTION
[
[ This function adds the ability to send picture draw commands to the current 
[ picture. The fill function can be changed to use current pixel color as the 
[ target color instead of the default white/red for visual/priority. You can 
[ also clear the entire screen to single visual/priority color value with a
[ single command.
[
[ SYNTAX:
[   to insert picture draw commands:
[   block(-27, FILLSTYLE, sCMDS*, **ANY);
[
[   to clear entire screen:
[   block(-27, -1, vCOLORPAIR*, ANY**);
[
[    * The compiler expects numbers for all arguments so pass the strings and  
[      variables as numbers without the 's'  or 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: The picture-draw function is basically the same 
[ as the overlay.pic function, except you can pass draw commands in a string 
[ instead of a picture resource. Draw commands are passed as a string of 
[ two-digit hex values. The string can include formatting codes, but the 
[ resulting formatted string must not exceed 126 characters. Use multiple 
[ calls if longer drawing operations are needed.
[ 
[ You must include an end of drawing command (hex value FF). 
[
[ If FILLSTYLE is 0, fill operations work as normal, filling only pixels that 
[ are white on the visual screen or red on the priority screen. If FILLSTYLE is
[ one, then fill operations will use colors at the starting fill pixel as the 
[ target color. This lets you fill over areas that are not the default colors 
[ of white/red.
[
[ To clear the screen to a blank visual/priority color, use a value of -1 
[ (255) for FILLSTYLE. The command-string argument is replaced with a variable
[ that contains the desired priority/visual color combination. The upper nibble
[ (highest four bits) are the priority screen color and the lower nibble 
[ (lowest four bits) are the visual screen color.  Mathematically:
[      COLORPAIR = 16 * PRICOLOR + VISCOLOR.
[
[ The Power Pack Demo game includes some detailed examples of how to use the
[ picdraw function to manipulate pictures.
[
[ PATCH CODE:
            [ JmpOverlay
#message 210 "\x56\x57\x55\x8B\xEC\xE9\x28\x77"
            [ DrawPicPatch
            "\xAD\x46\x56\x3C\xFF\x74\x04\x8A\xCC\xEB\x19\x33\xDB\x8A\xDC\x8A"
            "\x67\x09\x8A\xC4\x50\xE8\x18\x97\x58\xE8\xD2\x7D\xE8\x4B\x97\xE8"
            "\xB1\x80\xEB\x5B\xA2\x89\x09\x80\xF9\x0C\x73\x53\xFF\x36\x3E\x10"
            "\x8B\xC1\xB4\x28\xF6\xE4\x05\x0D\x02\x83\xEC\x7F\x8D\x7E\x81\x57"
            "\x50\xC6\x06\x20\x0B\xFF\xC6\x06\x1E\x0B\x01\xE8\x1E\x4B\x8B\xF8"
            "\x32\xC0\x88\x05\x83\xC4\x02\xE8\xF0\x78\x5F\x8B\xF7\xD1\xE8\x8B"
            "\xC8\xAD\xE8\x9E\xC7\xAA\xE2\xF9\x8D\x46\x81\xE8\x8A\xFF\x83\xC4"
            "\x7F\x8F\x06\x3E\x10\x83\x3E\x3E\x10\x01\x75\x03\xE8\x54\x80\x32"
            "\xC0\xA2\x89\x09\x58\x5D\x5F\x5E\xC3"
            [ GetBkgdCol
            "\x80\x3E\x89\x09\x01\x72\x05\x26\x8A\x0D\xEB\x02\xB1\x4F\x8A\xD9"
            "\x8A\xE9\x81\xE1\x0F\xF0\xC3"
if (said(168, 210, 54932)){} [ D694
[ modify SBuffPicFill to use the patch
#message 211 "\xE8\xB1\x81\xF6\xC7\x0F\x74\x0A\xB2\x0F\x38\x0E\xA3\x11\x74\x10"
            "\xEB\x11\xF6\xC7\xF0\x74\x09\xB2\xF0\x38\x2E\xA4\x11\x75\x04\x90"
if (said(32, 211, 21873)){} [ 5571
[ clear the fillstyle flag
[ use null message (m254)
if (said(1, NULLMSG, 2441, 0)){} [ DS:0989
[******************************************************************************


[******************************************************************************
[
[ GETPIXEL FUNCTION
[
[ This function returns the current pixel data for a point on the graphics 
[ screen.
[
[ SYNTAX:
[   block(-28, vX*, vY*, vRESULT);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[ LIMITATIONS/CONSIDERATIONS: The visual and priority values for the screen
[ pixel located at (x,y) on the graphics screen is returned in vRESULT. The
[ visual color is in the lower nibble, and priority value is in the upper 
[ nibble. If either coordinate value is invalid returned results are 
[ meaningless. This function is most often used with the mouse to determine the
[ screen color under the mouse pointer.
[
[ To easily extract either value, use the following math operations:
[    priority = vRESULT / 16;
[    tmp = vRESULT * 16;
[    visual = tmp / 16;
[
[ PATCH CODE:
#message 212 "\xAD\x33\xDB\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x86\xC4\xE8"
            "\x3E\x81\xAC\x33\xDB\x8A\xD8\x06\x8E\x06\xA7\x11\x26\x8A\x05\x88"
            "\x47\x09\x07\x8B\xC6\x5D\x5F\x5E\xC3"
if (said(41, 212, 55100)){} [ D73C
[******************************************************************************


[******************************************************************************
[ 
[ BIT-MATH FUNCTIONS
[
[ This patch adds a set of bitwise functions that can be used to make it  
[ easier to manipulate variables.
[
[ SYNTAX:
[   [ BIT_AND
[   block(-31, FN_MODE, vNUM*, AMOUNT); 
[
[   [ BIT_OR
[   block(-32, FN_MODE, vNUM*, AMOUNT);
[
[   [ BIT_XOR
[   block(-33, FN_MODE, vNUM*, AMOUNT);
[
[   [ BIT_NOT
[   block(-34, ANY**, vNUM*, ANY**);
[
[   [ BIT_SHL
[   block(-35, FN_MODE, vNUM*, AMOUNT);
[
[   [ BIT_SHR
[   block(-36, FN_MODE, vNUM*, AMOUNT);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: The value passed as AMOUNT is bit-operated into
[ variable vNUM. If the FN_MODE argument is non-zero, then AMOUNT is treated as
[ a variable, and its value is used in the bit-operations on vNUM.
[
[ PATCH CODE:
            [ FunctionHandler
#message 213 "\xAC\x8B\xD0\x8B\xCB\xAD\x80\xFA\x01\x72\x05\x8A\xDC\x8A\x67\x09"
            "\x8B\xD9\x80\xEB\x3E\x2E\xFF\xA7\x7F\xD7\x91\xD7\x98\xD7\x9F\xD7"
            "\xA6\xD7\xB2\xD7\xBB\xD7\x8B\xC6\x5D\x5F\x5E\xC3"
            [ bitand
            "\x8A\xD8\x20\x67\x09\xEB\xF3"
            [ bitor
            "\x8A\xD8\x08\x67\x09\xEB\xEC"
            [ bitxor
            "\x8A\xD8\x30\x67\x09\xEB\xE5"
            [ bitnot
            "\x8A\xD8\x8A\x47\x09\xF6\xD0\x88\x47\x09\xEB\xD9"
            [ bitshl
            "\x8A\xD8\x8A\xCC\xD2\x67\x09\xEB\xD0"
            [ bitshr
            "\x8A\xD8\x8A\xCC\xD2\x6F\x09\xEB\xC7"
if (said(95, 213, 55141)){} [ D765
[******************************************************************************


[******************************************************************************
[ 
[ GET CURRENT DATE/TIME
[
[ Three functions that allow you to get the current system date, time and day 
[ of the week.
[
[ SYNTAX:
[   [ GETDATE
[   block(-37, vYEAR*, vMONTH*, vDAY); 
[
[   [ GETTIME
[   block(-38, vHOUR*, vMINUTE*, vSECOND*);
[
[   [ GETDAYOFWEEK
[   block(-39, vDAYOFWEEK*, ANY** ANY**);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: The designated date/time elements are returned 
[ in the variables passed to the functions. 
[
[ The Year value is passed as an offset from 2000, i.e. if return value is 
[ '22', it means year is '2022'. The MSDOS date function will only go up to 
[ year 2099; if your game is played beyond that, well then, congratulations to 
[ you I guess.
[
[ Hour is returned in 24 hour format. For example, if return value for Hour is 
[ '13', it means 1 PM. 
[
[ DayOfWeek is zero based, with zero meaning Sunday.
[
[ PATCH CODE:
            [ FunctionHandler
#message 214 "\xAC\x50\xAD\x50\x50\x80\xEB\x4A\x2E\xFF\xA7\xD1\xD7\xEE\xD7\x17"
            "\xD8\x40\xD8\x8B\xC6\x5D\x5F\x5E\xC3"
            [ BCD2Hex
            "\x8A\xD8\x80\xE3\x0F\x24\xF0\xC0\xE8\x04\xB7\x0A\xF6\xE7\x02\xC3"
            "\xC3"
            [ getdate
            "\xB4\x04\xCD\x1A\x8A\xC2\xE8\xE6\xFF\x5B\x8A\xDF\x32\xFF\x88\x47"
            "\x09\x8A\xC6\xE8\xD9\xFF\x5B\x32\xFF\x88\x47\x09\x8A\xC1\xE8\xCE"
            "\xFF\x5B\x32\xFF\x88\x47\x09\xEB\xC0"
            [ gettime
            "\xB4\x02\xCD\x1A\x8A\xC6\xE8\xBD\xFF\x5B\x8A\xDF\x32\xFF\x88\x47"
            "\x09\x8A\xC1\xE8\xB0\xFF\x5B\x32\xFF\x88\x47\x09\x8A\xC5\xE8\xA5"
            "\xFF\x5B\x32\xFF\x88\x47\x09\xEB\x97"
            [ getdow
            "\xB4\x2A\xCD\x21\x83\xC4\x04\x5B\x32\xFF\x88\x47\x09\xEB\x88"
if (said(139, 214, 55236)){} [ D7C4
[******************************************************************************


[******************************************************************************
[ 
[ READ/WRITE TO DATA FILE
[
[ A set of functions that allow you to read and write string data to a data
[ file in your game directory. 
[
[ SYNTAX:
[   [ NEWFILE
[   block(-40, sFILENAME*, vSTART*, vEND*); 
[
[   [ SAVESTRING
[   block(-41, sFILENAME*, vINDEX*, vSTROUT*);
[
[   [ READSTRING
[   block(-42, sFILENAME*, vINDEX*, vSTRIN*);
[
[   [ DELETEFILE
[   block(-43, sFILENAME*, ANY**, ANY**);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 's' or 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: Only string data can be saved/restored with 
[ these functions. To create a new data file, use the NEWFILE function. The  
[ filename must be a valid MSDOS (i.e. 8.3 format) filename. The file will be 
[ created in the game directory, unless you also include a directory in 
[ sFILENAME. If the file does not exist, NEWFILE will create it. If the file 
[ already exists, it will be overwritten by the NEWFILE command.
[
[ The range of strings saved to the file are determined by value of vSTART and 
[ vEND. If the END value is less than the START value, no file is created.
[
[ The full allocated space for each string is saved to the file (40 bytes per 
[ string). So the file size is always 40 times the number of strings saved.
[
[ You can update an existing data file with new data using the SAVESTRING 
[ function. Only one string at a time can be written to the file, and its 
[ position in the file is determined by the value of vINDEX. For example, if 
[ index is zero, the first forty bytes of the file will be replaced with the 
[ bytes from the string indicated by the value of vSTROUT. Index values are
[ zero based (first 40 bytes for index 0, second 40 bytes for index 1, etc.)
[
[ If the value of vINDEX is larger than the current size of the file, MSDOS 
[ will automatically expand the file. For example, if the file is 80 bytes 
[ (room for two strings), and index is 4, the file will expand to 200 bytes 
[ and the added string will be the last 40 bytes.
[
[ String data can be read from the file by passing the desired index value and 
[ a destination string value to the READSTRING function. 
[
[ Data files (or any file for that matter) can be deleted using the DELETEFILE
[ function. Be extremely careful though not to delete files by accident. Wild  
[ card characters ('*' and '?'), are not supported.
[
[ For all functions, if there are any file errors (for example, a bad 
[ filename, or trying to write to a read-only file), the operation fails, and 
[ the value of reserved variable v18 (errorParameter) is set to -1 (255). v18 
[ is set to zero if the function succeeds. This allows you to confirm file 
[ operations and take alternate actions if results are not as expected.
[
[ For detailed examples of how to use these file functions, see the AGI Power
[ Pack Demo game.
[
[ PATCH CODE:
            [ FunctionHandler
#message 215 "\xAC\x50\xAD\x50\x80\xEB\x50\x2E\xFF\xA7\x5B\xD8\x63\xD8\xD5\xD8"
            "\xD5\xD8\x6B\xD9"
            [ newfile
            "\x58\x32\xFF\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x5B\x56\x3A"
            "\xE0\x72\x5A\x50\xB0\x28\xF6\xE3\x05\x0D\x02\x33\xDB\x53\x50\xE8"
            "\xB6\x87\x83\xC4\x04\xB3\x12\x32\xFF\x88\x67\x09\x3D\xFF\xFF\x75"
            "\x03\x58\xEB\x39\x8B\xC8\x58\x2A\xE0\xFE\xC4\x8A\xFC\xB4\x28\xF6"
            "\xE4\x05\x0D\x02\x8B\xD0\x8A\xC7\xB4\x28\xF6\xE4\x50\x52\x51"
            [ writefile
            "\xE8\xEB\x87\x83\xC4\x06\x53\xB3\x12\x32\xFF\x3B\xC1\x74\x04\xB0"
            "\xFF\xEB\x02\x32\xC0\x88\x47\x09"
            [ closefile
            "\xE8\x13\x88\x83\xC4\x02\x58\x5D\x5F\x5E\xC3"
            [ openfile
            "\x8B\xFB\xC1\xEF\x02\x83\xF7\x01\x5B\x32\xFF\x8A\xD8\x8A\x47\x09"
            "\x8A\xDC\x8A\x67\x09\x5B\x56\x50\xB0\x28\xF6\xE3\x05\x0D\x02\x57"
            "\x50\xE8\x63\x87\x83\xC4\x04\xB3\x12\x32\xFF\x88\x67\x09\x3D\xFF"
            "\xFF\x75\x03\x58\xEB\xC5\x8B\xC8\x58\x33\xDB\x53\x8B\xF0\x32\xE4"
            "\xB3\x28\xF7\xE3\x52\x50\x51\xE8\xDA\x87\x83\xC4\x08\x8B\xD3\xB3"
            "\x12\x32\xFF\x3D\xFF\xFF\x75\x07\xB0\xFF\x88\x47\x09\xEB\x9C\x32"
            "\xC0\x88\x47\x09\x8B\xC6\x8A\xC4\xB4\x28\xF6\xE4\x05\x0D\x02\x6A"
            "\x28\x50\x52\x83\xFF\x01\x72\x03\xE9\x62\xFF"
            [ readfile
            "\xE8\x2A\x87\x83\xC4\x06\x53\xB3\x12\x32\xFF\x3B\xC1\x74\x04\xB0"
            "\xFF\xEB\x02\x32\xC0\x88\x47\x09\xE9\x5F\xFF"
            [ deletefile
            "\x5B\x5B\xB0\x28\xF6\xE3\x05\x0D\x02\x50\xE8\x4B\x87\x83\xC4\x02"
            "\xB3\x12\x32\xFF\x83\xF8\x01\x73\x04\xB0\xFF\xEB\x02\x32\xC0\x88"
            "\x47\x09\x8B\xC6\x5D\x5F\x5E\xC3"
if (said(324, 215, 55375)){} [ D84F
[******************************************************************************


[******************************************************************************
[ 
[ DETECT SHIFT KEY STATE
[
[ This patch allows you to determine the state of the SHIFT, CTRL and ALT keys
[ to give you greater control over keyboard events.
[
[ SYNTAX:
[   block(-44, vSTATE*, ANY**, ANY**); 
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 's' or 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: The value returned in vSTATE is a bitfield that 
[ contains the state of the SHIFT, ALT and CTRL keys. Bit zero is set when 
[ either SHIFT key is pressed, and clear when they are not. Bit one is set when
[ either CTRL key is pressed, and bit two is set when either ALT key is 
[ pressed. For example, if only the SHIFT key is pressed, vSTATE equals 1. If 
[ both the SHIFT and CTRL keys are pressed, vSTATE equals 3. vSTATE is zero if 
[ no key is pressed.
[ 
[ See the Power Pack Demo game for detailed examples of how to use this 
[ feature.
[
[ PATCH CODE:
            [ CheckShiftState
#message 216 "\xB4\x02\xCD\x16\xF6\xC0\x03\x74\x03\x80\xC8\x02\xD0\xE8\x80\xE0"
            "\x07\xA2\x8A\x09\xB4\x01\xCD\x16\xC3"
            [ GetShiftState
            "\xAC\x50\xAD\x58\x8A\xD8\xA0\x8A\x09\x88\x47\x09\x8B\xC6\x5D\x5F"
            "\x5E\xC3"
if (said(43, 216, 55699)){} [ D993
[ modify keyhandler to use the patch
#message 217 "\xE8\x5C\x7B\x90"
if (said(4, 217, 24116)){} [ 5E34
[******************************************************************************


[******************************************************************************
[ 
[ EXTENDED CHARACTER WORDS
[
[ This patch modifies AGI to allow use of extended characters in vocabulary
[ words, and also allows words to start with non-alphabet characters.
[
[ SYNTAX:  n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: This patch allows parsing of words that contain
[ extended characters. This improves support for languages other than English.
[ It also allows words to start with any character, not just 'a' to 'z'. 
[
[ Because of how AGI stores word text data, the patch also requires a special 
[ format in WORDS.TOK for words containing extended characters.
[
[ The format used is to treat character 0x7F as a 'marker'; when that character
[ is encountered, the patch will take the next character and add 128 to it,
[ generating the desired extended character. This means the words are still 
[ compatible with unmodified AGI engines, including modern programs such as 
[ ScummVM and NAGI. The words will just look a little strange and will never
[ match anything a player could type in, but the file will still be 100%
[ compatible with AGI.
[
[ If you are using WinAGI version 2.2.1 or greater, it will automatically do 
[ the formatting for you when you add words to WORDS.TOK.
[
[ The AGI Power Pack demo game uses this patch, and provides detailed 
[ information on how to work with extended character words.
[
[ This patch also fixes a minor coding flaw in AGI's word search function. The 
[ flaw has no impact because there's duplicate code in the function that masks 
[ the error. The function is supposed to return a null pointer when the 
[ starting letter changes (e.g. going from 'a' to 'b'), which should tell the 
[ interpreter that a word match is impossible. But the function checks the 
[ wrong location, so it will never return a null value. It doesn't cause a 
[ problem though, because there is a second check in the function that 
[ identifies the change in start letter and exits the function.
[
[ PATCH CODE:
            [ FindWordPatch
#message 218 "\x3C\x61\x72\x08\x3C\x7A\x77\x04\x83\xE8\x61\xC3\x2B\xC0\xC3"
            [ ParsePatch
            "\xA3\xDE\x0A\x50\xE8\xEF\x78\x83\xC4\x02\xC3"
            [ NextWordPatch
            "\x80\x7C\x03\x01\x73\x11\x8A\x44\x04\x24\x7F\x3C\x05\x72\x08\x3C"
            "\x1D\x77\x04\x2B\xC0\xEB\x03\x8D\x44\x03\x5D\x5F\x5E\xC3"
            [ ExtLCase
            "\x83\xFE\x7F\x77\x04\x83\xFE\x41\xC3\xA1\x8B\x09\xBB\x14\xDA\xB1"
            "\x0F\x32\xED\x43\x43\x2E\x3B\x07\xE0\xF9\x74\x22\xB1\x0E\xEB\x1E"
            "\xB5\x01\x5A\x03\xE1\x02\x07\x03\x52\x03\x54\x03\x57\x03\x59\x03"
            "\x5C\x03\x5D\x03\x5E\x03\x5F\x03\x61\x03\x62\x03\x65\x03\xF7\xD9"
            "\x83\xC1\x0E\xB0\x80\xF6\xE1\x05\x51\xDA\x8B\xF8\x03\xFE\x83\xEF"
            "\x7F\x4F\x2E\x8A\x05\x2A\xE4\x8B\xF0\xF9\xC3"
            [ CodePageData
            [ 437 - US Default)
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"
            "\x82\x91\x91\x93\x94\x95\x96\x97\x98\x94\x81\x9B\x9C\x9D\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 858 - 850 with Euro Sign
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"
            "\x82\x91\x91\x93\x94\x95\x96\x97\x98\x94\x81\x9B\x9C\x9B\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xA0\x83\x85\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC6\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD0\x88\x89\x8A\xD5\xA1\x8C\x8B\xD9\xDA\xDB\xDC\xDD\x8D\xDF"
            "\xA2\xE1\x93\x95\xE4\xE4\xE6\xE7\xE7\xA3\x96\x97\xEC\xEC\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 737 - Greek II
            "\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7"
            "\xA8\xAA\xAB\xAC\xAD\xAE\xAF\xE0\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xE1\xE2\xE3\xE5\xE6\xE7"
            "\xE9\xF1\xF2\xF3\xE4\xE8\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 775 - Baltic Rim
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8B\x8B\x8C\xA5\x84\x86"
            "\x82\x91\x91\x93\x94\x85\x96\x98\x98\x94\x81\x9B\x9C\x9B\x9E\x9F"
            "\x83\x8C\xA2\xA4\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\x88\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xD0\xD1\xD2\xD3\xB9\xBA\xBB\xBC\xD4\xD5\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xD6\xD7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xD8"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xA2\xE1\x93\xE7\xE4\xE4\xE6\xE7\xE9\xE9\xEB\xEB\xEC\x89\xEC\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 850 - MultiL. (Latin I)
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"
            "\x82\x91\x91\x93\x94\x95\x96\x97\x98\x94\x81\x9B\x9C\x9B\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xA0\x83\x85\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC6\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD0\x88\x89\x8A\xD5\xA1\x8C\x8B\xD9\xDA\xDB\xDC\xDD\x8D\xDF"
            "\xA2\xE1\x93\x95\xE4\xE4\xE6\xE7\xE7\xA3\x96\x97\xEC\xEC\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 852 - Slavic/E.Eur (LatinII)
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8B\x8B\x8C\xAB\x84\x86"
            "\x82\x92\x92\x93\x94\x96\x96\x98\x98\x94\x81\x9C\x9C\x88\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA5\xA5\xA7\xA7\xA9\xA9\xAA\xAB\x9F\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xA0\x83\xD8\xAD\xB9\xBA\xBB\xBC\xBE\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC7\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD0\xD4\x89\xD4\xE5\xA1\x8C\xD8\xD9\xDA\xDB\xDC\xEE\x85\xDF"
            "\xA2\xE1\x93\xE4\xE4\xE5\xE7\xE7\xEA\xA3\xEA\xFB\xEC\xEC\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFD\xFD\xFE\xFF"
            [ 855 - Cyrillic I
            "\x80\x80\x82\x82\x84\x84\x86\x86\x88\x88\x8A\x8A\x8C\x8C\x8E\x8E"
            "\x90\x90\x92\x92\x94\x94\x96\x96\x98\x98\x9A\x9A\x9C\x9C\x9E\x9E"
            "\xA0\xA0\xA2\xA2\xA4\xA4\xA6\xA6\xA8\xA8\xAA\xAA\xAC\xAC\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB5\xB7\xB7\xB9\xBA\xBB\xBC\xBD\xBD\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC6\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD0\xD2\xD2\xD4\xD4\xD6\xD6\xD8\xD9\xDA\xDB\xDC\xD8\xDE\xDF"
            "\xDE\xE1\xE1\xE3\xE3\xE5\xE5\xE7\xE7\xE9\xE9\xEB\xEB\xED\xED\xEF"
            "\xF0\xF1\xF1\xF3\xF3\xF5\xF5\xF7\xF7\xF9\xF9\xFB\xFB\xFD\xFE\xFF"
            [ 857 - Turkish
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"
            "\x82\x91\x91\x93\x94\x95\x96\x97\x69\x94\x81\x9B\x9C\x9B\x9F\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA7\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xA0\x83\x85\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC6\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\x88\x89\x8A\xD5\xA1\x8C\x8B\xD9\xDA\xDB\xDC\xDD\xEC\xDF"
            "\xA2\xE1\x93\x95\xE4\xE4\xE6\xE7\xE8\xA3\x96\x97\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 860 - Portuguese
            "\x87\x81\x82\x83\x84\x85\xA0\x87\x88\x88\x8A\xA1\x93\x8D\x84\x83"
            "\x82\x85\x8A\x93\x94\x95\xA3\x97\x8D\x94\x81\x9B\x9C\x97\x9E\xA2"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\x95\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 861 - Icelandic
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8C\x8C\x95\x84\x86"
            "\x82\x91\x91\x93\x94\x95\x96\x98\x98\x94\x81\x9B\x9C\x9B\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA0\xA1\xA2\xA3\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 862 - Hebrew
            "\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x8E\x8F"
            "\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9A\x9B\x9C\x9D\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 863 - Canadian-French
            "\x87\x81\x82\x83\x83\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x85\x8F"
            "\x82\x8A\x88\x93\x89\x8B\x96\x97\x98\x93\x81\x9B\x9C\x97\x96\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\x8C\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 865 - Nordic
            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"
            "\x82\x91\x91\x93\x94\x95\x96\x97\x98\x94\x81\x9B\x9C\x9B\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 866 - Russian (Cyrillic II)
            "\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xA0\xA1\xA2\xA3\xA4\xA5\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"
            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF1\xF1\xF3\xF3\xF5\xF5\xF7\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
            [ 869 - Greek
            "\x80\x81\x82\x83\x84\x85\x9B\x87\x88\x89\x8A\x8B\x8C\x9D\x8E\x9E"
            "\x9F\xA0\xA2\x93\x94\xA3\xFB\x97\xFD\x99\x9A\x9B\x9C\x9D\x9E\x9F"
            "\xA0\xA1\xA2\xA3\xD6\xD7\xD8\xDD\xDE\xE0\xE1\xAB\xE2\xE3\xAE\xAF"
            "\xB0\xB1\xB2\xB3\xB4\xE4\xE5\xE6\xE7\xB9\xBA\xBB\xBC\xE8\xE9\xBF"
            "\xC0\xC1\xC2\xC3\xC4\xC5\xEA\xEB\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xED"
            "\xEE\xF2\xF3\xF4\xF6\xFA\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"
            "\xE0\xE1\xE2\xE3\xE4\xE5\xE6\xE7\xE8\xE9\xEA\xEB\xEC\xED\xEE\xEF"
            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"
if (said(2067, 218, 55742)){} [ D9BE
[ change start letter check to allow ALL characters
#message 219 "\x89\x46\xF8\xEB\x17"
if (said(5, 219, 7437)){} [ 1D0D
[ use patch to calculate starting offset for any starting character
#message 220 "\xE8\x5A\xBC"
if (said(3, 220, 7521)){} [ 1D61
[ patch to check for extended char marker
#message 221 "\x8B\xC8\x8A\x04\x24\x7F\x75\x05\x46\x8A\x04\x0C\x80\x34\x7F\xEB"
            "\x03"
if (said(17, 221, 7639)){} [ 1DD7
[ fix nextword function to work with non-alphabet characters
#message 222 "\xE9\x59\xBB"
if (said(3, 222, 7804)){} [ 1E7C
[ patch lowercase function to work with extended characters
#message 223 "\xE8\xCC\x87"
if (said(3, 223, 21031)){} [ 5227
[ convert input line to lower case before parsing
#message 224 "\xE8\x5D\xBE"
if (said(3, 224, 7021)){} [ 1B6D
[******************************************************************************


[******************************************************************************
[ 
[ ON.OBJECT TEST FUNCTION
[
[ This patch creates a new test command that checks if any part of a screen 
[ object is at a given screen coordinate.
[
[ SYNTAX:
[   posn(oSOBJ, -1, MODE, vX*, vY*)
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[ LIMITATIONS/CONSIDERATIONS: With this function, you pass a set of picture
[ coordinates by variable along with a target screen object and it will return 
[ TRUE if the object is present on the picture at that location. It uses the 
[ posn test command, with -1 as the first coordinate argument. 
[
[ The test uses the height and width; it's not limited to just the object's
[ baseline. If MODE is zero, the test returns TRUE if you click anywhere 
[ within the object's current width/height. If MODE is 1, then it will only
[ return TRUE if you click on a visible pixel - transparent pixels will return
[ FALSE.
[
[ One minor limitation is that if another object is at the same priority value 
[ as the object being tested, and it is in front of the test object, the  
[ function will return TRUE for pixels on the test object that are hidden 
[ behind the other object. To test for overlapping objects would require an 
[ algorithm that essentially rebuilds the entire screen, which is not 
[ practical.
[
[ See the Power Pack Demo game for detailed examples of how to use this 
[ feature.
[
[ PATCH CODE:
            [ OnObjPatch
#message 225 "\xE8\x94\x29\x80\x3C\xFF\x0F\x85\x3C\x29\x02\x6F\x1A\xFE\xCD\x8A"
            "\xCA\x2A\x4F\x1C\xFE\xC1\xAD\xC1\xE8\x08\x8B\xF8\xAD\x56\x53\x33"
            "\xDB\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x5E\x8B\x5C\x25\x80"
            "\xE3\x41\x80\xFB\x41\x75\x72\x3A\xF0\x77\x6E\x3A\xE8\x72\x6A\x3A"
            "\xD4\x72\x66\x3A\xCC\x77\x62\x83\xFF\x01\x72\x59\x86\xC4\x50\x56"
            "\xE8\x68\x76\x1E\x8E\x1E\xA7\x11\x8A\x05\x1F\xC0\xE8\x04\x5B\x3A"
            "\x47\x24\x74\x02\x3C\x03\x58\x8A\xEC\x76\x02\xEB\x3C\x8B\x77\x10"
            "\xF6\xD9\x02\xC8\x46\x46\x8A\x14\x80\xE2\x0F\xC0\xE2\x04\x80\xF9"
            "\x01\x72\x0D\x46\x80\x3C\x01\x73\xFA\xFE\xC9\x80\xF9\x01\x73\xF3"
            "\x46\xAC\x3C\x01\x72\x13\x8A\xE0\x25\x0F\xF0\x02\xF0\x3A\xF5\x76"
            "\xF0\x3A\xE2\x74\x04\xB0\x01\x5E\xC3\x32\xC0\x5E\xC3"
if (said(173, 225, 57809)){} [ E1D1
[ modify posn test command to use the patch
#message 226 "\xE9\xBA\xD6"
if (said(3, 226, 2836)){} [ 0B14
[******************************************************************************


[******************************************************************************
[ 
[ MULTIPLY/DIVIDE FUNCTIONS
[
[ This patch adds mul.n, mul.v, div.n and div.v functions to early
[ versions that don't have those functions natively. (They are also available
[ available in all other versions for powerpack compatibility, but have no 
[ other practical value.)
[
[ SYNTAX:
[   [ MUL.N/V
[   block(-45, FN_MODE, vNUM*, AMOUNT);
[
[   [ DIV.N/V
[   block(-46, FN_MODE, vNUM*, AMOUNT);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[ LIMITATIONS/CONSIDERATIONS: The value passed as AMOUNT is multiplied/divided 
[ into variable vNUM. If the FN_MODE argument is non-zero, then AMOUNT is  
[ treated a variable, and its value is used in the operation on vNUM.
[
[ Do NOT divide by zero. It will crash AGI. 
[
[ PATCH CODE:
            [ FunctionHandler
#message 227 "\xAC\x8B\xD0\x8B\xCB\xAD\x80\xFA\x01\x72\x05\x8A\xDC\x8A\x67\x09"
            "\x8B\xD9\x80\xEB\x5A\x2E\xFF\xA7\x98\xE2\xA2\xE2\xAE\xE2\x8B\xC6"
            "\x5D\x5F\x5E\xC3"
            [ MUL
            "\x8A\xD8\x8A\x47\x09\xF6\xE4\x88\x47\x09\xEB\xEE"
            [ DIV
            "\x8A\xD8\x8A\x47\x09\x8A\xD4\x32\xE4\xF6\xF2\x88\x47\x09\xEB\xDE"
if (said(64, 227, 57982)){} [ E27E
[******************************************************************************


[******************************************************************************
[ 
[ MESSAGE-BY-LOGIC FORMAT CODE
[
[ With this patch, you can reference messages in other logics (not just 
[ Logic0) using a custom format code.
[
[ SYNTAX:
[  '%lNUM|MSG'
[
[ LIMITATIONS/CONSIDERATIONS: With this new format code, messages from other 
[ logics can be embedded within another message. It is similar to the '%g'  
[ code that lets you access messages from Logic0.
[
[ Use the format code'%l', followed by the logic number and message number
[ separated by the pipe symbol (|). 
[
[ The logic must be loaded. If it is not loaded, the format code gets skipped.
[
[ See the Power Pack Demo game for detailed examples of how to use this 
[ feature.
[
[ PATCH CODE:
            [ MsgFromLogicPatch
#message 228 "\xA1\xE6\x07\x89\x46\xF4\x8D\x46\xFC\x50\x56\xE8\xB8\x42\x83\xC4"
            "\x04\x8B\xF0\x80\x3C\x7C\x0F\x85\x2B\x40\x46\x8D\x46\xF8\x50\x56"
            "\xE8\xA3\x42\x83\xC4\x04\x8B\xF0\xFF\x76\xFC\xE8\x31\x30\x83\xC4"
            "\x02\x83\xF8\x01\x0F\x82\x0D\x40\xE9\xED\x3F"
if (said(59, 228, 58046)){} [ E2BE
[ add patch function to format text jump table
#message 229 "\xBE\xE2"
if (said(2, 229, 9134)){} [ 23AE
[******************************************************************************


[******************************************************************************
[
[ HIDE ALL SCREENOBJECTS FUNCTION
[
[ This function can be used to hide all screen objects without erasing them.  
[ This is useful when you want to temporarily display a different picture 
[ background without using a new.room call.
[
[ SYNTAX:
[   to hide objects on screen:
[   block(-47, 1, ANY*, ANY*);
[
[   to restore objects on screen:
[   block(-47, 0, ANY*, ANY*);
[
[   * This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: When hidden, all screen objects are removed from 
[ the screen, but they will continue to move and cycle. Restoring them will 
[ immediately refresh the screen, drawing all objects in their current state.
[
[ The Power Pack Demo game includes some detailed examples of how to use the
[ hideobjects function.
[
[ PATCH CODE:
            [ HideObjsPatch
#message 230 "\xAC\x83\xC6\x02\x3C\x01\x72\x14\x80\x3E\x93\x09\x01\x74\x1A\xE8"
            "\xC1\x8A\xE8\x61\x74\xC6\x06\x93\x09\x01\xEB\x0D\x80\x3E\x93\x09"
            "\x01\x72\x06\xA2\x93\x09\xE8\xE4\x8A\x8B\xC6\x5D\x5F\x5E\xC3"
            [ EraseAllPatch
            "\x8B\x76\x08\x80\x3E\x93\x09\x01\x0F\x82\xD4\x1F\xEB\xEE"
            [ BuildBlitPatch
            "\x33\xC0\x89\x46\xFC\x80\x3E\x93\x09\x01\x0F\x82\x1F\x20\x8B\xE5"
            "\x8B\x46\x0A\xEB\xD9"
if (said(82, 230, 58105)){} [ E2F9
[ patch EraseAll to ignore when flag is set
#message 231 "\xE9\x20\xE0"
if (said(3, 231, 773)){} [ 0305
[ patch BuildBlitList to ignore when flag is set
#message 232 "\xE9\xD5\xDF"
if (said(3, 232, 862)){} [ 035E
[ clear the hideobjs flag
[ use null message (m254)
if (said(1, NULLMSG, 2451, 0)){} [ DS:0993
[******************************************************************************


[******************************************************************************
[
[ PAUSE CLOCK
[ 
[ This patch lets you pause and restart the internal game clock.
[
[ SYNTAX:
[   [ to pause clock:
[   block(-48, 1, ANY*, ANY*);
[
[   [ to restart clock:
[   block(-48, 0, ANY*, ANY*);
[
[   * These arguments are ignored, so they can be any value
[
[ LIMITATIONS/CONSIDERATIONS: When the game clock is paused, the clock 
[ variables (v11, v12, v13, v14) are temporarily frozen, but the game 
[ continues to run. This feature is useful when you need to do something like 
[ getting input from the player, or displaying a screen as a cutscene or 
[ interlude when you don't want or need the game clock to continue running, 
[ especially if it might interfere with other timing elements of your game.
[
[ The Power Pack Demo game includes some detailed examples of how to use the
[ pauseclock feature.
[
[ PATCH CODE:
#message 233 "\xAC\x83\xC6\x02\x3C\x01\x72\x02\xFE\xC4\x88\x26\x38\x04\x8B\xC6"
            "\x5D\x5F\x5E\xC3"
if (said(20, 233, 58187)){} [ E34B
[ patch clock function to allow pausing
#message 234 "\xFF\x06\xBB\x15\x83\x3E\x38\x04\x01\x73\x5B"
if (said(11, 234, 33314)){} [ 8222
[******************************************************************************


[******************************************************************************
[
[ VARIABLE SOUND FUNCTIONS
[ 
[ This patch creates variable versions for loading and playing sounds. It also 
[ adds a new 'discard.sound.v' function
[
[ SYNTAX:
[   [ load.sound.v:
[   block(-49, 0, vSNDNUM*, ANY**);
[
[   [ sound.v:
[   block(-49, 1, vSNDNUM*, vDONEFLAG*);
[
[   [ discard.sound.v:
[   block(-49, 2, vSNDNUM, ANY*);
[
[    * The compiler expects numbers for all arguments so pass variables as
[      numbers, without the 'v' prefix
[
[   ** This argument is ignored, so it can be any value
[
[ LIMITATIONS/CONSIDERATIONS: The load.sound.v and sound.v functions work 
[ exactly the same as their normal counterparts.
[
[ If a sound is not loaded when the discard.sound.v function is called, the 
[ function does nothing- it does not return an error code. 
[
[ Sound number 255 is reserved and cannot be used; it is needed to support the
[ scripting feature during save/restore operations. If you load/play/discard a
[ sound with number 255, subsequent saving/restoring of a game may crash AGI.
[
[ PATCH CODE:
            [ DiscardSound
#message 235 "\x50\xE8\xA8\x6F\x5F\x0B\xC0\x74\x21\x47\x50\x57\x6A\x05\xE8\xBF"
            "\x90\x83\xC4\x04\x8B\x3E\xA0\x10\xC1\x2D\x10\xE8\x4F\x8A\xE8\xD2"
            "\x32\x83\xC4\x02\xE8\x80\x8A\xE8\x2D\x33\x8B\xC6\xC3"
            [ SndFnHandler
            "\xAC\x3C\x01\xAD\x8A\xD8\x8A\x47\x09\x72\x16\x77\x1F\x8A\xDC\x8A"
            "\x67\x09\x89\x46\x08\x8D\x7E\x08\x57\xE8\x5E\x70\x83\xC4\x02\xEB"
            "\x10\x2A\xE4\x50\xE8\xA6\x6F\x83\xC4\x02\xEB\x05\x2A\xE4\xE8\xA2"
            "\xFF\x8B\xC6\x5D\x5F\x5E\xC3"
            [ CheckA2P
            "\x83\xFF\x01\x0F\x82\x6B\x88\x8B\xC7\x48\xE8\x8F\xFF\xE9\x1A\x88"
if (said(116, 235, 58207)){} [ E35F
[ modify StateReload to use patch
#message 236 "\xC3\xE3"
if (said(2, 236, 27799)){} [ 6C97
[******************************************************************************


[******************************************************************************
[
[ CUSTOM FUNCTION HANDLERS
[ 
[ This patch modifies the block command and set.key command to be launch 
[ points for custom functions used by other patches in this power pack. These  
[ functions are extremely useful, because they have extra arguments available 
[ to be used by custom functions. For the block command, the first argument is 
[ only valid to AGI when it is <= 159; passing values above that (as negative 
[ values to make syntax easier) means there are as many as 95 different 
[ functions that could be assigned. Since controllers are only valid from 0 to 
[ 49, over 200 custom functions are theoretically available.
[
[ SYNTAX:
[   block(FN, ARG1, ARG2, ARG3);
[
[   set.key(ARG1, ARG2, FN*);
[
[    * The compiler expects a controller argument so pass the function
[      value with the 'c' prefix
[
[ LIMITATIONS/CONSIDERATIONS: Function number (FN) is always passed as a 
[ negative value. Argument values are defined by each custom function. Refer
[ to the appropriate power pack patch notes for details on argument syntax.
[
[ PATCH CODE:
            [ BlockHandler
#message 237 "\x8B\x76\x08\x80\x3C\xCF\x0F\x82\x8D\x9A\xAC\xF6\xD8\xD0\xE0\x32"
            "\xE4\x8B\xD8\x2E\xFF\xA7\xE9\xE3\x82\xA0\x82\xA0\xF0\xA7\xD6\xCF"
            "\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF"
            "\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF\xD6\xCF"
            "\x85\xD3\xB7\xD3\xB7\xD3\x36\xD5\xFD\xD5\x5E\xD6\x9C\xD6\x3C\xD7"
            "\x13\xBB\x47\xBB\x65\xD7\x65\xD7\x65\xD7\x65\xD7\x65\xD7\x65\xD7"
            "\xC4\xD7\xC4\xD7\xC4\xD7\x4F\xD8\x4F\xD8\x4F\xD8\x4F\xD8\xAC\xD9"
            "\x7E\xE2\x7E\xE2\xF9\xE2\x4B\xE3\x8C\xE3"
            [ SetKeyHandler
            "\x8B\x76\x08\x80\x7C\x02\xFC\x0F\x82\x4B\x6A\xAD\x8A\x1C\x32\xFF"
            "\xF6\xDB\xD1\xE3\x56\x2E\xFF\x97\x6D\xE4\x58\x40\x8B\xE5\x5D\x5F"
            "\x5E\xC3\x59\xA7\x63\xB0\x76\xB0\xC0\xB0"
if (said(164, 237, 58323)){} [ E3D3
[ modify block command to use the patch
#message 238 "\xE9\x69\x65"
if (said(3, 238, 32359)){} [ 7E67
[ modify set.key command to use the patch
#message 239 "\xE9\xAA\x95"
if (said(3, 239, 20128)){} [ 4EA0
[******************************************************************************


[******************************************************************************
[
[ MOVE LOGIC MESSAGES TO NEW MEMORY SEGMENT
[ 
[ Memory management in AGI is based on 16 bit address segments, so there is not
[ much that can be done to make more than 64K bytes available. Most of the data
[ used in AGI rely heavily on everything (resources, DIR files, overlay data)
[ being in the same segment. Message text data is one exception; it turns out 
[ to be relatively easy to move message text data, and redirect functions that 
[ need to access it the new segment.
[
[ SYNTAX: n/a - patch does not modify any command syntax
[
[ LIMITATIONS/CONSIDERATIONS: The extra segment is created when the Power Pack 
[ is first loaded. If the environment does not have enough memory, the Power 
[ Pack will raise an error and exit. (This is not an issue in DOSBox, and on a
[ native MSDOS machine, more than 256K will almost always be plenty.)
[
[ The message text segment is a full 64 Kbytes long, which means it is possible
[ to have very large amounts of text available without impacting the main 
[ memory heap. If you attempt to load resources with messages that exceeds  
[ the 64KB limit, the Power Pack will display an out of memory message and
[ quit.
[
[ The resource encryption feature in version 3 games complicates the loading
[ process, so in these versions only, resources are fully loaded into the
[ normal heap space, and then the message section is moved. This means there
[ must be enough room on the regular heap for the entire logic - the memory 
[ savings happen after the load.
[
[ Because of the special status of Logic 0, its message text data needs to
[ remain in the main memory segment. You should try to minimize the amount of
[ messages in Logic 0 as much as possible (some basic startup messages, menu
[ text, etc.) Move the rest to logics that are loaded and called as needed to
[ conserve as much memory on the heap as possible.
[
[ PATCH CODE:
            [ LoadLogic2Patch
#message 240 "\x83\xC4\x04\x8B\x5C\x08\x8B\x07\x29\x06\xBA\x08\x50\x53\x1E\x8B"
            "\x1E\x8D\x09\x53\x89\x5C\x08\x43\xF7\xDB\x3B\xD8\x73\x23\x83\xEC"
            "\x64\x53\x50\xB8\x4E\x6F\xA3\x5D\x08\xB8\x20\x74\xA3\x5F\x08\xB8"
            "\x65\x78\xA3\x61\x08\xB8\x74\x20\xA3\x63\x08\xB8\x5D\x08\xE9\x57"
            "\x31\x01\x06\x8D\x09\xA1\x8F\x09\x50\xE8\xB7\x79\x83\xC4\x0A\xE9"
            "\x95\x2F"
            [ LogicMsgPatch
            "\x1E\xA1\x8F\x09\x50\x1F\x8B\x05\x83\xF8\x01\x73\x04\x1F\xE9\xCC"
            "\x3F\x03\xC6\x8B\xF0\x33\xC9\x41\x80\x3C\x01\x72\x03\x46\xEB\xF7"
            "\x1F\x51\x50\xFF\x36\x8F\x09\xFF\x36\x91\x09\x1E\xE8\x82\x79\x83"
            "\xC4\x0A\xA1\x91\x09\x8B\xE5\x5D\x5F\x5E\xC3"
            [ LogicCallPatch
            "\x83\xC4\x02\x8B\x3E\xE6\x07\x80\x7D\x03\x01\x72\x10\x8B\x5D\x08"
            "\x1E\xA1\x8F\x09\x50\x1F\x8B\x07\x1F\x29\x06\x8D\x09\xE9\x14\x30"
            [ RestorePatch
            "\x56\x57\xB8\xAA\x0B\xA3\x9A\x07\x6A\x05\x68\xA1\xE5\x0E\x68\xCD"
            "\x05\x1E\xE8\x41\x79\x83\xC4\x0A\x33\xC0\xA3\x8D\x09\x8B\x1E\xE6"
            "\x07\x8B\x5F\x08\x1E\xA1\x8F\x09\x50\x1F\x33\xC0\x89\x07\x1F\x5F"
            "\xB0\xA7\x8B\xF0\x2E\xC7\x04\x56\x57\x2E\xC7\x44\x02\x55\x8B\x58"
            "\xC3"
            [ FormatPatch
            "\x8B\x76\x08\x3B\x36\x91\x09\x75\x19\x56\xE8\x74\x6A\x8B\x1E\xBA"
            "\x08\x53\x89\x5E\xF0\x40\x01\x06\xBA\x08\xE8\x7F\x6A\x83\xC4\x04"
            "\x8B\xF0\xE9\x8F\x3C"
            [ FmtDonePatch
            "\x8B\x76\x08\x3B\x36\x91\x09\x75\x06\x8B\x46\xF0\xA3\xBA\x08\x8B"
            "\xC7\x8B\xE5\x5D\x5F\x5E\xC3"
            [ PatchCmdData
            "\x54\x02" [ \x00
#message 241 "\x58\x54"
if (said(303, 240, 58487)){} [ E477
[ modify LoadLogic2 to calculate msg text end
#message 242 "\x8B\x5C\x08\x03\x1F\x53\x90\x90\x90\x90"
if (said(10, 242, 5182)){} [ 143E
[ modify LoadLogic2 to use the patch
#message 243 "\xE9\x19\xD0"
if (said(3, 243, 5211)){} [ 145B
[ patch LogicCall to release msg memory
#message 244 "\xE9\xCC\xCF"
if (said(3, 244, 5429)){} [ 1535
[ patch ClearMemory to reset msgmem_ptr
#message 245 "\x8D\x09"
if (said(2, 245, 5797)){} [ 16A5
[ setup patch command to do the restore
#message 246 "\x24\xE5"
if (said(2, 246, 1488, 0)){} [ DS:05D0
[ patch FormatTextOut to make a local copy of message being formatted
#message 247 "\x83\xEC\x10\x8B\x7E\x0A\xE9\x4F\xC3"
if (said(10, 247, 8717)){} [ 220D
[ restore mem_ptr after done formatting
#message 248 "\xE9\x31\xC1"
if (said(3, 248, 9302)){} [ 2456
[ patch LogicMsg to get message text from the new segment
#message 249 "\x39\x1E\xDC\x07\x0F\x85\x35\xC0\x8B\x05\xEB\x05"
if (said(12, 249, 9356)){} [ 248C
[******************************************************************************


[******************************************************************************
[ when done with patching, restore commands used by the patch
stop.sound();
[******************************************************************************

return();


[ **************************************
[ MESSAGES
[ **************************************
[ for easier reference, messages are declared as they are used
