[ ********************************************************************[[ lgc.GameFunctions: Game-specific functions[[ You should use this logic to perform any game specific functions, [ such as counting down timers, etc and processing player input [ related to the game (such as examining/using inventory items) and [ any other things that are required in several rooms that you don't[ want to duplicate in each room.[[ This logic is called from logic 0, on every cycle, unless [ disableGameFunctions is set.[[ Sierra did not use a separate logic for all this - they just did it[ all from logic 0. I find it is neater this way, as you can keep your[ game specific processing separate from other system-related things[ (although these may require some modification for your game). Also,[ this makes logic 0 easier to manage.[[ ********************************************************************#define entryDelay        v240#define vBorderColor      v241#define vForeColor        v242#define vBkgdColor        v243[ *************************************************[ put all non-input functions that are not[ room-specific here[ *************************************************[if (have.key()) {[  display(2, 1, "key: %v19  ");[}[[if (f218) {  display(24, 1, "%v217|2:%v218|2");[[}if (f217) { print("time's up!"); reset(f217); reset(f218);}if (isset(f10)) {  [ get input line  get.string(s4, m0, -1, 0, 0);    s5 = "abc";  if (compare.strings(s4, s5)) {    print("123!");    set.string(s255, "");        s5 = "0123456789012345678901234567890123456789abcdef";    s7 = "0123456789012345678901234567890123456789ghijkl";    if (compare.strings(s5, s7))      {      print("strings match");      }    else      {      print("strings are different");      }      [    goto(instr);        work = 255;    [strLen:    block(-4, sSrc, vRESULT, ANY);    s5 = "abc";    block(-4, 5, 38, 0);    print("'abc' is %v38 characters long");    s5 = "";    block(-4, 5, 38, 0);    print("null is %v38 characters long");        [strCopy:   block(-5, sSrc, sTgt, ANY);    s5 = "a string";    block(-5, 5, 6, 0);    print("s6: '%s6'");        [strConcat: block(-6, sSrc, sAdd, ANY);    s5 = "This is ";    block(-6, 5, 6, 0);    print("'%s5'");    s7 = "";    block(-6, 7, 7, 0);    print("'%s7'");    s7 = "hubba ";    block(-6, 7, 7, 0);    print("'%s7'");        [sLeft:     block(-7, sSrc, sTgt, vLEN);    work = 3;    s8 = "test string";    block(-7, 8, 8, 38);    print("l3 - '%s8'");    work = 0;    s8 = "test string";    block(-7, 8, 8, 38);    print("l0 - '%s8'");    work = 25;    s8 = "test string";    block(-7, 8, 8, 38);    print("l25 - '%s8'");            [sRight:    block(-8, sSrc, sTgt, vLEN);    work = 3;    s8 = "test string";    block(-8, 8, 8, 38);    print("r3 - '%s8'");    work = 0;    s8 = "test string";    block(-8, 8, 8, 38);    print("r0 - '%s8'");    work = 25;    s8 = "test string";    block(-8, 8, 8, 38);    print("r25 - '%s8'");        [sMid:      block(-9, sSrc, vPOS, vLEN); overwrites source, different from rest    work = 0;    v45 = 4;    s8 = "test string";    block(-9, 8, 38, 45);    print("m0/4 - '%s8'");        work = 0;    v45 = 11;    s8 = "test string";    block(-9, 8, 38, 45);    print("m0/11 - '%s8'");        work = 0;    v45 = 12;    s8 = "test string";    block(-9, 8, 38, 45);    print("m0/12 - '%s8'");        work = 0;    v45 = 20;    s8 = "test string";    block(-9, 8, 38, 45);    print("m0/20 - '%s8'");        work = 3;    v45 = 5;    s8 = "test string";    block(-9, 8, 38, 45);    print("m3/5 - '%s8'");        work = 3;    v45 = 8;    s8 = "test string";    block(-9, 8, 38, 45);    print("m3/8 - '%s8'");        work = 3;    v45 = 9;    s8 = "test string";    block(-9, 8, 38, 45);    print("m3/9 - '%s8'");        work = 3;    v45 = 20;    s8 = "test string";    block(-9, 8, 38, 45);    print("m3/20 - '%s8'");        work = 10;    v45 = 5;    s8 = "test string";    block(-9, 8, 38, 45);    print("m10/5 - '%s8'");        work = 11;    v45 = 5;    s8 = "test string";    block(-9, 8, 38, 45);    print("m11/5 - '%s8'");        work = 12;    v45 = 5;    s8 = "test string";    block(-9, 8, 38, 45);    print("m12/5 - '%s8'");trim:        [strTrim:   block(-10, sSrc, sTgt, MODE); mode 0=fulltrim, 1=ltrim, 2=rtrim, 3=agiparsetrim    work = 3;    s8 = " a,.!string {[(ABC)]}     ";    block(-10, 8, 9, 38);    print("aTrim3 - '%s9'");        work = 2;    s8 = " a,.!string {[(ABC)]}     ";    block(-10, 8, 9, 38);    print("aTrim2 - '%s9'");        work = 1;    s8 = " a,.!string {[(ABC)]}     ";    block(-10, 8, 9, 38);    print("aTrim1 - '%s9'");        work = 0;    s8 = " a,.!string {[(ABC)]}     ";    block(-10, 8, 9, 38);    print("aTrim0 - '%s9'");        work = 3;    s8 = "      ";    block(-10, 8, 9, 38);    print("aTrimB3 - '%s9'");        work = 2;    s8 = "      ";    block(-10, 8, 9, 38);    print("aTrimB2 - '%s9'");        work = 1;    s8 = "      ";    block(-10, 8, 9, 38);    print("aTrimB1 - '%s9'");        work = 0;    s8 = "      ";    block(-10, 8, 9, 38);    print("aTrimB0 - '%s9'");        work = 3;    s8 = "";    block(-10, 8, 9, 38);    print("aTrimE3 - '%s9'");        work = 2;    s8 = "";    block(-10, 8, 9, 38);    print("aTrimE2 - '%s9'");        work = 1;    s8 = "";    block(-10, 8, 9, 38);    print("aTrimE1 - '%s9'");        work = 0;    s8 = "";    block(-10, 8, 9, 38);    print("aTrimE0 - '%s9'");instr:        [sInstr:    block(-11, sSrc, vCHAR, vPOS);    work = 110;    v45 = 0;    s8 = "one banana";    block(-11, 8, 38, 45);    print("first n: %v45");            work = 110;    v45++;    s8 = "one banana";    block(-11, 8, 38, 45);    print("second n: %v45");            work = 110;    v45++;    s8 = "one banana";    block(-11, 8, 38, 45);    print("third n: %v45");            work = 110;    v45++;    s8 = "one banana";    block(-11, 8, 38, 45);    print("fourth n: %v45");            work = 110;    v45 = 50;    s8 = "one banana";    block(-11, 8, 38, 45);    print("badpos: %v45");            work = 0;    v45 = 0;    s8 = "one banana";    block(-11, 8, 38, 45);    print("zerochar: %v45");  }}[ if a new room was visited for first timeif (!egoExplored && currentRoom != rm.Entrance) {  [ if ego has been in the room long enough, award one score point for  [ exploration  if (elapsedSeconds != oldSeconds) {    [ increment delay counter until ~2 seconds has passed    entryDelay += 1;    if (entryDelay == 2) {      print("You have explored a new room in this world! Good job!");      currentScore += 1;      set(egoExplored);      entryDelay = 0;    }  }}  [ **************************************[ PROCESS PLAYER INPUT[ **************************************if (controller(c13)) { [ close.window();  set.string(s255, "mouse ");  }#define msgTimer  v244if (msgTimer > 0) {  ++msgTimer;  if (msgTimer == 10) {    clear.lines(24, 24, BLACK);    msgTimer = 0;  }}if (controller(c33)) {  if (mY < 8 && IntVersion >= VERSION_2411)    {      menu.input();    }  else    {    block(-25, 41, 42, 221);    v222 = v221;    v222 /= 16;    v221 *= 16;    v221 /= 16;    print("colors: %v222, %v221");    [    display(24, 8, "LEFT CLICK     ");[    msgTimer = 1;    }}if (controller(c34)) {  display(24, 8, "RIGHT CLICK    ");  msgTimer = 1;  egodir = 0;  set.dir(ego, egodir);}if (controller(c35)) {  display(24, 8, "LEFT DBL-CLICK ");  msgTimer = 1;}if (controller(c36)) {  display(24, 8, "RIGHT DBL-CLICK");  msgTimer = 1;}[ if player hasn't provided input or if match already found, no need[ to do said testsif ((!haveInput || haveMatch)) {  goto(done);}  [ put all generic said tests (those that apply in all rooms) hereif (said("clock", "on")) {  v217 = 1;  v218 = 15;  block(-26, 217, 218, 217);  set(f218);}if (said("clock", "cycle")) {  if (f218) {    block(-27, 0, 0, 0);  } else {    block(-27, 1, 0, 0);  }  toggle(f218);}if (said("mouse", "test")) {  [colors  block(-25, 41, 42, 38);  [convert to hex:  block(-15, 5, 38, 0); [ byte2hex  print("pixel: %s5, %v38");}  if (said("test", "pri")) {  [ get a new random color  random(0, 15, v255);  [ convert it to hex  block(-15, 5, 255, 0);  [ use it for painting  s4 = "F0%s5F46C436C7B436DF86D44FF";  block(-24, 4, 1, 0);}if (said("cycle", "cube")) {  print("it's a Rubik's cube!");  s4 = "a Rubik's cube %v1 %i1";  block(-22, 0, 1, 4);}if (said("get", "inv")) {  v254 = 0;  block(-23, 254, 255, 0);  print("there are %v255 items in OBJECT file");  v254 = 255;  block(-23, 254, 255, 0);  print("you are carrying %v255 items");  v254 = 3;   block(-23, 254, 255, 0);  print("there are %v255 items in room %v254");}if (said("ego", "pri")) {  work = -1;  step.size(ego, work);}if (said("ego", "normal")) {  work = -2;  step.size(ego, work);}if (said("cycle", "on")) {  if (IntVersion <= VERSION_2089) {    init.joy();    set.cel(ego, 1);  }  else {    set.upper.left(0, 1);  }}if (said("cycle", "off")) {  if (IntVersion <= VERSION_2089) {    init.joy();    set.cel(ego, 0);  }  else {    set.upper.left(0, 0);  }}  if (said("blue"))  {  block(-18, 0, 35, 0);#message 35 "00000000000800001000001900002200002A00003300003B"            "04043F0C0C3F15153F1D1D3F26263F2E2E3F37373F3F3F3F"  [set.text.attribute(BLUE, LT_BLUE);  }if (said("green"))  {  block(-18, 0, 36, 0);#message 36 "000000000800001000001900002200002A00003300003B00"            "043F040C3F0C153F151D3F1D263F262E3F2E373F373F3F3F"  }if (said("red"))  {  block(-18, 0, 37, 0);#message 37 "0000000800001000001900002200002A00003300003B0000"            "3F04043F0C0C3F15153F1D1D3F26263F2E2E3F37373F3F3F"  }if (said("black")){  set.text.attribute(BLACK, WHITE); [LT_GRAY);  }if (said("white")) {  set.text.attribute(WHITE, BLACK);  }  if (said("text"))   {  text.screen();  }if (said("graphics"))  {  graphics();  }if (said("text", "forty")) {  reset(text80);  configure.screen(-1, 1, 0);  set(f40);}if (said("graphics", "forty")) {  reset(graphics80);  configure.screen(-1, 0, 0);  trace.info(0, 2, 36);  set(f40);}if (said("text", "eighty")) {  set(text80);  configure.screen(-1, 1, 1);  set(f40);}if (said("graphics", "eighty")) {  set(graphics80);  configure.screen(-1, 0, 1);  trace.info(0, 18, 60);  set(f40);}[ message box color options if (said("msgbox", "color")) {get.string(s9, "get.num check: ", 15, 5, 20);  :getBorder  get.num("Border color: ", vBorderColor);  if (vBorderColor > 15) {    print("Valid color values are 0 - 15");    goto(getBorder);  }  :getFG  get.num("Text foreground color: ", vForeColor);  if (vForeColor > 15) {    print("Valid color values are 0 - 15");    goto(getFG);  }  :getBG  get.num("Text background color: ", vBkgdColor);  if (vBkgdColor > 15) {    print("Valid color values are 0 - 15");    goto(getBG);  }  block(-1, 241, 242, 243);  print("Message box colors have been changed.");  [ check get string  get.string(s9, "did it work? ", 18, 4, 20);  print("you entered: %s9");}if ((said("msgbox", "restore") || said("restore", "msgbox")))  {  block(-2, 4, 0, 15);  print("message box colors restored");  }  if (said("status", "on")) {  status.line.on();}if (said("status", "off")) {  status.line.off();}if (said("status", "test")) {  set.cursor.char(" l220, v3, v41, v42, v43, f9");}if (said("status", "restore")) {  set.cursor.char(" ");}if (said("unblock")) {  unblock();}if (said("test", "white"))   {  set.text.attribute(-1, 0);  set.text.attribute(BLACK, WHITE);  display(0, 0, "     ");  set.text.attribute(0, -1);  }  if (said("mouse", "on"))  {  if (IntVersion <= VERSION_2272)    {    set.key(-1, 1, c0);    }  else    {    enable.item(c255);    }  }if (said("mouse", "off"))  {  if (IntVersion <= VERSION_2272)    {    set.key(-1, 0, c0);    }  else    {    disable.item(c255);    }  }if (said("mouse", "one"))  {  set.key(-1, -1, c101);  print("cursor one");  } if (said("mouse", "two"))  {  set.key(-1, -1, c102);  } if (said("mouse", "three"))  {  set.key(-1, -1, c103);  } if (said("mouse", "four"))  {  set.key(-1, -1, c104);  }  [ plus cursor#message  101 "0707"            "7ffe3ffc3ffc3ffc3ffc3ffc01808001"            "800101803FFC3FFC3FFC3FFC3FFC7FFE"            "00008001800180018001800180017E7E"            "7E7E8001800180018001800180010000"[ walk cursor#message  102 "0F04"             "FFF1FFE0FFE0FFE0FFE0FFF1FFE17FC0"             "3FC07FE0FFE1FFC1FF80FF087F183FBC"             "0000000E000C000E000E0004000C0016"             "801B0006000C001C0036006200430000"             [ default cursor#message  103 "0000"            "FF3FFF1FFF0FFF07FF03FF01FF007F00"            "3F001F00FF01FF00FF307FF87FF8FFFC"            "00000040006000700078007C007E007F"            "807F007C006C00460006000300030000"[ default cursor for 80col#message  104 "0000"            "FF3FFF0FFF03FF017F001F000F000300"            "000000003F001F180F3C07FE07FF8FFF"            "000000400070007C007E807FE07FF07F"            "FC7F807F8067C043E001F00070000000"#define vBG  v244#define vFG  v245#define vRow v246#define vCol v247if (said("color")) {  set.text.attribute(-1, 0);  [ display a random color set  random(0, 15, vBG);  pickFG:  random(0, 15, vFG);  if (vBG == vFG)    {    goto(pickFG);    }  toggle.monitor();  set.text.attribute(245, 244);  vFG += 2;  vRow = 6;  vCol = 8;  display.v(vRow, vCol, vFG);  display(6, 18, " on ");  vBG += 19;  vCol = 22;  display.v(vRow, vCol, vBG);  set.text.attribute(0, -1);}if (said("test", "game"))  {  currentScore++;  }  if (said("ego", "on"))   {  wander(o10);  }if (said("ego", "off"))  {  normal.motion(o10);  }  if (said("use", "mouse"))  {  set(f17);  }  if (said("sound", "one"))  {  toggle(f18);  load.sound(kqseff1);  sound(kqseff1, f245);  }  if (said("sound", "two"))  {  toggle(f18);  load.sound(kqseff2);  sound(kqseff2, f245);  }  if (said("sound", "three"))  {  toggle(f18);  load.sound(s.Scales);  sound(s.Scales, f245);  }  if (said("sound", "four"))  {  toggle(f18);  load.sound(s.Volume);  sound(s.Volume, f245);  }  if (said("sound", "test", "one"))  {  set(f18);  set.key(-2, 0, c5);  set.key(-2, 1, c4);  set.key(-2, 2, c6);  load.sound(kq1theme);  sound(kq1theme, f245);  }if (said("sound", "test", "two"))  {  set(f18);  load.sound(s.Noise);[  set.key(-3, 3, c40);[#message 40 "2F200000FFFF0F0F00030A"[22242100C0C00C0C000000  sound(s.Noise, f245);  }if (said("test", "text"))  {  get.num("enter a number after showing an extremely long and verbose input prompt:", v100);  get.string(s10, "enter a string after showing an extremely long and verbose input prompt:", 4, 0, 79);  print("Here is an extremely long message that needs larger margins to fit on the screen: %s10");  print.at("Here is an extremely long message that needs larger margins to fit on the screen: %s10", 5, 5, 70);  }if (said("test", "mem")) {  [ compare string test  s8 = "test.string";  s9 = "TEST STRING";  s10 = "Test String";  s11 = "Test String";  [ check binary  s7 = "Binary:\n";  set.string(s254, m2);  if (compare.strings(s8, s9)) {    print("%s7'%s8'\n    ==\n'%s9'");  } else {    print("%s7'%s8'\n    !=\n'%s9'");  }  if (compare.strings(s9, s10)) {    print("%s7'%s9'\n    ==\n'%s10'");  } else {    print("%s7'%s9'\n    !=\n'%s10'");  }  if (compare.strings(s10, s11)) {    print("%s7'%s10'\n    ==\n'%s11'");  } else {    print("%s7'%s10'\n    !=\n'%s11'");  }  [ check text  s7 = "Text:\n";  set.string(s254, m1);  if (compare.strings(s8, s9)) {    print("%s7'%s8'\n    ==\n'%s9'");  } else {    print("%s7'%s8'\n    !=\n'%s9'");  }  if (compare.strings(s9, s10)) {    print("%s7'%s9'\n    ==\n'%s10'");  } else {    print("%s7'%s9'\n    !=\n'%s10'");  }  if (compare.strings(s10, s11)) {    print("%s7'%s10'\n    ==\n'%s11'");  } else {    print("%s7'%s10'\n    !=\n'%s11'");  }  [ check AGI  s7 = "AGI:\n";  set.string(s254, m0);  if (compare.strings(s8, s9)) {    print("%s7'%s8'\n    ==\n'%s9'");  } else {    print("%s7'%s8'\n    !=\n'%s9'");  }  if (compare.strings(s9, s10)) {    print("%s7'%s9'\n    ==\n'%s10'");  } else {    print("%s7'%s9'\n    !=\n'%s10'");  }  if (compare.strings(s10, s11)) {    print("%s7'%s10'\n    ==\n'%s11'");  } else {    print("%s7'%s10'\n    !=\n'%s11'");  }}if (said("game", "fast")) {  v220 = 1;  cycle.time(o255, v220);  dblClickDelay = 12;}if (said("game", "normal")) {  v220 = 0;  cycle.time(o255, v220);  dblClickDelay = 4;}if (said("speed", "fast")) {  --animationInterval;}if (said("speed", "slow")) {  ++animationInterval;}if (said("trace", "test")) {[  set(f15);[  print.at("trace test", 8, 1, 30);  trace.on();  add.to.pic(vw.Ego, 0, 0, 100, 100, 15, 15);  if (said("anyword", "anyword", "anyword", "anyword")) {    print("anyword");  }  }if (said("text", "cycle")) {  clear.lines(0, 24, -1);  accept.input();  get.string(s4, m0, -2, 0, 0);  display(21, 1, "%s4");}if (said("text", "one")) {  set.text.attribute(-1, 0); [ save colors  set.text.attribute(BLACK, BLACK);  clear.text.rect(8, 15, 18, 25, -2);  set.text.attribute(0, -1);}skip:[ if player says any dirty wordsif ((said("bad word", "rol") ||      said("anyword", "bad word", "rol") ||      said("anyword", "anyword", "bad word", "rol") ||      said("anyword", "anyword", "anyword", "bad word", "rol") ||      said("anyword", "anyword", "anyword", "anyword", "bad word", "rol") ||      said("anyword", "anyword", "anyword", "anyword", "anyword", "bad word", "rol"))) {  ++badWordCount;  if (badWordCount == 1) {    [ first warning    print("I am going to tell on you!");  }  if (badWordCount == 2) {    [second warning    print("Don't say anymore words like that!");  }  if (badWordCount == 3) {    [ no more warnings    print("Don't say I didn't warn you.");    quit(1);  }}[ look cubeif (said("look", "cube")) {  if (has("strange colored cube")) {    s4 = "what is this thing?";    show.obj(vw.Inv.TestItem);  }  else {    print("You don't have it.");  }}  [ drop cubeif (said("drop", "cube")) {  print("The cube is too interesting; you decide to keep it.");}  [ anything cubeif ((said("anyword", "cube") ||     said("cube", "rol") ||    said("anyword", "anyword", "cube"))) {  print("There's no need to do anything with the cube.");}  [ look anything (not ("look", "rol"), because that would [ match just "look", which we don't want here)if ((said("look", "anyword") || said("look", "anyword", "rol"))) {  print("What? Where?");}[ get anythingif ((said("get", "anyword") || said("get", "anyword", "rol"))) {  print("You can't get that here!");}[ use anythingif ((said("use", "anyword") || said("use", "anyword", "rol"))) {  print("What do you want me to do with it?");}:doneif (isset(f245))  {  reset(f245);  print("test sound is done");  }return();[ **************************************[ MESSAGES[ **************************************#message  2 "     black"#message  3 "      blue"#message  4 "     green"#message  5 "      cyan"#message  6 "       red"#message  7 "   magenta"#message  8 "     brown"#message  9 "   lt gray"#message 10 "   dk gray"#message 11 "   lt blue"#message 12 "  lt green"#message 13 "   lt cyan"#message 14 "    lt red"#message 15 "lt magenta"#message 16 "    yellow"#message 17 "     white"#message 18 " on "#message 19 "black     "#message 20 "blue      "#message 21 "green     "#message 22 "cyan      "#message 23 "red       "#message 24 "magenta   "#message 25 "brown     "#message 26 "lt gray   "#message 27 "dk gray   "#message 28 "lt blue   "#message 29 "lt green  "#message 30 "lt cyan   "#message 31 "lt red    "#message 32 "lt magenta"#message 33 "yellow    "#message 34 "white     "