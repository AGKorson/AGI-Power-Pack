[ ********************************************************************[ [ lgc.RoomInit: Room Initialization[ [ This logic is called by room logics when they are executed for the[ first time after a new.room() command is encountered. It takes care [ of the common items that are done for all rooms.[[ ********************************************************************[ for all rooms except the control panels, set [ screen to 80 col mode (control panels manage that separately)if (currentRoom < 21) {  if (!column80) {    [ before switching to 80 col mode, need to clear the     [ existing picture (or it will display again after the switch, which     [ will interfere with fade in/out)    work1 = 64;    block(PIC.DRAW, -1, &work1, 0); [ pic.draw(FILLSTYLE, vCOLORPAIR)    [ 64 = 0x40, which clears the screen to black, with priority set    [ to 4. DO NOT pass a value that sets priority to zero; the game    [ will lock up if the entire priority screen is set to zero        [ now change to 80 column mode    configure.screen(-1, 0, 1);    [ force fade back to black    block(FADE.OUT, 0, 0, BLACK); [ fade.out(BYVAR, DELAY, COLOR)          set(column80);  }    [ if not opening title room  if (currentRoom != rm.Title) {    [ animate and reset the ego object    animate.obj(ego);    step.size(ego, egoStepSize);    step.time(ego, egoStepTime);    cycle.time(ego, egoCycleTime);    observe.blocks(ego);    observe.objs(ego);    observe.horizon(ego);        [ save current ego position    get.posn(ego, egoX, egoY);        [ by default, set ego to autocycle; remember to turn it     [ off when you want cycle an animation of ego when it's    [ not moving    work1 = 1;    set.upper.left(0, &work1);      [ turn status line on during normal game play    status.line.on();        [ enable input    accept.input();      [ enable game functions    reset(disableGameFunctions);   }       [ enable mouse    enable.item(mouse);    [ click2move if in walk mode    if (cursormode == C_WALK) {      set(click2move);    } else {      reset(click2move);    }    [ use straightline mode    work1 = -1;    step.size(ego, work1);[  }}[ control panelsif (currentRoom > 20) {  [ if loading the terminal or instrument control panel  if ((currentRoom == cp.Terminal || currentRoom == cp.Instrument)) {    [ use 80 col mode    if (!column80) {      [ before switching mode, clear the picture      work1 = 64;      block(PIC.DRAW, -1, &work1, 0); [ pic.draw(FILLSTYLE, vCOLORPAIR)      configure.screen(-1, 0, 1);      [ force fade back to black      block(FADE.OUT, 0, 0, BLACK); [ fade.out(BYVAR, DELAY, COLOR)      set(column80);    }  } else {    [ if loading any other control panel, use 40 col mode    if (column80) {      work1 = 64;      block(PIC.DRAW, -1, &work1, 0); [ pic.draw(FILLSTYLE, vCOLORPAIR)      configure.screen(-1, 0, 0);      [ force fade back to black      block(FADE.OUT, 0, 0, BLACK); [ fade.out(BYVAR, DELAY, COLOR)      reset(column80);    }  }  [ no horizon in control panel rooms  set.horizon(0);      [ disable game functions  set(disableGameFunctions);    [ turn status line off for control panels  status.line.off();    [ disable input for control panels  prevent.input();  lastChar = 0;    [ mouse is enabled by default for control rooms  enable.item(mouse);}[ reset/restore any global variables/flags that[ need to be reset whenever a new room is encounteredreset(musicDone);reset(soundDone);[ reset all local and dynamic variables/flagswork1 = 255;Loop1:reset.v(work1);  [ reset all local flags *work1 = 0;      [ reset all local variables--work1;[ continue until below 220if (work1 > 219) {  goto(Loop1);}return();[ **************************************[ MESSAGES[ **************************************