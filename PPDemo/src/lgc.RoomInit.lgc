[*********************************************************************
[ 
[ lgc.RoomInit: Room Initialization
[ 
[ This logic is called by room logics when they are executed for the
[ first time after a new.room() command is encountered. It takes care 
[ of the common items that are done for all rooms.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
[ none

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ for all rooms except the control panels and title, set screen to 80 col mode 
[ (control panels manage that separately)
if ((currentRoom < cp.Terminal || currentRoom > cp.RANDOCC) && currentRoom != rm.Title) {
  if (!column80) {
    [ before switching to 80 col mode, need to clear the 
    [ existing picture (or it will display again after the switch, which 
    [ will interfere with fade in/out)
    work1 = 64;
    block(PIC.CLEAR, CLEAR_SCREEN, &work1, 0); [ pic.clear(vCOLORS)
    [ 64 = 0x40, which clears the screen to black, with priority set
    [ to 4. DO NOT pass a value that sets priority to zero; the game
    [ will lock up if the entire priority screen is set to zero
    
    [ change to graphics to 80 column mode
    configure.screen(SCREEN.MODE, GRAFMODE, 80COL); [ screen.mode(MODE, WIDTH)
    set(column80);
    [ force fade back to black
    block(FADE.OUT, BYNUM, 0, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
  }
  
  
  [ enable mouse in all regular rooms
  enable.item(mouse);

  [ animate and reset the ego object
  animate.obj(ego);
  step.size(ego, egoStepSize);
  step.time(ego, egoStepTime);
  cycle.time(ego, egoCycleTime);
  observe.blocks(ego);
  observe.objs(ego);
  observe.horizon(ego);
  
  [ save current ego position
  get.posn(ego, egoX, egoY);
  
  [ by default, set ego to autocycle; remember to turn it 
  [ off when you want cycle an animation of ego when it's
  [ not moving
  work1 = AUTO_CYCLE;
  set.upper.left(&ego, &work1); [ auto.cycle(oSOBJ, vMODE)

  [ turn status line on during normal game play
  status.line.on();
  
  [ enable input
  accept.input();

  [ in all rooms except title, enable game functions
  reset(disableGameFunctions);
  
  [ click2move if in walk mode
  if (cursormode == C_WALK) {
    set(click2move);
  } else {
    reset(click2move);
  }
  [ use straightline mode
  work1 = MOVE_DIRECT;
  step.size(ego, work1); [ set.click2move.mode(vMODE)

}

if (currentRoom == rm.Title) {
  [ enable mouse in title room
  enable.item(mouse);

  [ disable game functions; they will be re-enabled after title screen is done
  set(disableGameFunctions);
}

[ control panels
if (currentRoom >= cp.Terminal && currentRoom <= cp.RANDOCC) {
  [ if loading the terminal or instrument control panel
  if ((currentRoom == cp.Terminal || currentRoom == cp.CAISOCC)) {
    [ use 80 col mode
    if (!column80) {
      [ before switching mode, clear the picture
      work1 = 64;
      block(PIC.CLEAR, CLEAR_SCREEN, &work1, 0); [ pic.clear(vCOLORS)
      configure.screen(SCREEN.MODE, GRAFMODE, 80COL); [ screen.mode(MODE, WIDTH)
      set(column80);
      [ force fade back to black
      block(FADE.OUT, BYNUM, 0, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
    }
  } else {
    [ if loading any other control panel, use 40 col mode
    if (column80) {
      work1 = 64;
      block(PIC.CLEAR, CLEAR_SCREEN, &work1, 0); [ pic.clear(vCOLORS)
      configure.screen(SCREEN.MODE, GRAFMODE, 40COL); [ screen.mode(MODE, WIDTH)
      [ force fade back to black
      block(FADE.OUT, BYNUM, 0, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
      reset(column80);
    }
  }

  [ no horizon in control panel rooms
  set.horizon(0);
    
  [ disable game functions
  set(disableGameFunctions);
  
  [ turn status line off for control panels
  status.line.off();
  
  [ disable input for control panels
  prevent.input();
  lastChar = 0;
  
  [ mouse is enabled by default for control rooms
  enable.item(mouse);

}

[ make sure input area is cleared
clear.lines(23, 24, 0);

[ reset/restore any global variables/flags that
[ need to be reset whenever a new room is encountered
reset(musicDone);
reset(soundDone);

[ reset clock variables
oldSeconds = -1;

[ reset all local and dynamic variables/flags
work1 = 255;
Loop1:
reset.v(work1);  [ reset all local flags 
*work1 = 0;      [ reset all local variables
--work1;
[ continue until below 220
if (work1 > 219) {
  goto(Loop1);
}

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
