[ ********************************************************************
[
[ lgc.Main: Main logic
[
[ This logic runs in every interpreter cycle and calls
[ other logics as needed.
[
[
[ To better manage variables and flags, they are 
[ grouped into reserved, global, local, and dynamic:
[
[ reserved = reserved by the interpreter 
[     v0 - v26
[     f0 - f16, f20
[     s0, s1
[
[ global = usable and accessible by all logics
[     v27 - v219
[     f17 - f18, f21 - fShowClicks
[     s2 - s11
[
[ local = usable and accessible by single room
[     v220 - v239
[     f220 - f239
[     s12 - s19
[
[ dynamic = usable and accesible by a non-room logic
[     v240 - v255
[     f240 - f255
[     s20 - s23
[
[ Local and dynamic variables/flags are reset whenever a new room is
[ loaded.
[

[ ********************************************************************

[ **************************************
[ LOCAL DEFINES
[ **************************************
#define rndNum                     v255

[ **************************************
[ ERROR CHECK
[ **************************************

[ if one of the few trappable errors in AGI is encountered, the game
[ is probably not able to continue; make an announcement to the player
[ and quit
if (errorNumber > 0) {
  block(FADE.IN, 0, 0, BLACK); [ fade.in(BYVAR, DELAY, COLOR)
  call(lgc.Error); 
}

[ **************************************
[ GAME START
[ **************************************
[ when game begins, or restarts, there are a number
[ of setup activities to take care of
if (currentRoom == 0) {
  [ when the game starts, the current room is zero, so all the
  [ setup/initialization code goes here
  [
  [ restarting a game also sets currentRoom to zero, and also
  [ requires most of the same setup/initialization steps

  if (!gameRestarted) { 
    [ confirm platform is PC
    if (machineType != PC) {
      load.logics(lgc.Error);
      print("%l97|33");
      quit(1);
    }
          
    [ run the powerpack mod BEFORE DOING ANYTHING ELSE
    call(lgc.Version2Check);
    if (!IntVersion) {
      load.logics(lgc.Error);
      print("%l97|34");
      quit(1);
    }
    if ((IntVersion == VERSION_2089 || IntVersion == VERSION_2272)) {
      [ these versions not supported
      load.logics(lgc.Error);
      print("%l97|35");
      quit(1);
    }
    if (IntVersion == VERSION_2411) {
      call(lgc.mod2411);
      goto(continue);
    }
    if (IntVersion == VERSION_2425) {
      call(lgc.mod2425);
      goto(continue);
    }
    if (IntVersion == VERSION_2426) {
      call(lgc.mod2426);
      goto(continue);
    }
    if (IntVersion == VERSION_2435) {
      call(lgc.mod2435);
      goto(continue);
    }
    if (IntVersion == VERSION_2439) {
      call(lgc.mod2439);
      goto(continue);
    }
    if (IntVersion == VERSION_2440) {
      call(lgc.mod2440);
      goto(continue);
    }
    if (IntVersion == VERSION_2903) {
      call(lgc.mod2903);
      goto(continue);
    }
    if (IntVersion == VERSION_2911) {
      call(lgc.mod2911);
      goto(continue);
    }
    if (IntVersion == VERSION_2912) {
      call(lgc.mod2912);
      goto(continue);
    }
    if (IntVersion == VERSION_2915) {
      call(lgc.mod2915);
      goto(continue);
    }
    if (IntVersion == VERSION_2917) {
      call(lgc.mod2917);
      goto(continue);
    }
    if (IntVersion == VERSION_2936) {
      call(lgc.mod2936);
      goto(continue);
    }
print("Version: %v30");
  }
  :continue
  [ confirm video, sound and mouse settings
  if (monitorType != EGA) {
    load.logics(lgc.Error);
    print("%l97|36");
    quit(1);
  }
  if (!enableDblClick) {
    load.logics(lgc.Error);
    print("%l97|37");
    quit(1);
  }
  if (numberOfVoices != 4) {
    load.logics(lgc.Error);
    print("%l97|38");
    quit(1);
  }
  
  [ do start/restart initialization activities
  call(lgc.Init);       [ this sets up the game; assigns key controllers,
                        [ configures the screen and other startup activities

  [ ready to begin game by going to first room
  if (gameRestarted) {
    [ go to first room here (skip Intro)
    new.room(rm.ParkingLot);
  } else {
    [ !actually, if NOT restarting (meaning this is very beginning, 
    [ need to create the menu; it can't be done in lgc.Init, it MUST be 
    [ done from within logic 0, so do that before going to start room
    set.menu("AGI");
    set.menu.item("About      ", cAbout);
    set.menu.item("Help   <F1>", cHelp);
    set.menu("File");
    set.menu.item("Save ÄÅÇÉ<F5>", cSave);
    set.menu.item("Restore  <F7>", cRestore);
    set.menu.item("ƒƒƒƒƒƒƒƒƒƒƒƒƒ", cDummy);
    set.menu.item("Restart  <F9>", cRestart);
    set.menu.item("Quit  <Alt-Z>", cQuit);
    set.menu("Action");
    set.menu.item("See Object  <F4>", cShowObj);
    set.menu.item("Inventory  <Tab>", cStatus);
    set.menu("Special");
    set.menu.item("Sound On/Off      <F2>", cToggleSound);
    set.menu.item("Clock On/Off      <F6>", cClock);
    set.menu.item("Joystick      <Ctrl J>", cInitJoy);
    set.menu.item("Pause            <Esc>", cPause);
    set.menu("Speed");
    set.menu.item("Normal ", cNormal);
    set.menu.item("Slow   ", cSlow);
    set.menu.item("Fast   ", cFast);
    set.menu.item("Fastest", cFastest);
    if (debugging) {
      set.menu("Debug");
      set.menu.item("Debug Help        ", cDebugHelp);
      set.menu.item("Ego Info   <Alt-E>", cShowEgo);
      set.menu.item("Pri Screen <Alt-P>", cShowPriority);
      set.menu.item("Memory     <Alt-M>", cShowMem);
      set.menu.item("Obj Info   <Alt-I>", cObjInfo);
      set.menu.item("Coords     <Alt-X>", cXY);
      set.menu.item("Get All           ", cGimme);
      set.menu.item("Log Input: Off", cLogInput);
      set.menu.item("Display Clicks: Off", cShowClicks);
    }
    [ submit the menu (which makes it ready to use)
    submit.menu();
    [ disable the separator lines
    disable.item(cDummy);
    
    [ start the game with the title screen
    new.room(rm.Title);         [ intro/opening screen
  }
}

[ **************************************
[ EVERY CYCLE
[ **************************************

[!!!!!! TEMPORARY DEBUG CODE !!!!!!
if (controller(cLogInput)) {
  [ toggle the message
  toggle(fLogInput);
  s23 = "Log Input: %s22";
  if (fLogInput) {
    s22 = "On";    
  } else {
    s22 = "Off";
  }
  block(STR.FORMAT, &s23, &s23, 0); [ str.format(sINPUT, sRESULT)
  block(SET.MSG, 0, &m32, &s23); [ set.msg(BYVAR, MSGOLD, STRNEW)
}
[ show click data
if (controller(cShowClicks)) {
  [ toggle the message
  toggle(fShowClicks);
  s23 = "Display Clicks: %s22";
  if (fShowClicks) {
    s22 = "On";
  } else {
    s22 = "Off";
  }
  block(STR.FORMAT, &s23, &s23, 0); [ str.format(sINPUT, sRESULT)
  block(SET.MSG, 0, &m33, &s23); [ set.msg(BYVAR, MSGOLD, STRNEW)
}


if (fShowClicks) {
  [ used to assist in creating click statements and said statements
  if (controller(cLeftClick)  && currentRoom != 12 && currentRoom != 13) {
    get.posn(ego, work1, work2);
    display(4, 1, "left click: (%v27, %v28)  ego pos:  (%v46, %v47)        ");
  }
  [[ show the open closet door timer
  [ display(24, 0, "%v79|2:%v80|2");
  display(24, 0, "mem pages: %v8  ");
}
if (fLogInput) {
  if (haveInput) {
    if (unknownWordNum > 0) {
      log("unknown word: %v9");
    } else {
      log("");
    }
  }
}

[ if a new room has just been loaded
if (newRoom) {
  [ First interpreter cycle in a new room
  [ Note: Everything other than logic 0 is discarded
  [ from memory when new.room is executed

  [ do basic room initialization
  call(lgc.RoomInit);
  
  if (!disableGameFunctions) { 
    [ Load game specific functions logic into memory
    load.logics(lgc.GameFunctions);
    [ also toolbar functions
    load.logics(lgc.ToolbarFunctions);
  }
  [ if debugging is active
  if (debugging) {
    [ load debug logic into memory
    load.logics(lgc.Debug);
  }

  [ always animate ego object when starting a new room
  animate.obj(ego);
  [ load and set view
  [ (for more complex games, this will probably need 
  [ to be moved into each room's logic)
  load.view(vw.Ego);
  set.view(ego, vw.Ego);
  
  [ force clock value to update, if time is visible
  clearStatusSeconds = -1; 
  
  [ check for closet door being left open
  if (closetopen && currentRoom != rm.Hallway && currentRoom != rm.Closet && currentRoom != rm.SecretRoom) {
    [ start a fresh timer
    timerMin = 0; [4;
    timerSec = 20; [0;
    block(START.TIMER, &timerMin, &timerSec, &closettimer); [ start.timer(vMINUTES, vSECONDS, fDONE)
  } else {
    [ stop the timer
    block(TOGGLE.TIMER, 0, 0, 0); [ toggle.timer(STATE)
  }
}

[ check for end of closet timer
if (closettimer) {
  [ the door gets closed, and if ego is beyond the secret room, he's gonna get stuck
  reset(closettimer);
  reset(closetopen);
  if (currentRoom > 6) {
    set(trapped);
  }
}

[ if this is first cycle since restore game executed
if (isset(gameRestored)) {
  [ make sure input area is cleared
  clear.lines(23, 24, 0);
[  [ debugging off by default
[  reset(debugging);
  [ need to 're-disable menu separators)
  disable.item(cDummy);
}

[ if clock display is needed
if (clockOn) {
  [ check current time every second
  if (clearStatusSeconds != elapsedSeconds) {
    block(GET.TIME, &work1, &work2, &work3); [ get.time(vHOUR, vMINUTE, vSECOND)
    [ update the displayed clock whenever the minute value changes
    if (work2 != currentMinute) {
      currentMinute = work2;
      currentHour = work1;
    }
    if (!deathType) {
      [ update game time clock every second (if not disabled)
      set.text.attribute(-1, 0);
      set.text.attribute(YELLOW, BROWN);
      [ update the clock
      display(24, 56, "Elapsed Time: %v13:%v12|2:%v11|2 ");
      [ restore default colors
      set.text.attribute(0, -1);
    }
    
    [ update the stored seconds value
    clearStatusSeconds = elapsedSeconds;
  }
}
    
[ check for ego death (usually happens a lot in AGI games...)
if (deathType > 0) {
  [ if this is first cycle since ego died
  if (deathType != 255) {
    [ disable most menu and keyboard shortcuts
    disable.item(cDebugHelp);
    disable.item(cSave);
    disable.item(cPause);
    disable.item(cShowObj);
    disable.item(cClock);
    disable.item(cInitJoy);
    disable.item(cNormal);
    disable.item(cFastest);
    disable.item(cFast);
    disable.item(cSlow);
    disable.item(cShowEgo);
    disable.item(cShowPriority);
    disable.item(cShowMem);
    disable.item(cObjInfo);
    disable.item(cXY);
    disable.item(cGimme);
    
    [ load the death handler logic
    load.logics(lgc.Death);
  }
    
  [ call the death handler, where you update the screen
  [ and display a message to player about how ego died
  call(lgc.Death);
  
  [ don't process any other commands
  return();
}

[ ***********************
[ CHECK CONTROLLER INPUT
[ *********************** 

[ if normal game functions have not been disabled
if (!disableGameFunctions) {
  [ check for menu activation
  if (controller(cMenu)) {
    menu.input();
    oldSeconds = -1;
  }
  if (controller(cLeftClick)) {
    if (mouseY < 8) {
      menu.input();
      oldSeconds = -1;
    }
  }
  
  [ now check for any controllers that may have been activated
  if (controller(cAbout)) {
    print(gameAboutMsg);
  }

  if ((controller(cFastest) || 
       said("fastest") || 
       said("fastest", "speed"))) {
    [ no delay between interpreter cycles
    animationInterval = FASTEST_SPEED;
  }
  
  if ((controller(cFast) || 
       said("fast") || 
       said("fast", "speed"))) {
    [ 1/20th of a second delay between interpreter cycles
    animationInterval = FAST_SPEED;
  }
  
  if ((controller(cNormal) || 
       said("normal") || 
       said("normal", "speed"))) {
    [ 2/20ths of a second delay between interpreter cycles
    animationInterval = NORMAL_SPEED;
  }

  if ((controller(cSlow) || 
       said("slow") || 
       said("slow", "speed"))) {
    [ 4/20ths of a second delay between interpreter cycles
    animationInterval = SLOW_SPEED;
  }
  
  [ remember that sound controls only have an effect on non-PC systems
  if (controller(cCrescendo) && attenuation > 0) {
    [ to increase volume, lower sound attenuation variable
    --attenuation;
  }
  if (controller(cDecrescendo) && attenuation < 15) {
    [ to decrease volume, raise sound attenuation variable
    ++attenuation;
  }
  
  [ toggle sound on/off
  if (controller(cToggleSound)) {
    toggle(soundOn);
  }
  
  [ toggle clock
  if (controller(cClock)) {
    toggle(clockOn);
  }
  
  [ if debug mode is requested
  if ((said("debug") || controller(cDebug))) {
    [ if not in debug mode yet
    if (!debugging) {
      [ activate it
      set(debugging);
      [ display the game-about message
      print(gameVersionMsg);
      [ and interpreter version
      version();
      [ load debug logic into memory
      load.logics(lgc.Debug);
    }
  }

  [ save game
  if ((controller(cSave) || 
       said("save", "game") || 
       said("save"))) {
    [ if in lobby, need to erase patient2 if currently visible
    if (currentRoom == rm.Lobby && f237) {
      erase(o5);
    }
    save.game();
    if (currentRoom == rm.Lobby && f237) {
      draw(o5);
    }
  }

  [ restore game
  if ((controller(cRestore) || 
       said("restore", "game") || 
       said("restore"))) {
    restore.game();
  }

  [ restart game
  if ((controller(cRestart) || 
       said("restart", "game") || 
       said("restart"))) {
    restart.game();
  }

  [ ask for help
  if ((controller(cHelp) || 
       said("help"))) {
    call(lgc.GameHelp);
  }

  [ echo line draws previous input on input line
  if (controller(cEchoLine)) {
    echo.line();
  }

  [ clear the input line
  if (controller(cCancelLine)) {
    cancel.line();
  }

  [ pause game (showing menu is another 
  [ way to pause the game)
  if ((controller(cPause) || 
       said("pause", "game") || 
       said("pause"))) {
    pause();
  }

  [ check player's current inventory
  if ((controller(cStatus) || 
       said("inventory"))) {
    status();
  }

  [ examine an object in player's inventory
  if ((controller(cShowObj) || 
       said("look", "inventory"))) {
    [ enable section of inventory items
    set(enableItemSelect);
    [ show inventory screen
    status();
    
    [ selectedItem is set to 255 if ESC is pressed
    [ in the inventory screen
    if (selectedItem > 0 && selectedItem != 255) {
      selectedItem += 100;
      show.obj.v(selectedItem);
    }
            
    [ disable selection of inventory items
    reset(enableItemSelect);
  }

  [ quit the game
  if ((controller(cQuit) || 
       said("quit", "game") || 
       said("quit"))) {
    stop.sound();
    quit(0);
  }
}
  
[ ***********************
[ NON-CONTROLLER CHECKS
[ *********************** 

[ save current ego position
get.posn(ego, egoX, egoY);
    
[ IMPORTANT: This calls the logic for the current room - this
[ is not done automatically by the interpreter so it has to be
[ called manually by logic 0.
call.v(currentRoom);

[ if debugging is active                
if (debugging) {
  [ call the debugging logic
  call(lgc.Debug);
}

[ run game specific functions only if they are not disabled
if (!disableGameFunctions) {
  call(lgc.GameFunctions); 
  call(lgc.ToolbarFunctions);
}
  
[check player input for unknown words
if (haveInput && !haveMatch && unknownWordNum > 0) {
  reset(haveInput);
  [copy word to a string
  if (unknownWordNum == 1) {
    word.to.string(unknownWord, w1);
  }
  if (unknownWordNum == 2) {
    word.to.string(unknownWord, w2);
  }
  if (unknownWordNum == 3) {
    word.to.string(unknownWord, w3);
  }
  if (unknownWordNum == 4) {
    word.to.string(unknownWord, w4);
  }
  if (unknownWordNum == 5) {
    word.to.string(unknownWord, w5);
  }
  if (unknownWordNum == 6) {
    word.to.string(unknownWord, w6);
  }
  if (unknownWordNum == 7) {
    word.to.string(unknownWord, w7);
  }
  if (unknownWordNum == 8) {
    word.to.string(unknownWord, w8);
  }
  if (unknownWordNum == 9) {
    word.to.string(unknownWord, w9);
  }
  if (unknownWordNum == 10) {
    word.to.string(unknownWord, w10);
  }
  [choose a random unknown word response
  random(33, 35, rndNum);
  print.v(rndNum);
}
  
[ finally, if there is input that hasn't 
[ been recognized yet
if (haveInput && !haveMatch) {
  print("I don't understand your request.");
  reset(haveInput);
}

[ save clock values for comparison purposes
oldSeconds = elapsedSeconds;
oldMinutes = elapsedMinutes;
oldHours = elapsedHours;
oldDays = elapsedDays;

[ TODO: cursors & instruments need to be stored in logic0

return();

[ **************************************
[ MESSAGES
[ **************************************
#message 1 "AGI"
#message 2 "About      "
#message 3 "Help   <F1>"
#message 4 "Debug Help "
#message 5 "File"
#message 6 "Save     <F5>"
#message 7 "Restore  <F7>"
#message 8 "-------------"
#message 9 "Restart  <F9>"
#message 10 "Quit  <Alt-Z>"
#message 11 "Action"
#message 12 "See Object  <F4>"
#message 13 "Inventory  <Tab>"
#message 14 "Special"
#message 15 "Sound On/Off      <F2>"
#message 16 "Color/BW      <Ctrl R>"
#message 17 "Clock On/Off      <F6>"
#message 18 "Joystick      <Ctrl J>"
#message 19 "Pause            <Esc>"
#message 20 "Speed"
#message 21 "Normal "
#message 22 "Slow   "
#message 23 "Fast   "
#message 24 "Fastest"
#message 25 "Debug"
#message 26 "Ego Info   <Alt-E>"
#message 27 "Pri Screen <Alt-P>"
#message 28 "Memory     <Alt-M>"
#message 29 "Obj Info   <Alt-I>"
#message 30 "Coords     <Alt-X>"
#message 31 "Get All           "
#message 32 "Log Input: Off"
#message 33 "Display Clicks: Off"
#message 34 " %v13:%v12|2:%v11|2 "
#message 35 "I don't understand \"%s2\""
#message 36 "\"%s2\" is not in my vocabulary."
#message 37 "What is \"%s2\""
#message 38 "I don't understand your request."
#message 39 "Debug Help        "
#message 40 gameAboutMsg
#message 41 gameVersionMsg
#message 42 "On"
#message 43 "Off"