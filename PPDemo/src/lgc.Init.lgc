[ ********************************************************************
[
[ lgc.Init: Initialization
[
[
[ This logic should only be called once, when the game first starts
[ see the 'Keyboard Controller' topic in the Help file for details on
[ key assignments.
[
[ ********************************************************************

#define tmp0    v220
#define tmp1    v221
#define tmp2    v222
#define tmp3    v223
#define tmp4    v224
#define tmp5    v225
#define vRnd    v232
#define vStyle  v233

if (gameRestarted) {
  [ for a restart, there are a few things that need to be reset
  disable.item(cDummy);
  set(enableMenu);
  reset(disableGameFunctions);
  [ when restarting, s23 is set to hold sound settings
  block(STR2BYTE, &s23, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
  if (tmp0 > 99) {
    set(soundOn);
    tmp0 -= 100;
    enable.item(cSoundPC);
    enable.item(cSoundFM);
    enable.item(cSoundMIDI);
  } else {
    reset(soundOn);
    disable.item(cSoundPC);
    disable.item(cSoundFM);
    disable.item(cSoundMIDI);
  }
  if (tmp0 > 9) {
    set(4channelsound);
    set.key(FM_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
    tmp0 -= 10;
  }
  if (tmp0) {
    set(useMIDI);
    set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
  }
  [ s22 holds clock 
  block(STR2BYTE, &s22, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
  if (tmp0 > 9) {
    [ enable clock
    set(clockOn);
    tmp0 -= 10;
    enable.item(cRealClock);
    enable.item(cGameClock);
  } else {
    disable.item(cRealClock);
    disable.item(cGameClock);
  }
  if (tmp0) {
    [ enable real time
    set(realClock);
  }
  if (clockOn) {
    if (realClock) {
      [ status bar checks realtime minutes
      set.cursor.char(" l29, v3, v7, v78, v23, f9");
    } else {
      [ status bar checks gametime seconds
      set.cursor.char(" l29, v3, v7, v11, v23, f9");
    }
  } else {
    [ status bar doesn't check for time
    set.cursor.char(" l29, v3, v7, v23, f9");
  }

  [ s21 holds speed
  block(STR2BYTE, &s21, &animationInterval, 0); [ str2byte(sINPUT, vRESULT)
  
  [ s20 holds attenuation
  block(STR2BYTE, &s20, &attenuation, 0); [ str2byte(sINPUT, vRESULT)
  
  [ s12 - s19 hold instrument indices
  block(STR2BYTE, &s12, &FMInst0, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s13, &FMInst1, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s14, &FMInst2, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s15, &FMInst3, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s16, &FMInst4, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s17, &MIDIInst0, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s18, &MIDIInst1, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s19, &MIDIInst2, 0); [ str2byte(sINPUT, vRESULT)

} else {
  [ some things only happen during initial start - skip if restarting
  
  trace.info(lgc.traceinfo, 3, 10);  [ sets up the command tracer; you should
                                     [ delete this before releasing your game
  
  set.key(0, 59, cHelp);             [ F1 - Help
  set.key(0, 60, cToggleSound);      [ F2 - Sound on/off
  set.key(0, 61, cEchoLine);         [ F3 - Echo line
  set.key(0, 62, cChooseItem);       [ F4 - See object
  set.key(0, 63, cSave);             [ F5 - Save game
  set.key(0, 64, cClock);            [ F6 - Clock on/off
  set.key(0, 65, cRestore);          [ F7 - Restore game
  set.key(0, 67, cRestart);          [ F9 - Restart game
  set.key(0, 44, cQuit);             [ ALT-Z - quit game
  set.key(3, 0, cCancelLine);        [ CTRL-C - Clear input line
  set.key(5, 0, cEchoLine);          [ CTRL-E - Echo line
  set.key(9, 0, cStatus);            [ CTRL-I/TAB - inventory
  set.key(19, 0, cToggleSound);      [ CTRL-S - Sound on/off
  set.key(45, 0, cDecrescendo);      [ - - decrease volume
  set.key(43, 0, cCrescendo);        [ + - increase volume
  set.key(27, 0, cMenu);             [ ESC - activate menu
  set.key(0, 115, cSlower);          [ CTRL+LEFT - one tick slower
  set.key(0, 116, cFaster);          [ CTRL+RIGHT - one tick faster
  set.key(1, 1, cLeftClick);         [ mouse left button click
  set.key(1, 2, cRightClick);        [ mouse right button click
  set.key(1, 3, cLeftDblClick);      [ mouse left button dbl-click
  set.key(1, 4, cRightDblClick);     [ mouse right button dbl-click
  
  set.game.id("PPD"); 
                         
  [ set up screen configuration (agi's default of 0, 23, 21 is not desired)
  configure.screen(1, 22, 0);
  
  [ assign input prompt and cursor character
  set.string(inputPrompt, ">");
  set.cursor.char(cursor);
  
  [ check for configuration file
  s23 = "ppdemo.cfg";
  tmp0 = 0;
  tmp1 = &s22;
  block(READ.STRING, &s23, &tmp0, &tmp1); [ read.string(sFILENAME, vINDEX, vSTRIN)
  [ check v18 to see if file was found
  if (errorParameter == 0) {
    [ file found - string1 == sound/clock/speed
    [ nine digits -
    [ 1-2-3 are sound settings
    [ 4-5 are sound attenuation
    [ 6-7 are clock settings
    [ 8-9 are animationInterval
    [ confirm config string is 9 digits
    block(STR.LEN, &s22, &tmp0, 0); [ str.len(sINPUT, vRESULT)
    if (tmp0 != 9) {
      [ file is corrupt- load defaults
      goto(defaultfile);
    }
    [ first three digits for sound
    work1 = 3;
    block(STR.LEFT, &s22, &s23, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    work1 = 6;
    block(STR.RIGHT, &s22, &s22, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert to number
    block(STR2BYTE, &s23, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
    [ options are 3-digit number: ones = useMIDI
    [                             tens = useFMSynth
    [                             hundreds = soundOn
    if (tmp0 > 99) {
      set(soundOn);
      tmp0 -= 100;
    } else {
      reset(soundOn);
    }
    if (tmp0 > 9) {
      set(4channelsound);
      tmp0 -= 10;
      if (tmp0) {
        set(useMIDI);
        set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      } else {
        set.key(FM_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      }
    }
    [ next two digits are attenuation
    work1 = 2;
    block(STR.LEFT, &s22, &s23, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    work1 = 4;
    block(STR.RIGHT, &s22, &s22, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert to number
    block(STR2BYTE, &s23, &attenuation, 0); [ str2byte(sINPUT, vRESULT)

    [ next two digits are clock options
    work1 = 2;
    block(STR.LEFT, &s22, &s23, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    block(STR.RIGHT, &s22, &s22, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert to number
    block(STR2BYTE, &s23, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
    if (tmp0 > 9) {
      set(clockOn);
      tmp0 -= 10;
    } else {
      reset(clockOn);
    }
    if (tmp0) {
      set(realClock);
    } else {
      reset(realClock);
    }
    [ speed is last two digits
    block(STR2BYTE, &s22, &animationInterval, 0); [ str2byte(sINPUT, vRESULT)
    
    [ second string is instrument indices
    tmp0 = 1;
    tmp1 = &s22;
    s23 = "ppdemo.cfg";
    block(READ.STRING, &s23, &tmp0, &tmp1); [ read.string(sFILENAME, vINDEX, vSTRIN)
    [ get three digits at a time for the eight indices
    work1 = &FMInst0;
    :nextinst4
      work3 = 3;
      block(STR.LEFT, &s22, &s23, &work3); [ str.left(sINPUT, sRESULT, vLEN)
      [ convert to byte value
      block(STR2BYTE, &s23, &work2, 0); [ str2byte(sINPUT, vRESULT)
      [ save to correct instrument variable
      *work1 = work2;
      [ remove this value
      block(STR.LEN, &s22, &work2, 0); [ str.len(sINPUT, vRESULT)
      work2 -= 3;
      block(STR.RIGHT, &s22, &s22, &work2); [ str.left(sINPUT, sRESULT, vLEN)
      ++work1;
    if (work1 < 71) {
      goto(nextinst4);
    }

    [ get custom instrument values
    tmp0 = 1;
    tmp1 = &s17;
    s23 = "ppdemo.cfg";
    [ put values in s18-s22 so they can be copied to logic0 messages
    work1 = 1;
    work2 = 18;
    :nextinst3
      block(READ.STRING, &s23, &work1, &work2); [ read.string(sFILENAME, vINDEX, vSTRIN)
      ++work1;
      ++work2;
    if (work1 < 6) {
      goto(nextinst3);
    }
    [ confirm instrument strings are valid (correct number of characters)
    block(STR.LEN, &s18, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      s18 = m4;
    }
    block(STR.LEN, &s19, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      s19 = m4;
    }
    block(STR.LEN, &s20, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      s20 = m4;
    }
    block(STR.LEN, &s21, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      s21 = m4;
    }
    block(STR.LEN, &s22, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      s22 = m4;
    }
    
  } else {
    [ if no file found, reset v18
    errorParameter = 0;
    :defaultfile
    [ use MIDI, and set desired instruments
    set(4channelsound);
    set.key(1, 0, SET.SNDMODE); [ set.sndmode(MODE);
    set(useMIDI);
    work1 = 0;
    work2 = 56; [ Trumpet
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
    ++work1;
    work2 = 48; [ String Ensemble 1
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
    ++work1;
    work2 = 114; [ Steel Drums
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
  
    [ set speed to normal (delay=2/20ths of a second)
    animationInterval = NORMAL_SPEED;
  
    [ save a default config file
    s23 = "ppdemo.cfg";
    [ clear the string
    s22 = "                                       ";
    [ save default sound/clock/speed settings
    s22 = "111000006";
    work1 = &s22;
    block(NEW.FILE, &s23, &work1, &work1); [ new.file(sFILENAME, vSTART, vEND)
    [ save default instrument indices
    s22 = "128128128129130000000000";
    work1 = 1;
    work2 = &s22;
    block(SAVE.STRING, &s23, &work1, &work2); [ save.string(sFILENAME, vINDEX, vSTROUT)

    [ save default custom FM instruments
    work1 = 2;
    s22 = m4;
    work2 = &s22;
    :nextinst1
    block(SAVE.STRING, &s23, &work1, &work2); [ save.string(sFILENAME, vINDEX, vSTROUT)
    ++work1;
    if (work1 < 7) {
      goto(nextinst1);
    }
    [ save defaults in s18-s22 so they can be copied to logic0 messages
    work1 = 18;
    work2 = 4;
    :nextinst2
    block(SET.STRING.V, &work1, &work2, 0); [ set.string.v(vSTR, vMSG)
    ++work1;
    if (work1 < 23) {
      goto(nextinst2);
    }
  }
  
  [ enable custom status bar (lgc.Statusbar)
  if (clockOn) {
    if (realClock) {
      [ status bar checks realtime minutes
      set.cursor.char(" l29, v3, v7, v78, v23, f9");
    } else {
      [ status bar checks gametime seconds
      set.cursor.char(" l29, v3, v7, v11, v23, f9");
    }
  } else {
    [ status bar doesn't check for time
    set.cursor.char(" l29, v3, v7, v23, f9");
  }
}

[ enable debugging and tracing by default (remove when ready to release game)
set(debugging);
set(enableTrace);

[ set turbo mode
work1 = 1;
cycle.time(TOGGLE.TURBO, work1); [   toggle.turbo(vMODE);

[ set mouse parameters
set(enableDblClick);
dblClickDelay = 9; [ adjust by factor of 3 for turbo mode

[ default cursor
cursormode = C_DEFAULT;
cursoricon = C_DEFAULT;

[ save default msgbox colors
msgBoxBG = WHITE;
msgBoxFG = BLACK;
msgBoxBorder = RED;

[ default instruments for 4-channel sound
FMInst0 = 128;
FMInst1 = 128;
FMInst2 = 128;
FMInst3 = 129;
FMInst4 = 130;

[ default password for kw account
kwpassword = "Temp123!";

[ default ego parameters
egoStepSize = 1;
egoStepTime = 1;
egoCycleTime = 1;

[set the max score value for the game
maxScore = MAX_SCORE_VALUE;

[ set palette to AGI default
palette = m3;

[ select ego and parked car models

[ randomize the car body styles
work1 = &tmp0;
work2 = 0;
[ populate style variables with numbers 0 through 11
:loop1
*work1 = work2;
++work1;
++work2;
if (work1 < 232) {
  goto(loop1);
}
[ now 'scramble' them a few times to mix them up
work1 = 0;
:loop2
  [ start with first loop variable
  vStyle = &tmp0;
  :loop3
    [ choose a random loop
    random(0, 11, vRnd);
    [ swap the style value for current variable with
    [ the variable of the random style
    vRnd += 220;
    work2 = *vStyle;
    work3 = *vRnd;
    *vStyle = work3;
    *vRnd = work2;
    [ move to next style variable
    ++vStyle;
  if (vStyle < 232) {
    goto(loop3);
  }
  ++work1;
[ run the scramble code three times
if (work1 < 3) {
  goto(loop2);
}

[ store first six styles for ego car and the five parked cars
car0car1 = tmp0;
car0car1 *= 16;
car0car1 += tmp1;
car2car3 = tmp2;
car2car3 *= 16;
car2car3 += tmp3;
car4car5 = tmp4;
car4car5 *= 16;
car4car5 += tmp5;

[ initial patient locations
patient1Loc = LOC_LOBBY;
patient2Loc = LOC_GONE;
patient3Loc = LOC_GONE;
patient4Loc = LOC_GONE;
set(firstLobbyVisit);

[ casette starts on side A, first track, paused
currentTrack = -1;

return();

[ **************************************
[ MESSAGES
[ **************************************
#message 1 ">"
#message 2 cursor
#message 3 "00000000002A002A00002A2A2A00002A002A2A15002A2A2A15151515153F153F15153F3F3F15153F153F3F3F153F3F3F"
#message 4 "22215909FFFF030F020000"
