[*********************************************************************
[
[ lgc.Init: Initialization
[
[
[ This logic should only be called once, when the game first starts
[ see the 'Keyboard Controller' topic in the Help file for details on
[ key assignments.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define tmp0      v220
#define tmp1      v221
#define tmp2      v222
#define tmp3      v223
#define tmp4      v224
#define tmp5      v225
#define vRnd      v232
#define vStyle    v233

#define tmpString0 s22
#define filename   s23
[ reuse s23 as another temporary string
#define tmpString1 s23
 
[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ check for a game restart
if (gameRestarted) {
  [ for a restart, there are a few things that need to be reset
  disable.item(cDummy);
  set(enableMenu);
  reset(disableGameFunctions);
  [ when restarting, s23(tmpString1) is set to hold sound settings
  block(STR2BYTE, &tmpString1, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
  if (tmp0 > 99) {
    set(soundOn);
    tmp0 -= 100;
    enable.item(cSoundPC);
    enable.item(cSoundFM);
    enable.item(cSoundMIDI);
  } else {
    reset(soundOn);
    disable.item(cSoundPC);
    disable.item(cSoundFM);
    disable.item(cSoundMIDI);
  }
  if (tmp0 == 0) {
    musicmode = PC_SOUND;
  } else {
    set(4channelsound);
    if (tmp0 == 10) {
      musicmode = FM_SOUND;
      set.key(FM_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
    } else {
      musicmode = MIDI_SOUND;
      set(useMIDI);
      set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
    }
  }
  
  [ when restarting tmpString0 (s22) holds clock 
  block(STR2BYTE, &tmpString0, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
  if (tmp0 > 9) {
    [ enable clock
    set(clockOn);
    tmp0 -= 10;
    enable.item(cRealClock);
    enable.item(cGameClock);
  } else {
    disable.item(cRealClock);
    disable.item(cGameClock);
  }
  if (tmp0) {
    [ enable real time
    set(realClock);
  }
  if (clockOn) {
    if (realClock) {
      [ status bar checks realtime minutes
      set.cursor.char(" l29, v3, v7, v23, v99, v78, f9");
    } else {
      [ status bar checks gametime seconds
      set.cursor.char(" l29, v3, v7, v23, v99, v11, f9");
    }
  } else {
    [ status bar doesn't check for time
    set.cursor.char(" l29, v3, v7, v23, v99, f9");
  }

  [ s21 holds speed
  block(STR2BYTE, &s21, &animationInterval, 0); [ str2byte(sINPUT, vRESULT)
  
  [ s20 holds attenuation
  block(STR2BYTE, &s20, &attenuation, 0); [ str2byte(sINPUT, vRESULT)
  
  [ s12 - s19 hold instrument indices
  block(STR2BYTE, &s12, &FMInst0, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s13, &FMInst1, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s14, &FMInst2, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s15, &FMInst3, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s16, &FMInst4, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s17, &MIDIInst0, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s18, &MIDIInst1, 0); [ str2byte(sINPUT, vRESULT)
  block(STR2BYTE, &s19, &MIDIInst2, 0); [ str2byte(sINPUT, vRESULT)

} else {
  [ some things only happen during initial start
  
  trace.info(lgc.traceinfo, 3, 10);  [ sets up the command tracer; you should
                                     [ delete this before releasing your game
  [ assign controller shortcut keys
  set.key(0, 59, cHelp);             [ F1 - Help
  set.key(0, 60, cToggleSound);      [ F2 - Sound on/off
  set.key(0, 61, cEchoLine);         [ F3 - Echo line
  set.key(0, 62, cChooseItem);       [ F4 - See object
  set.key(0, 63, cSave);             [ F5 - Save game
  set.key(0, 64, cClock);            [ F6 - Clock on/off
  set.key(0, 65, cRestore);          [ F7 - Restore game
  set.key(0, 67, cRestart);          [ F9 - Restart game
  set.key(0, 44, cQuit);             [ ALT-Z - quit game
  set.key(3, 0, cCancelLine);        [ CTRL-C - Clear input line
  set.key(5, 0, cEchoLine);          [ CTRL-E - Echo line
  set.key(9, 0, cStatus);            [ CTRL-I/TAB - inventory
  set.key(19, 0, cToggleSound);      [ CTRL-S - Sound on/off
  set.key(45, 0, cDecrescendo);      [ - - decrease volume
  set.key(43, 0, cCrescendo);        [ + - increase volume
  set.key(27, 0, cMenu);             [ ESC - activate menu
  set.key(0, 115, cSlower);          [ CTRL+LEFT - one tick slower
  set.key(0, 116, cFaster);          [ CTRL+RIGHT - one tick faster
  set.key(1, 1, cLeftClick);         [ mouse left button click
  set.key(1, 2, cRightClick);        [ mouse right button click
  set.key(1, 3, cLeftDblClick);      [ mouse left button dbl-click
  set.key(1, 4, cRightDblClick);     [ mouse right button dbl-click
  
  set.game.id("PPD"); 
                         
  [ set up screen configuration (agi's default of 0, 23, 21 is not desired)
  configure.screen(1, 22, 0);
  
  [ assign input prompt and cursor character
  set.string(inputPrompt, ">");
  set.cursor.char(cursor);
  
  [ default mouse variables are sufficient, but you can change them if 
  [ desired:
  [block(CONFIGURE.MOUSE, &mX, &mY, &mBtn); [ configure.mouse(XVAR, YVAR, BTNVAR)
  
  [ check for configuration file
  filename = "ppdemo.cfg";
  tmp0 = 0;
  tmp1 = &tmpString0;
  block(READ.STRING, &filename, &tmp0, &tmp1); [ read.string(sFILENAME, vINDEX, vSTRIN)
  [ check v18 to see if file was found
  if (errorParameter == 0) {
    [ file found - tmpString0 = sound/clock/speed
    [ ten digits -
    [ 1-2-3 are sound settings
    [ 4-5 are sound attenuation
    [ 6-7 are clock settings
    [ 8-9 are animationInterval
    [ 10 is skip intro flag
    [ confirm config string is 10 digits
    block(STR.LEN, &tmpString0, &tmp0, 0); [ str.len(sINPUT, vRESULT)
    if (tmp0 != 10) {
      [ file is corrupt- load defaults
      goto(defaultfile);
    }
    [ first three digits for sound
    work1 = 3;
    block(STR.LEFT, &tmpString0, &tmpString1, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    work1 = 7;
    block(STR.RIGHT, &tmpString0, &tmpString0, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert to number
    block(STR2BYTE, &tmpString1, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
    [ options are 3-digit number: hundreds = soundOn
    [                             tens = 4channel
    [                             ones = useMIDI
    [                             (00=PC; 10=FM; 11=MIDI)
    if (tmp0 > 99) {
      set(soundOn);
      tmp0 -= 100;
    } else {
      reset(soundOn);
    }
    if (tmp0 == 0) {
      musicmode = PC_SOUND;
    } else {
      set(4channelsound);
      if (tmp0 == 10) {
        musicmode = FM_SOUND;
        set.key(FM_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      } else {
        musicmode = MIDI_SOUND;
        set(useMIDI);
        set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      }
    }
    [ next two digits are attenuation
    work1 = 2;
    block(STR.LEFT, &tmpString0, &tmpString1, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    work1 = 5;
    block(STR.RIGHT, &tmpString0, &tmpString0, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert to number (4channel value)
    block(STR2BYTE, &tmpString1, &attenuation, 0); [ str2byte(sINPUT, vRESULT)
    [ next two digits are clock options
    work1 = 2;
    block(STR.LEFT, &tmpString0, &tmpString1, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    work1 = 3;
    block(STR.RIGHT, &tmpString0, &tmpString0, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert to number
    block(STR2BYTE, &tmpString1, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
    if (tmp0 > 9) {
      set(clockOn);
      tmp0 -= 10;
    } else {
      reset(clockOn);
    }
    if (tmp0) {
      set(realClock);
    } else {
      reset(realClock);
    }
    [ next two digits are speed
    work1 = 2;
    block(STR.LEFT, &tmpString0, &tmpString1, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    work1 = 1;
    block(STR.RIGHT, &tmpString0, &tmpString0, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    [ convert speed to number
    block(STR2BYTE, &tmpString1, &animationInterval, 0); [ str2byte(sINPUT, vRESULT)
    
    [ last digit is skip intro flag
    [ convert to number
    block(STR2BYTE, &tmpString0, &tmp0, 0); [ str2byte(sINPUT, vRESULT)
    if (tmp0) {
      set(skipIntro);
    } else {
      reset(skipIntro);
    }
    
    [ second string is instrument indices
    tmp0 = 1;
    tmp1 = &tmpString0;
    filename = "ppdemo.cfg";
    block(READ.STRING, &filename, &tmp0, &tmp1); [ read.string(sFILENAME, vINDEX, vSTRIN)
    [ get three digits at a time for the eight indices
    work1 = &FMInst0;
    :nextinst4
      work3 = 3;
      block(STR.LEFT, &tmpString0, &tmpString1, &work3); [ str.left(sINPUT, sRESULT, vLEN)
      [ convert to byte value
      block(STR2BYTE, &tmpString1, &work2, 0); [ str2byte(sINPUT, vRESULT)
      [ save to correct instrument variable
      *work1 = work2;
      [ remove this value
      block(STR.LEN, &tmpString0, &work2, 0); [ str.len(sINPUT, vRESULT)
      work2 -= 3;
      block(STR.RIGHT, &tmpString0, &tmpString0, &work2); [ str.left(sINPUT, sRESULT, vLEN)
      ++work1;
    if (work1 < 71) {
      goto(nextinst4);
    }
    [ get custom instrument values
    filename = "ppdemo.cfg";
    [ custom instruments stored in s7-s11
    work1 = 2;
    work2 = &custInst0;
    :nextinst3
      block(READ.STRING, &filename, &work1, &work2); [ read.string(sFILENAME, vINDEX, vSTRIN)
      ++work1;
      ++work2;
    if (work1 < 6) {
      goto(nextinst3);
    }
    [ confirm instrument strings are valid (correct number of characters)
    block(STR.LEN, &custInst0, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      custInst0 = m4;
    }
    block(STR.LEN, &custInst1, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      custInst1 = m4;
    }
    block(STR.LEN, &custInst2, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      custInst2 = m4;
    }
    block(STR.LEN, &custInst3, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      custInst3 = m4;
    }
    block(STR.LEN, &custInst4, &work1, 0); [ str.len(sINPUT, vRESULT)
    if (work1 != 22) {
      [ use default
      custInst4 = m4;
    }
    [ load appropriate instruments
    if (4channelsound) {
      if (useMIDI) {
        [ set MIDI instruments
        work1 = 0;
        set.key(&work1, &MIDIInst0, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
        ++work1;
        set.key(&work1, &MIDIInst1, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
        ++work1;
        set.key(&work1, &MIDIInst2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      } else {
        [ set FM instruments
        work1 = 0;
        :setFMinst
          work2 = &FMInst0;
          work2 += work1;
          work2 = *work2;
          if (work2 > 130) {
            work2 -= 124;
            set.key(&work1, &work2, CUSTOM.INST); [ custom.inst(vCHANNEL, vENVDATASTR)
          } else {
            set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
          }
        if (work1 < 4) {
          ++work1;
          goto(setFMinst);
        }
      }
    }
    [ not a first run
    reset(initialRun);
  } else {
    [ reset v18
    errorParameter = 0;
    [ if no file found, use defaults
    :defaultfile
    [ default instruments for 4-channel sound (midi defaults are 0)
    FMInst0 = 128;
    FMInst1 = 128;
    FMInst2 = 128;
    FMInst3 = 129;
    FMInst4 = 130;
    [ default custom instruments
    custInst0 = "22215909FFFF030F020000";
    custInst1 = "22215909FFFF030F020000";
    custInst2 = "22215909FFFF030F020000";
    custInst3 = "2F200000FFFF0F0F00030E";
    custInst4 = "22242100C0C00C0C000000";
    [ enable MIDI, and set desired instruments
    set(4channelsound);
    set(useMIDI);
    set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE);
    musicmode = MIDI_SOUND;
    work1 = 0;
    work2 = 0;
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
    ++work1;
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
    ++work1;
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
  
    [ set speed to normal (delay=2/20ths of a second)
    animationInterval = NORMAL_SPEED;
  
    [ don't skip intro
    reset(skipIntro);
    
    [ save a default config file
    filename = "ppdemo.cfg";
    [ clear a temp string
    tmpString0 = "                                       ";
    [ save default sound/clock/speed/intro settings
    tmpString0 = "1110000060";
    work1 = &tmpString0;
    block(NEW.FILE, &filename, &work1, &work1); [ new.file(sFILENAME, vSTART, vEND)
    [ save default instrument indices
    tmpString0 = "128128128129130000000000";
    work1 = 1;
    work2 = &tmpString0;
    block(SAVE.STRING, &filename, &work1, &work2); [ save.string(sFILENAME, vINDEX, vSTROUT)

    [ save default custom FM instruments
    work1 = 2;
    tmpString0 = "                        ";
    tmpString0 = m4;
    work2 = &tmpString0;
    :nextinst1
    block(SAVE.STRING, &filename, &work1, &work2); [ save.string(sFILENAME, vINDEX, vSTROUT)
    ++work1;
    if (work1 < 7) {
      goto(nextinst1);
    }
    [ save defaults in s18-s22 so they can be copied to logic0 messages
    work1 = 18;
    work2 = 4;
    :nextinst2
    block(SET.STRING.V, &work1, &work2, 0); [ set.string.v(vSTR, vMSG)
    ++work1;
    if (work1 < 23) {
      goto(nextinst2);
    }
    
    [ first run of game
    set(initialRun);
  }
  
  [ enable custom status bar (lgc.Statusbar)
  if (clockOn) {
    if (realClock) {
      [ status bar checks realtime minutes
      set.cursor.char(" l27, v3, v7, v23, v99, v78, f9");
    } else {
      [ status bar checks gametime seconds
      set.cursor.char(" l27, v3, v7, v23, v99, v11, f9");
    }
  } else {
    [ status bar doesn't check for time
    set.cursor.char(" l27, v3, v7, v23, v99, f9");
  }
}

[ enable debugging and tracing by default (remove when ready to release game)
set(debugging);
set(enableTrace);

[ set turbo mode (regular mode is never used in the demo)
work1 = TURBO_SPEED;
cycle.time(TOGGLE.TURBO, work1); [   toggle.turbo(vMODE);
set(turboMode);

[ set mouse parameters
set(enableDblClick);
dblClickDelay = 9; [ adjust by factor of 3 for turbo mode

[ default cursor
cursormode = C_DEFAULT;
cursoricon = C_DEFAULT;

[ set default msgbox colors
msgBoxBG = WHITE;
msgBoxFG = BLACK;
msgBoxBorder = RED;

[ default password for kw account
kwpassword = "Temp123!";

[ default ego parameters
egoStepSize = 1;
egoStepTime = 1;
egoCycleTime = 1;

[set the max score value for the game
maxScore = MAX_SCORE_VALUE;

[ set palette to AGI default
palette = m3;

[ select ego and parked car models

[ randomize the car body styles
work1 = &tmp0;
work2 = 0;
[ populate style variables with numbers 0 through 11
:loop1
*work1 = work2;
++work1;
++work2;
if (work1 < 232) {
  goto(loop1);
}
[ now 'scramble' them a few times to mix them up
work1 = 0;
:loop2
  [ start with first loop variable
  vStyle = &tmp0;
  :loop3
    [ choose a random loop
    random(0, 11, vRnd);
    [ swap the style value for current variable with
    [ the variable of the random style
    vRnd += 220;
    work2 = *vStyle;
    work3 = *vRnd;
    *vStyle = work3;
    *vRnd = work2;
    [ move to next style variable
    ++vStyle;
  if (vStyle < 232) {
    goto(loop3);
  }
  ++work1;
[ run the scramble code three times
if (work1 < 3) {
  goto(loop2);
}

[ store first six styles for ego car and the five parked cars
car0car1 = tmp0;
car0car1 *= 16;
car0car1 += tmp1;
car2car3 = tmp2;
car2car3 *= 16;
car2car3 += tmp3;
car4car5 = tmp4;
car4car5 *= 16;
car4car5 += tmp5;

[ initial patient locations
patient1Loc = LOC_LOBBY;
patient2Loc = LOC_GONE;
patient3Loc = LOC_GONE;
patient4Loc = LOC_GONE;
set(firstLobbyVisit);

[ casette starts on side A, first track, paused
currentTrack = -1;

[ start safe combo on a random number
random(0, 39, comboNumber);

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 ">"
#message 2 cursor
#message 3 "00000000002A002A00002A2A2A00002A002A2A15002A2A2A15151515153F153F15153F3F3F15153F153F3F3F153F3F3F"
#message 4 "22215909FFFF030F020000"
#message 5 "2F200000FFFF0F0F00030E"
#message 6 "22242100C0C00C0C000000"