[ ********************************************************************
[
[ lgc.Init: Initialization
[
[
[ This logic should only be called once, when the game first starts
[ see the 'Keyboard Controller' topic in the Help file for details on
[ key assignments.
[
[ ********************************************************************

if (gameRestarted) {
  [ for a restart, there are a few things that need to be reset
  disable.item(cDummy);
  set(enableMenu);
  reset(disableGameFunctions);
} else {
  [ some things only happen during initial start - skip if restarting
  
  trace.info(lgc.traceinfo, 3, 10);  [ sets up the command tracer; you should
                                     [ delete this before releasing your game
                                     
  set.key(0, 59, cHelp);             [ F1 - Help
  set.key(0, 60, cToggleSound);      [ F2 - Sound on/off
  set.key(0, 61, cEchoLine);         [ F3 - Echo line
  set.key(0, 62, cShowObj);          [ F4 - See object
  set.key(0, 63, cSave);             [ F5 - Save game
  set.key(0, 64, cClock);            [ F6 - Clock on/off
  set.key(0, 65, cRestore);          [ F7 - Restore game
  set.key(0, 67, cRestart);          [ F9 - Restart game
  set.key(0, 18, cShowEgo);          [ ALT-E - Displays info about EGO
  set.key(0, 23, cObjInfo);          [ ALT-I - Shows information about screen objects
  set.key(0, 50, cShowMem);          [ ALT-M - Displays heapsize
  set.key(0, 25, cShowPriority);     [ ALT-P - Displays priority screen
  set.key(0, 47, cVersion);          [ ALT-V - Shows game version info
  set.key(0, 45, cXY);               [ ALT-X - Show Coordinates
  set.key(0, 44, cQuit);             [ ALT-Z - quit game
  set.key(3, 0, cCancelLine);        [ CTRL-C - Clear input line
  set.key(5, 0, cEchoLine);          [ CTRL-E - Echo line
  set.key(9, 0, cStatus);            [ CTRL-I/TAB - inventory
  set.key(10, 0, cInitJoy);          [ CTRL-J - Configure joystick
  set.key(18, 0, cToggleMonitor);    [ CTRL-R - Switches between RGB and CGA graphics
  set.key(19, 0, cToggleSound);      [ CTRL-S - Sound on/off
  set.key(45, 0, cDecrescendo);      [ - - decrease volume
  set.key(43, 0, cCrescendo);        [ + - increase volume
  set.key(27, 0, cMenu);             [ ESC - activate menu
  
  set.key(1, 1, cLeftClick);         [ mouse left button click
  set.key(1, 2, cRightClick);        [ mouse right button click
  set.key(1, 3, cLeftDblClick);      [ mouse left button dbl-click
  set.key(1, 4, cRightDblClick);     [ mouse right button dbl-click
  
  set.game.id("PPD"); 
                         
  [ set up screen configuration (agi's default of 0, 23, 21 is not desired)
  configure.screen(1, 22, 0);
  
  [ assign input prompt and cursor character
  set.string(inputPrompt, ">");
  set.cursor.char(cursor);
  
  [ enable debug mode via ALT+D keypress (remove when ready to release game)
  set.key(0, 32, cDebug);
}

[ enable debugging by default (remove when ready to release game)
set(debugging);

[ set mouse parameters
set(enableDblClick);
dblClickDelay = 3;

[ default cursor
cursormode = C_DEFAULT;
cursoricon = C_DEFAULT;

[ save default msgbox colors
msgBoxBG = WHITE;
msgBoxFG = BLACK;
msgBoxBorder = RED;

[ default instruments for 4-channel sound
FMInst0 = 128;
FMInst1 = 128;
FMInst2 = 128;
FMInst3 = 129;
FMInst4 = 130;


[ default ego parameters
egoStepSize = 1;
egoStepTime = 1;
egoCycleTime = 1;

[set the max score value for the game
maxScore = MAX_SCORE_VALUE;

[ set speed to normal (delay=2/20ths of a second)
animationInterval = NORMAL_SPEED; 

[ set palette to AGI default
palette = m3;

[ enable custom status bar
[ run logic 13(lgc.Statusbar)
[ check for score (v3), max score (v7), current minute(v78) and sound status (f9)
set.cursor.char(" l29,  v3, v7, v78, f9");

[ select ego and parked car models
#define tmp0    v220
#define tmp1    v221
#define tmp2    v222
#define tmp3    v223
#define tmp4    v224
#define tmp5    v225
#define vRnd    v232
#define vStyle  v233

[ randomize the car body styles
work1 = &tmp0;
work2 = 0;
[ populate style variables with numbers 0 through 11
:loop1
*work1 = work2;
++work1;
++work2;
if (work1 < 232) {
  goto(loop1);
}
[ now 'scramble' them a few times to mix them up
work1 = 0;
:loop2
  [ start with first loop variable
  vStyle = &tmp0;
  :loop3
    [ choose a random loop
    random(0, 11, vRnd);
    [ swap the style value for current variable with
    [ the variable of the random style
    vRnd += 220;
    work2 = *vStyle;
    work3 = *vRnd;
    *vStyle = work3;
    *vRnd = work2;
    [ move to next style variable
    ++vStyle;
  if (vStyle < 232) {
    goto(loop3);
  }
  ++work1;
[ run the scramble code three times
if (work1 < 3) {
  goto(loop2);
}

[ store first six styles for ego car and the five parked cars
car0car1 = tmp0;
car0car1 *= 16;
car0car1 += tmp1;
car2car3 = tmp2;
car2car3 *= 16;
car2car3 += tmp3;
car4car5 = tmp4;
car4car5 *= 16;
car4car5 += tmp5;

[ initial patient locations
patient1Loc = LOC_LOBBY;
patient2Loc = LOC_GONE;
patient3Loc = LOC_GONE;
patient4Loc = LOC_GONE;
set(firstLobbyVisit);

return();

[ **************************************
[ MESSAGES
[ **************************************
#message 1 ">"
#message 2 cursor
#message 3 "00000000002A002A00002A2A2A00002A002A2A15002A2A2A15151515153F153F15153F3F3F15153F153F3F3F153F3F3F"