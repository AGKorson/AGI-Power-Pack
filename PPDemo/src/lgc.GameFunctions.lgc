[ ********************************************************************
[
[ lgc.GameFunctions: Game-specific functions
[
[ You should use this logic to perform any game specific functions, 
[ such as counting down timers, etc and processing player input 
[ related to the game (such as examining/using inventory items) and 
[ any other things that are required in several rooms that you don't
[ want to duplicate in each room.
[
[ This logic is called from logic 0, on every cycle, unless 
[ disableGameFunctions is set.
[
[ Sierra did not use a separate logic for all this - they just did it
[ all from logic 0. I find it is neater this way, as you can keep your
[ game specific processing separate from other system-related things
[ (although these may require some modification for your game). Also,
[ this makes logic 0 easier to manage.
[
[ ********************************************************************

#define entryDelay v240

#define tmpStr1    s20
#define tmpStr2    s21

[ *************************************************
[ put all non-input functions that are not
[ room-specific here
[ *************************************************

[ convert game time into 20 minute timer intervals
if (elapsedMinutes != oldMinutes) {
  oldMinutes = elapsedMinutes;
  ++patientClock;
  if (patientClock == 20) {
    patientClock = 0;
  }
  [ update patient locations 
  if (currentRoom != rm.Lobby) {
    if (patientClock > 0 && patientClock < 6) {
      patient2Loc = LOC_LOBBY;
    } else {
      if (patientClock > 5 && patientClock < 10) {
        patient2Loc = LOC_EXAM;
      } else {
        patient2Loc = LOC_GONE;
      }
    }
    if (patientClock > 4 && patientClock < 12) {
      patient3Loc = LOC_LOBBY;
    } else {
      if (patientClock > 11 && patientClock < 15) {
        patient3Loc = LOC_EXAM;
      } else {
        patient3Loc = LOC_GONE;
      }
    }
    if (patientClock > 10 && patientClock < 16) {
      patient4Loc = LOC_LOBBY;
    } else {
      if (patientClock > 15 && patientClock < 19) {
        patient4Loc = LOC_EXAM;
      } else {
        patient4Loc = LOC_GONE;
      }
    }
  }
}

[ check for cancel click2move
if (controller(cRightClick)) {
  if (click2move) {
    egoDir = 0;
    set.dir(ego, egoDir); 
  }
}

[ check generic new room actions
if (newRoom) {
  [ check for walkman
  if (currentTrack > 0 && currentTrack < 128 && currentRoom != rm.Lobby) {
    [ load it, and start it
    set(noScript);
    block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
    work1 = &musicDone;
    block(SND.V.FN, PLAY.SOUND.V, &currentTrack, &work1); [ play.sound(vSNDNUM, vDONEFLAG)
    reset(noScript);
  }
}

[ **************************************
[ PROCESS PLAYER INPUT
[ **************************************

[ check for cussing
work1 = 0;
:loop1
get.string(tmpStr1, m1, -1, 0, 0);
work2 = 70; ['F'
[ pass starting pos via vRESULT
work3 = work1;
block(INSTR, &tmpStr1, &work2, &work3); [ instr(sINPUT, vCHAR, vRESULT);
if (work3 == 255) {
  work2 = 102; [ 'f'
  work3 = work1;
  block(INSTR, &tmpStr1, &work2, &work3); [ instr(sINPUT, vCHAR, vRESULT);
}
[ save result in work1
work1 = work3;
[ if letter 'f' is found
if (work1 < 255) {
  [ check for match against 'fuck' by getting 
  [ 'f' plus next three letters
  work2 = 4;
  block(STR.MID, &tmpStr1, &work1, &work2); [ str.mid(sINPUT, vPOS, vLEN);
  tmpStr2 = "fuck";
  [ advance position so loop can look for next 'f'
  ++work1;
  if (compare.strings(tmpStr1, tmpStr2)) {
    print("Watch your language, you son of a bitch!");
    get.string(tmpStr1, m1, -1, 0, 0);
    block(STR.LEFT, &tmpStr1, &tmpStr1, &work1); [ str.left(sINPUT, sRESULT, vLEN);
    tmpStr2 = "***";
    block(STR.CONCAT, &tmpStr1, &tmpStr2, 0);
    set.string(SET.INPUT, "%s20");
  } else {
    [ check rest of line
    goto(loop1);
  }
}

[ now check for any controllers that may have been activated
if (controller(cAbout)) {
  print(gameAboutMsg);
}

[ sound volume controls
if (controller(cCrescendo) && attenuation > 0 && soundOn) {
  [ to increase volume, lower sound attenuation variable
  if (attenuation > 0) {
    --attenuation;
    [ update the config file
    call(lgc.SaveOptions);
  }
}
if (controller(cDecrescendo) && attenuation < 63 && soundOn) {
  [ to decrease volume, raise sound attenuation variable
  if (4channelsound) {
    work1 = 63;
  } else {
    work1 = 15;
  }
  if (attenuation < work1) {
    ++attenuation;
    [ update the config file
    call(lgc.SaveOptions);
  }
}

[ if debug mode is requested
if (said("debug")) {
  [ if not in debug mode yet
  if (!debugging) {
    [ activate it
    set(debugging);
    [ display the game-version message
    print(gameVersionMsg); 
    [ and interpreter version
    version();
    [ load debug logic into memory
    load.logics(lgc.Debug);
  }
}

[ save game
if ((controller(cSave) || 
     said("save", "game") || 
     said("save"))) {
  [ because patient views aren't loaded, need to erase them
  [ prior to saving; then redraw afterward; when restoring,
  [ the views need to be loaded BEFORE the patients are redrawn
  if (currentRoom == rm.Lobby) {
    #define oPatient2        o5
    #define oPatient3        o6
    #define oPatient4        o7
    [ erase patients 2,3,4
    erase(oPatient2);
    erase(oPatient3);
    erase(oPatient4);
  } 
  save.game();
  if (currentRoom == rm.Lobby) {
    [ redraw patients, if currently in the room
    if (patient2Loc != LOC_GONE) {
      draw(oPatient2);
    }
    if (patient3Loc != LOC_GONE) {
      draw(oPatient3);
    }
    if (patient4Loc != LOC_GONE) {
      draw(oPatient4);
    }
  }
}

[ restore game
if ((controller(cRestore) || 
     said("restore", "game") || 
     said("restore"))) {
  restore.game();
}

[ restart game
if ((controller(cRestart) || 
     said("restart", "game") || 
     said("restart"))) {
  call(lgc.CacheOptions);
  restart.game();
}

[ ask for help
if ((controller(cHelp) || 
     said("help"))) {
  call(lgc.GameHelp);
}

[ echo line draws previous input on input line
if (controller(cEchoLine)) {
  echo.line();
}

[ clear the input line
if (controller(cCancelLine)) {
  cancel.line();
}

[ pause game (showing menu is another 
[ way to pause the game)
if ((controller(cPause) || 
     said("pause", "game") || 
     said("pause"))) {
  pause();
}

[ check player's current inventory
if ((controller(cStatus) || 
     said("inventory"))) {
  [ disable selection of inventory items
  reset(enableItemSelect);
  status();
}

[ use or examine an item
if (controller(cChooseItem)) {
  [ enable section of inventory items
  set(enableItemSelect);
  [ show inventory screen
  status();
  
  [ selectedItem is set to 255 if ESC is pressed
  [ in the inventory screen
  if (selectedItem > 0 && selectedItem != 255) {
    [ use or examine selected item
    if (cursormode == C_USE) {
      [ magazine
      if (selectedItem == 1) {
        [ same as 'read magazine'
        goto(readmag);
      }
      [ disk
      if (selectedItem == 2) {
        [ disk can only be used in control room
        if (currentRoom == rm.ControlRoom) {
          cursormode = C_DISK;
          status.line.off();
          prevent.input();
        } else {
          print("There is nothing you can do with the disk here.");
        }
      }
      [ keyfob
      if (selectedItem == 3) {
        [ disk can only be used in parking lot
        if (currentRoom == rm.ParkingLot) {
          if (carLocked) {
            print("Using your keyfob, you unlock your car door.");
            reset(carLocked);
            work1 = -2;
            call(lgc.ScoreHandler);
          } else {
            print("Thinking it's best not to take any chances, "
                  "you hit the lock button on your keyfob to "
                  "prevent your car from being stolen.");
            set(carLocked);
            work1 = 2;
            call(lgc.ScoreHandler);
          }
        } else {
          print("You are too far fromy your vehicle for the keyfob to work.");
        }
      }
      [ cassette
      if (selectedItem == 4) {
        [ TODO: load cassette into walkman
      }
      [ walkman
      if (selectedItem == 5) {
        if (currentRoom == rm.Lobby && warnWalkman) {
          print("The receptionist asked you to not play your music in the lobby.");
        } else {
          [ TODO: use the walkman
          if (currentTrack >0 && currentTrack < 128) {
            [ stop and unload current track; it will get restarted
            [ after showing the walkman
            stop.sound();
            block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
          }
            [ show a closeup of walkman, player can press play/stop/ff/rewind/eject
          call(lgc.Walkman);
          call(lgc.RedrawRoom);
          
[          [ for now, just play the cassette
[          set(cassetteLoaded);
[          get.num("Side? (0=A, 1=B): ", work1);
[          if (work1) {
[            set(cassetteSideB);
[            currentTrack = 42;
[          } else {
[            reset(cassetteSideB);
[            currentTrack = 1;
[          }
[          [ if in lobby, don't actually play; receptionist will tell player to stop
[          if (currentRoom != rm.Lobby) {
[            set(noScript);
[            block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
[            work1 = &musicDone;
[            block(SND.V.FN, PLAY.SOUND.V, &currentTrack, &work1); [ play.sound(vSNDNUM, vDONEFLAG)
[            reset(noScript);
[          }
        }
      }
      [ memo
      if (selectedItem == 6) {
        [ read the memo
        goto(readMemo);
      }
      [ post-it note
      if (selectedItem == 7) {
        [ read the note
        selectedItem += 100;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
      [ BaDASS manual
      if (selectedItem == 8) {
        [ read the manual
        goto(readManual);
      }
      [ notebook
      if (selectedItem == 9) {
        [ read the notebook
        goto(readNotebook);
      }
      [ folder
      if (selectedItem == 10) {
        selectedItem += 100;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
      [ scroll
      if (selectedItem == 11) {
        goto(readScroll);
      }
      [ music sheet
      if (selectedItem == 12) {
        selectedItem += 100;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
      [ PQ idea list
      if (selectedItem == 13) {
        call(lgc.PQList);
        call(lgc.RedrawRoom);
      }
    } else {
      selectedItem += 100;
      show.obj.v(selectedItem);
[      [ some items get a second, detailed look
[      [  post-it note, folder, music sheet
[      if ((selectedItem == 107 || selectedItem == 110 || 
[           selectedItem == 112)) {
[        call(lgc.ExamineItem);
[        call(lgc.RedrawRoom);
[      }
      [ some items get additional information
      if (selectedItem == 101) {
        [ magazine
        print("The articles are, of course, outdated, but probably "
              "very interesting as nostalgia items.");
      }
      if (selectedItem == 111) {
        [ scroll
        print("It was probably used by the original development "
              "team when KQIII was first designed.");
      }
    }
  }
}

[ quit the game
if ((controller(cQuit) || 
     said("quit", "game") || 
     said("quit"))) {
  stop.sound();
  quit(0);
}

[ if player hasn't provided input or if match already found, no need
[ to do rest of said tests
if ((!haveInput || haveMatch)) {
  goto(done);
}
  
[ put all generic said tests (those that apply in all rooms) here
[ read memo
if (said("read", "memo")) {
  if (has("memo")) {
    :readMemo
    call(txt.Memo);
  } else {
    print("You don't have it.");
  }
}
[ read magazine
if (said("read", "magazine")) {
  if (has("magazine")) {
    :readmag
    call(lgc.ReadMagazine);
    call(lgc.RedrawRoom);
  } else {
    print("You don't have it.");
  }
}
[ read manual
if (said("read", "manual")) {
  if (has("BaDASS manual")) {
    :readManual
    call(lgc.ReadManual);
    call(lgc.RedrawRoom);
  } else {
    print("You don't have it.");
  }
}
[ read scroll
if (said("read", "scroll")) {
  if (has("scroll")) {
    :readScroll
    call(lgc.ReadScroll);
    call(lgc.RedrawRoom);
  } else {
    print("You don't have it.");
  }
}
  
[ read notebook
if (said("read", "notebook")) {
  if (has("notebook")) {
    :readNotebook
    call(lgc.ReadNotebook);
    call(lgc.RedrawRoom);
  } else {
    print("You don't have it.");
  }
}
  
[ if player says any dirty words
if ((said("bad word", "rol") || 
     said("anyword", "bad word", "rol") || 
     said("anyword", "anyword", "bad word", "rol") || 
     said("anyword", "anyword", "anyword", "bad word", "rol") || 
     said("anyword", "anyword", "anyword", "anyword", "bad word", "rol") || 
     said("anyword", "anyword", "anyword", "anyword", "anyword", "bad word", "rol"))) {
  ++badWordCount;
  if (badWordCount == 1) {
    [ first warning
    print("I am going to tell on you!");
  }
  if (badWordCount == 2) {
    [second warning
    print("Don't say anymore words like that!");
  }
  if (badWordCount == 3) {
    [ no more warnings
    print("Don't say I didn't warn you.");
    quit(1);
  }
}


[ look anything
if ((said("look", "anyword") || said("look", "anyword", "rol"))) {
  print("What? Where?");
}


[ get anything
if ((said("get", "anyword") || said("get", "anyword", "rol"))) {
  print("You can't get that here!");
}

[ use anything
if ((said("use", "anyword") || said("use", "anyword", "rol"))) {
  print("What do you want me to do with it?");
}

:done
return();

[ **************************************
[ MESSAGES
[ **************************************
#message 1 "I am going to tell on you!"
#message 2 "Don't say anymore words like that!"
#message 3 "Don't say I didn't warn you."
#message 4 "You don't have it."
#message 5 "What? Where?"
#message 6 "You can't get that here!"
#message 7 "What do you want me to do with it?"
#message 8 "Uh oh. Did you forget to do something in the closet before going downstairs?"
#message 11 gameAboutMsg
#message 12 gameVersionMsg