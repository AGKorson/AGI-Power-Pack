[ ********************************************************************
[
[ lgc.GameFunctions: Game-specific functions
[
[ You should use this logic to perform any game specific functions, 
[ such as counting down timers, etc and processing player input 
[ related to the game (such as examining/using inventory items) and 
[ any other things that are required in several rooms that you don't
[ want to duplicate in each room.
[
[ This logic is called from logic 0, on every cycle, unless 
[ disableGameFunctions is set.
[
[ Sierra did not use a separate logic for all this - they just did it
[ all from logic 0. I find it is neater this way, as you can keep your
[ game specific processing separate from other system-related things
[ (although these may require some modification for your game). Also,
[ this makes logic 0 easier to manage.
[
[ ********************************************************************

#define entryDelay v240

#define tmpStr1    s20
#define tmpStr2    s21

[ *************************************************
[ put all non-input functions that are not
[ room-specific here
[ *************************************************

[ convert game time into 20 minute timer intervals
if (elapsedMinutes != oldMinutes) {
  oldMinutes = elapsedMinutes;
  ++patientClock;
  if (patientClock == 20) {
    patientClock = 0;
  }
  [ update patient locations 
  if (currentRoom != rm.Lobby) {
    if (patientClock > 0 && patientClock < 6) {
      patient2Loc = LOC_LOBBY;
    } else {
      if (patientClock > 5 && patientClock < 10) {
        patient2Loc = LOC_EXAM;
      } else {
        patient2Loc = LOC_GONE;
      }
    }
    if (patientClock > 4 && patientClock < 12) {
      patient3Loc = LOC_LOBBY;
    } else {
      if (patientClock > 11 && patientClock < 15) {
        patient3Loc = LOC_EXAM;
      } else {
        patient3Loc = LOC_GONE;
      }
    }
    if (patientClock > 10 && patientClock < 16) {
      patient4Loc = LOC_LOBBY;
    } else {
      if (patientClock > 15 && patientClock < 19) {
        patient4Loc = LOC_EXAM;
      } else {
        patient4Loc = LOC_GONE;
      }
    }
  }
}

[ check for cancel click2move
if (controller(cRightClick)) {
  if (click2move) {
    egoDir = 0;
    set.dir(ego, egoDir); 
  }
}

[ **************************************
[ PROCESS PLAYER INPUT
[ **************************************

[ check for cussing
work1 = 0;
:loop1
get.string(tmpStr1, m1, -1, 0, 0);
work2 = 70; ['F'
[ pass starting pos via vRESULT
work3 = work1;
block(INSTR, &tmpStr1, &work2, &work3); [ instr(sINPUT, vCHAR, vRESULT);
if (work3 == 255) {
  work2 = 102; [ 'f'
  work3 = work1;
  block(INSTR, &tmpStr1, &work2, &work3); [ instr(sINPUT, vCHAR, vRESULT);
}
[ save result in work1
work1 = work3;
[ if letter 'f' is found
if (work1 < 255) {
  [ check for match against 'fuck' by getting 
  [ 'f' plus next three letters
  work2 = 4;
  block(STR.MID, &tmpStr1, &work1, &work2); [ str.mid(sINPUT, vPOS, vLEN);
  tmpStr2 = "fuck";
  [ advance position so loop can look for next 'f'
  ++work1;
  if (compare.strings(tmpStr1, tmpStr2)) {
    print("Watch your language, you son of a bitch!");
    get.string(tmpStr1, m1, -1, 0, 0);
    block(STR.LEFT, &tmpStr1, &tmpStr1, &work1); [ str.left(sINPUT, sRESULT, vLEN);
    tmpStr2 = "***";
    block(STR.CONCAT, &tmpStr1, &tmpStr2, 0);
    set.string(SET.INPUT, "%s20");
  } else {
    [ check rest of line
    goto(loop1);
  }
}

[ ---------------------------------------------
if (said("test", "sound")) {
  load.sound(s.Tone1);
  load.sound(s.Tone2);
  load.sound(s.Tone3);
  load.sound(s.Tone4);
  load.sound(s.Tone5);
  load.sound(s.Tone6);
  load.sound(s.Tone7);
  load.sound(s.Tone8);
  load.sound(s.Tone9);
  load.sound(s.Tone0);
  load.sound(s.ToneStar);
  load.sound(s.TonePound);
  v242 = 1;
  set(f243);
  reset(useMIDI);
}
if (v242 == 1 && f243) {
  sound(s.Tone1, f243);
  ++v242;
}
if (v242 == 2 && f243) {
  sound(s.Tone2, f243);
  ++v242;
}
if (v242 == 3 && f243) {
  sound(s.Tone3, f243);
  ++v242;
}
if (v242 == 4 && f243) {
  sound(s.Tone4, f243);
  ++v242;
}
if (v242 == 5 && f243) {
  sound(s.Tone5, f243);
  ++v242;
}
if (v242 == 6 && f243) {
  sound(s.Tone6, f243);
  ++v242;
}
if (v242 == 7 && f243) {
  sound(s.Tone7, f243);
  ++v242;
}
if (v242 == 8 && f243) {
  sound(s.Tone8, f243);
  ++v242;
}
if (v242 == 9 && f243) {
  sound(s.Tone9, f243);
  ++v242;
}
if (v242 == 10 && f243) {
  sound(s.ToneStar, f243);
  ++v242;
}
if (v242 == 11 && f243) {
  sound(s.Tone0, f243);
  ++v242;
}
if (v242 == 12 && f243) {
  sound(s.TonePound, f243);
  ++v242;
}
[-----------------------------------

[ now check for any controllers that may have been activated
if (controller(cAbout)) {
  print(gameAboutMsg);
}

[ sound volume controls
if (controller(cCrescendo) && attenuation > 0 && soundOn) {
  [ to increase volume, lower sound attenuation variable
  --attenuation;
}
if (controller(cDecrescendo) && attenuation < 63 && soundOn) {
  [ to decrease volume, raise sound attenuation variable
  ++attenuation;
  if (!4channelsound && attenuation > 15) {
    [ max for single channel is 15
    attenuation = 15;
  }
}

[ if debug mode is requested
if (said("debug")) {
  [ if not in debug mode yet
  if (!debugging) {
    [ activate it
    set(debugging);
    [ display the game-version message
    print(gameVersionMsg); 
    [ and interpreter version
    version();
    [ load debug logic into memory
    load.logics(lgc.Debug);
  }
}

[ save game
if ((controller(cSave) || 
     said("save", "game") || 
     said("save"))) {
  [ if in lobby, need to erase patient2 if currently visible
  if (currentRoom == rm.Lobby && f237) {
    erase(o5);
  }
  save.game();
  if (currentRoom == rm.Lobby && f237) {
    draw(o5);
  }
}

[ restore game
if ((controller(cRestore) || 
     said("restore", "game") || 
     said("restore"))) {
  restore.game();
}

[ restart game
if ((controller(cRestart) || 
     said("restart", "game") || 
     said("restart"))) {
  call(lgc.CacheOptions);
  restart.game();
}

[ ask for help
if ((controller(cHelp) || 
     said("help"))) {
  call(lgc.GameHelp);
}

[ echo line draws previous input on input line
if (controller(cEchoLine)) {
  echo.line();
}

[ clear the input line
if (controller(cCancelLine)) {
  cancel.line();
}

[ pause game (showing menu is another 
[ way to pause the game)
if ((controller(cPause) || 
     said("pause", "game") || 
     said("pause"))) {
  pause();
}

[ check player's current inventory
if ((controller(cStatus) || 
     said("inventory"))) {
  [ disable selection of inventory items
  reset(enableItemSelect);
  status();
}

[ use or examine an item
if (controller(cChooseItem)) {
  [ enable section of inventory items
  set(enableItemSelect);
  [ show inventory screen
  status();
  
  [ selectedItem is set to 255 if ESC is pressed
  [ in the inventory screen
  if (selectedItem > 0 && selectedItem != 255) {
    [ use or examine selected item
    [if (examineitem) {
      selectedItem += 100;
      show.obj.v(selectedItem);
      [ some items get a second, detailed look
      [  post-it note
      if ((selectedItem == 107 || selectedItem == 110 || selectedItem == 112)) {
        call(lgc.ExamineItem);
      }
    [}
    [if (useitem) {
    [  change cursor
    [  enable useitem mode
    [}
  }
}

[ quit the game
if ((controller(cQuit) || 
     said("quit", "game") || 
     said("quit"))) {
  stop.sound();
  quit(0);
}

[ if player hasn't provided input or if match already found, no need
[ to do rest of said tests
if ((!haveInput || haveMatch)) {
  goto(done);
}
  
[ put all generic said tests (those that apply in all rooms) here
[ read memo
if (said("read", "memo")) {
  if (has("memo")) {
    call(txt.Memo);
  } else {
    print("You don't have it.");
  }
}
[ read magazine
if (said("read", "magazine")) {
  call(lgc.ReadMagazine);
}
  

[ if player says any dirty words
if ((said("bad word", "rol") || 
     said("anyword", "bad word", "rol") || 
     said("anyword", "anyword", "bad word", "rol") || 
     said("anyword", "anyword", "anyword", "bad word", "rol") || 
     said("anyword", "anyword", "anyword", "anyword", "bad word", "rol") || 
     said("anyword", "anyword", "anyword", "anyword", "anyword", "bad word", "rol"))) {
  ++badWordCount;
  if (badWordCount == 1) {
    [ first warning
    print("I am going to tell on you!");
  }
  if (badWordCount == 2) {
    [second warning
    print("Don't say anymore words like that!");
  }
  if (badWordCount == 3) {
    [ no more warnings
    print("Don't say I didn't warn you.");
    quit(1);
  }
}


[ look anything
if ((said("look", "anyword") || said("look", "anyword", "rol"))) {
  print("What? Where?");
}


[ get anything
if ((said("get", "anyword") || said("get", "anyword", "rol"))) {
  print("You can't get that here!");
}

[ use anything
if ((said("use", "anyword") || said("use", "anyword", "rol"))) {
  print("What do you want me to do with it?");
}

:done
return();

[ **************************************
[ MESSAGES
[ **************************************
#message 1 "I am going to tell on you!"
#message 2 "Don't say anymore words like that!"
#message 3 "Don't say I didn't warn you."
#message 4 "You don't have it."
#message 5 "What? Where?"
#message 6 "You can't get that here!"
#message 7 "What do you want me to do with it?"
#message 11 gameAboutMsg
#message 12 gameVersionMsg