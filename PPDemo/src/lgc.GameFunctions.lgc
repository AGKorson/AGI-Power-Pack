[*********************************************************************
[
[ lgc.GameFunctions
[
[ This logic is for game specific functions, such as counting down
[ timers, etc. and processing player input that apply to all rooms.
[
[ This logic is called from logic 0, on every cycle, unless 
[ disableGameFunctions is set.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define tmpStr1                     s20
#define tmpStr2                     s21

#define entryDelay                 v240
#define rndNum                     v241

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ check for cancel click2move
if (controller(cRightClick)) {
  if (click2move) {
    egoDir = 0;
    set.dir(ego, egoDir); 
  }
}

[ check generic new room actions
if (newRoom) {
  [ check for walkman
  if (playWalkman) {
    [ not allowed in lobby
    if (currentRoom != rm.Lobby) {
      [ skip to next track
      ++currentTrack;
      [ SIDE A: 1 - 41, 42 means at end of side A
      [ SIDE B: 43 - 83, 84 means at end of side B
      [ if side is done
      if ((currentTrack == 42 || currentTrack == 84)) {
        [ stop the tape
        reset(playWalkman);
        reset(musicDone);
      }
      [ if still active
      if (playWalkman) {
        [ load it, and start it
        set(noScript);
        block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
        work1 = &musicDone;
        block(SND.V.FN, SOUND.V, &currentTrack, &work1); [ sound.v(vSNDNUM, vDONEFLAG)
        reset(noScript);
      }
    }
  } 
}

[***************************************
[ PROCESS PLAYER INPUT
[***************************************
[ check for cussing
work1 = 0;
:loop1
get.string(tmpStr1, m1, CURRENT.INPUT, 0, 0); [ current.input(sRESULT)
work2 = 70; ['F'
[ pass starting pos via vRESULT
work3 = work1;
block(INSTR, &tmpStr1, &work2, &work3); [ instr(sINPUT, vCHAR, vRESULT)
if (work3 == 255) {
  work2 = 102; [ 'f'
  work3 = work1;
  block(INSTR, &tmpStr1, &work2, &work3); [ instr(sINPUT, vCHAR, vRESULT)
}
[ save result in work1
work1 = work3;
[ if letter 'f' is found
if (work1 < 255) {
  [ check for match against 'fuck' by getting 
  [ 'f' plus next three letters
  work2 = 4;
  block(STR.MID, &tmpStr1, &work1, &work2); [ str.mid(sINPUT, vPOS, vLEN)
  tmpStr2 = "fuck";
  [ advance position so loop can look for next 'f'
  ++work1;
  if (compare.strings(tmpStr1, tmpStr2)) {
    print("Watch your language, you son of a bitch!");
    get.string(tmpStr1, m1, -1, 0, 0);
    block(STR.LEFT, &tmpStr1, &tmpStr1, &work1); [ str.left(sINPUT, sRESULT, vLEN)
    tmpStr2 = "***";
    block(STR.CONCAT, &tmpStr1, &tmpStr2, 0); [ str.concat(sINPUT, sADD)
    set.string(SET.INPUT, "%s20"); [ set.input(mINPUT)
  } else {
    [ check rest of line
    goto(loop1);
  }
}

[ now check for any controllers that may have been activated
[ (dynamic menus are checked in main menu)
if (controller(cAbout)) {
  print(gameAboutMsg);
}
if (controller(cVersion)) {
  print(gameVersionMsg);
  version();
}

[ sound volume controls
if (controller(cCrescendo) && attenuation > 0 && soundOn) {
  [ to increase volume, lower sound attenuation variable
  if (attenuation > 0) {
    --attenuation;
  }
}
if (controller(cDecrescendo) && attenuation < 63 && soundOn) {
  [ to decrease volume, raise sound attenuation variable
  if (4channelsound) {
    work1 = 63;
  } else {
    work1 = 15;
  }
  if (attenuation < work1) {
    ++attenuation;
  }
}

[ SPEED (from parser; menus handled in lgc.Main)
if ((said("slow") || 
     said("slow", "speed"))) {
  [ 4/20ths of a second delay between interpreter cycles
  if (animationInterval != SLOW_SPEED) {
    animationInterval = SLOW_SPEED;
  }
}
if ((said("normal") || 
     said("normal", "speed"))) {
  [ 2/20ths of a second delay between interpreter cycles
  if (animationInterval != NORMAL_SPEED) {
    animationInterval = NORMAL_SPEED;
  }
}
if ((said("fast") || 
     said("fast", "speed"))) {
  [ 1/20th of a second delay between interpreter cycles
  if (animationInterval != FAST_SPEED) {
    animationInterval = FAST_SPEED;
  }
}
if ((said("fastest") || 
     said("fastest", "speed"))) {
  [ no delay between interpreter cycles
  if (animationInterval != FASTEST_SPEED) {
    animationInterval = FASTEST_SPEED;
  }
}
[ speed adjustments
if (controller(cSlower)) {
  if (animationInterval < SLOW_SPEED) {
    ++animationInterval;
  }
}
if (controller(cFaster)) {
  if (animationInterval > FASTEST_SPEED) {
    --animationInterval;
  }
}

if ((controller(cDebugMode) || said("debug") || said("debug", "on"))) {
  [ if not in debug mode yet
  if (!debugging) {
    [ activate it
    set(debugging);
    [ allow tracing
    set(enableTrace);
    [ display the game-version message
    print(gameVersionMsg); 
    [ and interpreter version
    version();
    [ Ideally, lgc.Debug would be loaded here, when debug mode is
    [ requested. But since this game does a lot of resource swapping
    [ it's too difficult to manage adding debug logic so it won't get
    [ orphaned (example is if Walkman is playing a sound; if debug
    [ logic was loaded while a sound was playing, after the sound 
    [ finished, the debug logic would be lost). 
    [ The solution is to always load the debug logic (in lgc.Main) 
    [ every time a new.room command is encountered.
[    load.logics(lgc.Debug);
  }
}
if (said("debug", "off")) {
  [ if debugging, turn it off
  if (debugging) {
    reset(debugging);
    reset(enableTrace);
    [ debug logic will unload at next new.room
  }
}

[ save game
if ((controller(cSave) || 
     said("save", "game") || 
     said("save"))) {
  [ because patient views aren't always loaded, need to erase them
  [ prior to saving; then redrawn afterward; when restoring,
  [ the views need to be loaded BEFORE the patients are redrawn
  if (currentRoom == rm.Lobby) {
    #define oPatient2        o5
    #define oPatient3        o6
    #define oPatient4        o7
    [ erase patients 2,3,4
    erase(oPatient2);
    erase(oPatient3);
    erase(oPatient4);
  } 
  save.game();
  if (currentRoom == rm.Lobby) {
    [ redraw patients, if currently in the room
    if (patient2Loc != LOC_GONE) {
      draw(oPatient2);
    }
    if (patient3Loc != LOC_GONE) {
      draw(oPatient3);
    }
    if (patient4Loc != LOC_GONE) {
      draw(oPatient4);
    }
  }
}

[ restore game
if ((controller(cRestore) || 
     said("restore", "game") || 
     said("restore"))) {
  [ save options before restoring
  call(lgc.SaveOptions);
  restore.game();
}

[ restart game
if ((controller(cRestart) || 
     said("restart", "game") || 
     said("restart"))) {
  call(lgc.CacheOptions);
  restart.game();
}

[ ask for help
if ((controller(cHelp) || said("help") || said("get", "help") || 
     said("show", "help"))) {
  [ show the main help screen
  set(showHelp);
  [ initialize and show the help screen
  set(initHelp);
  call(lgc.GameHelp);
}

[ echo line draws previous input on input line
if (controller(cEchoLine)) {
  echo.line();
}

[ clear the input line
if (controller(cCancelLine)) {
  cancel.line();
}

[ pause game (showing menu is another 
[ way to pause the game)
if ((controller(cPause) || said("pause", "game") || 
     said("pause"))) {
  pause();
}

[ check player's current inventory
if ((controller(cStatus) || said("inventory"))) {
  [ disable selection of inventory items
  reset(enableItemSelect);
  status();
}

[ use or examine an item
if (controller(cChooseItem)) {
  [ enable section of inventory items
  set(enableItemSelect);
  [ show inventory screen
  status();
  
  [ selectedItem is set to 255 if ESC is pressed
  [ in the inventory screen
  if (selectedItem > 0 && selectedItem != 255) {
    [ use or examine selected item
    if (cursormode == C_USE) {
      [ magazine
      if (selectedItem == 1) {
        [ same as 'read magazine'
        [ (set haveMatch to avoid the 'I don't understand' message)
        set(haveMatch);
        goto(readmag);
      }
      [ disk
      if (selectedItem == 2) {
        [ disk can only be used in control room
        if (currentRoom == rm.ControlRoom) {
          cursormode = C_DISK;
          status.line.off();
          prevent.input();
        } else {
          print("There is nothing you can do with the disk here.");
        }
      }
      [ keyfob
      if (selectedItem == 3) {
        [ disk can only be used in parking lot
        if (currentRoom == rm.ParkingLot) {
          if (carLocked) {
            print("Using your keyfob, you unlock your car door.");
            reset(carLocked);
            work1 = -2;
            call(lgc.ScoreHandler);
          } else {
            print("Thinking it's best not to take any chances, "
                  "you hit the lock button on your keyfob to "
                  "prevent your car from being stolen.");
            set(carLocked);
            work1 = 2;
            call(lgc.ScoreHandler);
          }
        } else {
          print("You are too far from your vehicle for the keyfob to work.");
        }
      }
      [ cassette
      if (selectedItem == 4) {
        if (has("Walkman")) {
          [ show the walkman
          selectedItem = 5;
        } else {
          [ nothing to do with the cassette
          print("There is nothing you can do with the cassette right now.");
        }
      }
      [ walkman
      if (selectedItem == 5) {
        if (currentRoom == rm.Lobby) {
          if (warnWalkman) {
            print("The receptionist asked you to not play your music in the lobby.");
          } else {
            [ not allowed
            block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
            print.at("\"Excuse me, our patients prefer quiet- please don't play music in the lobby. Thanks!\"", 6, 6, 35);
            block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
            print("You decide it's best to comply with the receptionist's request, and put the walkman back in your pocket.");
            set(warnWalkman);
            [ receptionistLoc == HALL            
            if (v220 == 4) {
              print("(How did she hear that from all the way out in the hallway?)");
            }
          }
        } else {
          if (playWalkman) {
            [ stop and unload current track; it will get restarted
            [ after showing the walkman
            stop.sound();
            set(noScript);
            block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
            reset(noScript);
          }
          [ show-walkman code is in 'said' parser section, so
          [ set haveMatch to avoid 'I don't understand' comment
          set(haveMatch);
          goto(showwalkman);
        }
      }
      [ memo
      if (selectedItem == 6) {
        [ read the memo
        [ (set haveMatch to avoid the 'I don't understand' message)
        set(haveMatch);
        goto(readMemo);
      }
      [ post-it note
      if (selectedItem == 7) {
        [ read the note
        work1 = 107;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
      [ BaDASS manual
      if (selectedItem == 8) {
        [ read the manual
        [ (set haveMatch to avoid the 'I don't understand' message)
        set(haveMatch);
        goto(readManual);
      }
      [ notebook
      if (selectedItem == 9) {
        [ read the notebook
        [ (set haveMatch to avoid the 'I don't understand' message)
        set(haveMatch);
        goto(readNotebook);
      }
      [ folder
      if (selectedItem == 10) {
        work1 = 110;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
      [ scroll
      if (selectedItem == 11) {
        [ (set haveMatch to avoid the 'I don't understand' message)
        set(haveMatch);
        goto(readScroll);
      }
      [ music sheet
      if (selectedItem == 12) {
        work1 = 112;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
      [ PQ idea list
      if (selectedItem == 13) {
        work1 = 113;
        call(lgc.ExamineItem);
        call(lgc.RedrawRoom);
      }
    } else {
      [ display the item
      work1 = selectedItem;
      [ set haveMatch to avoid the 'I don't understand' response
      set(haveMatch);
      goto(lookitem);
    }
  }
}

[ quit the game
if ((controller(cQuit) || said("quit", "game") || said("quit"))) {
  [ update the config file
  call(lgc.SaveOptions);
  quit(0);
}

[ if player has provided input and no match found yet
[ (including unknown words)
if (haveInput && !haveMatch) {
  [ inventory item look statements
  work1 = 0;
  [ look magazine
  if (said("look", "magazine")) {
    if (has("magazine")) {
      work1 = 1;
    } else {
      print("You don't have it.");
    }
  }
  [ look floppy disk
  if (said("look", "floppy disk")) {
    if (has(floppydisk)) {
      work1 = 2;
    } else {
      print("You don't have it.");
    }
  }
  [ look keyfob
  if (said("look", "keyfob")) {
    if (has("car keyfob")) {
      work1 = 3;
    } else {
      print("You don't have it.");
    }
  }
  [ look cassette
  if (said("look", "cassette")) {
    if (has("cassette tape")) {
      work1 = 4;
    } else {
      print("You don't have it.");
    }
  }
  [ look Walkman
  if (said("look", "walkman")) {
    if (has("Walkman")) {
      work1 = 5;
    } else {
      print("You don't have it.");
    }
  }
  [ look memo
  if (said("look", "memo")) {
    if (has("memo")) {
      work1 = 6;
    } else {
      print("You don't have it.");
    }
  }
  [ look post-it note
  if (said("look", "note")) {
    if (has("post-it note")) {
      work1 = 7;
    } else {
      print("You don't have it.");
    }
  }
  [ look manual
  if (said("look", "manual")) {
    if (has("BaDASS manual")) {
      work1 = 8;
    } else {
      print("You don't have it.");
    }
  }
  [ look notebook
  if (said("look", "notebook")) {
    if (has("notebook")) {
      work1 = 9;
    } else {
      print("You don't have it.");
    }
  }
  [ look folder
  if (said("look", "folder")) {
    if (has("folder")) {
      work1 = 10;
    } else {
      print("You don't have it.");
    }
  }
  [ look scroll
  if (said("look", "scroll")) {
    if (has("scroll")) {
      work1 = 11;
    } else {
      print("You don't have it.");
    }
  }
  [ look music sheet
  if (said("look", "music sheet")) {
    if (has("music sheet")) {
      work1 = 12;
    } else {
      print("You don't have it.");
    }
  }
  [ look PQ list
  if (said("look", "list")) {
    if (has("PQ idea list")) {
      work1 = 13;
    } else {
      print("You don't have it.");
    }
  }
  [ if something matched, show it now
  if (work1 > 0) {
    :lookitem

    work1 += 100;
    show.obj.v(work1);
    [ some items get a second, detailed look
    [  post-it note, music sheet, PQList
    if ((work1 == 107 || work1 == 112 || 
         work1 == 113)) {
      call(lgc.ExamineItem);
      call(lgc.RedrawRoom);
    }
    [ some items get additional information, which is a clue to 
    [ look closer
    if (work1 == 101) {
      [ magazine
      print("The articles are, of course, outdated, but probably "
            "very interesting as nostalgia items.");
    }
    if (work1 == 106) {
      [ memo
      print("It looks like a memo for AMOS users.");
    }
    if (work1 == 108) {
      [ BaDASS manual
      print("This would be useful to BaDASS system administrators.");
    }
    if (work1 == 109) {
      [ notebook
      print("Notes from AMOS Team meetings - that could be interesting.");
    }
    if (work1 == 110) {
      [ folder
      print("The folder is thin- is there anything left in it?");
    }
    if (work1 == 111) {
      [ scroll
      print("It was probably used by the original development "
            "team when KQIII was first designed.");
    }
  }
  
  [ inventory items use/read statements
  [ magazine
  if ((said("read", "magazine") || said("use", "magazine"))) {
    if (has("magazine")) {
      :readmag
      call(lgc.ReadMagazine);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  [ floppy disk
  if (said("use", "disk")) {
    if (has(floppydisk)) {
      [ if in control room, it's handled there
      print("There's nothing you can do with the floppy disk here.");
    } else {
      print("You don't have it.");
    }
  }
  if (said("read", "disk")) {
    if (has(floppydisk)) {
      print("The tiny ones and zeros on the drive are much too small for you to read.");
    } else {
      print("You don't have it.");
    }
  }
  
  [ keyfob
  if (said("use", "keyfob")) {
    if (has("car keyfob")) {
      [ if in parking lot, it's handled there
      print("Your car is in the parking lot. The keyfob's signal is too weak to reach it from here");
    } else {
      print("You don't have it.");
    }
  }
  
  [ cassette
  if (said("use", "cassette")) {
    if (has("cassette tape")) {
      print("What to you want to do with it?");
    } else {
      print("You don't have it.");
    }
  }
  if (said("put", "tape", "in", "walkman")) {
    if (has("cassette tape") && has("Walkman")) {
      [ show walkman
    } else {
      if (!has("cassette tape")) {
        print("You don't have a cassette tape.");
      } else {
        if (!has("Walkman")) {
          print("You don't have a Walkman.");
        }
      }
    }
  }
  
  [ walkman
  if (said("use", "walkman")) {
    if (has("Walkman")) {
      goto(showwalkman);
    } else {
      print("You don't have it.");
    }
  }
  if (said("play", "walkman")) {
    if (has("Walkman")) {
      if (cassetteLoaded && currentTrack != 42 && 
          currentTrack != 84 && !playWalkman) {
        [ begin playing, load and play current track
        set(playWalkman);
        set(noScript);
        block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
        work1 = &musicDone;
        block(SND.V.FN, SOUND.V, &currentTrack, &work1); [ sound.v(vSNDNUM, vDONEFLAG)
      } else {
        :showwalkman
        [ show a closeup of walkman, player can press play/stop/ff/rewind/eject
        call(lgc.Walkman);
        call(lgc.RedrawRoom);
        [ if still active
        if (playWalkman) {
          [ restart current track
          set(noScript);
          block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
          work1 = &musicDone;
          block(SND.V.FN, SOUND.V, &currentTrack, &work1); [ sound.v(vSNDNUM, vDONEFLAG)
          reset(noScript);
        }
      }
    } else {
      print("You don't have it.");
    }
  }
  if (said("stop", "walkman")) {
    if (has("Walkman")) {
      if (playWalkman) {
        reset(playWalkman);
        stop.sound();
        reset(musicDone);
        [ discard this track
        set(noScript);
        block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
        reset(noScript);
      } else {
        print("It's already stopped.");
      }
    } else {
      print("You don't have it.");
    }
  }

  [ read memo
  if (said("read", "memo")) {
    if (has("memo")) {
      :readMemo
      call(txt.Memo);
    } else {
      print("You don't have it.");
    }
  }
  
  [ post it note
  if (said("read", "note")) {
    if (has("post-it note")) {
      work1 = 107;
      call(lgc.ExamineItem);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  
  [ manual
  if ((said("read", "manual") || said("use", "manual"))) {
    if (has("BaDASS manual")) {
      :readManual
      call(lgc.ReadManual);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  [ notebook
  if ((said("read", "notebook") || said("use", "notebook"))) {
    if (has("notebook")) {
      :readNotebook
      call(lgc.ReadNotebook);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  [ folder
  if ((said("look", "in", "folder") || said("read", "folder") ||
       said("use", "folder") || said("open", "folder"))) {
    if (has("folder")) {
      work1 = 110;
      call(lgc.ExamineItem);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  [ scroll
  if ((said("read", "scroll") || said("use", "scroll"))) {
    if (has("scroll")) {
      :readScroll
      call(lgc.ReadScroll);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  
  [ music sheet
  if ((said("read", "music") || said("use", "music"))) {
    if (has("music sheet")) {
      work1 = 112;
      call(lgc.ExamineItem);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  
  [ PQ idea list
  if ((said("read", "list") || said("use", "list"))) {
    if (has("PQ idea list")) {
      work1 = 113;
      call(lgc.ExamineItem);
      call(lgc.RedrawRoom);
    } else {
      print("You don't have it.");
    }
  }
  
  [ wegup is not a word
  if (said("wegup")) {
    print("That is not a valid wordle word.");
  }
  
  [ if player says any dirty words
  if ((said("bad word", "rol") || 
       said("anyword", "bad word", "rol") || 
       said("anyword", "anyword", "bad word", "rol") || 
       said("anyword", "anyword", "anyword", "bad word", "rol") || 
       said("anyword", "anyword", "anyword", "anyword", "bad word", "rol") || 
       said("anyword", "anyword", "anyword", "anyword", "anyword", "bad word", "rol"))) {
    ++badWordCount;
    if (badWordCount == 1) {
      [ first warning
      print("I am going to tell on you!");
    }
    if (badWordCount == 2) {
      [second warning
      print("Don't say anymore words like that!");
    }
    if (badWordCount == 3) {
      [ no more warnings
      print("Don't say I didn't warn you.");
      [ update the config file
      call(lgc.SaveOptions);
      quit(1);
    }
  }
  
  if (said("kick", "bucket")) {
    print("There is no bucket here.");
  }
  
  [ UNKNOWN WORD CHECK
  if (unknownWordNum > 0) {
    set(haveMatch);
    [copy word to a string
    if (unknownWordNum == 1) {
      word.to.string(unknownWord, w1);
    }
    if (unknownWordNum == 2) {
      word.to.string(unknownWord, w2);
    }
    if (unknownWordNum == 3) {
      word.to.string(unknownWord, w3);
    }
    if (unknownWordNum == 4) {
      word.to.string(unknownWord, w4);
    }
    if (unknownWordNum == 5) {
      word.to.string(unknownWord, w5);
    }
    if (unknownWordNum == 6) {
      word.to.string(unknownWord, w6);
    }
    if (unknownWordNum == 7) {
      word.to.string(unknownWord, w7);
    }
    if (unknownWordNum == 8) {
      word.to.string(unknownWord, w8);
    }
    if (unknownWordNum == 9) {
      word.to.string(unknownWord, w9);
    }
    if (unknownWordNum == 10) {
      word.to.string(unknownWord, w10);
    }
    [choose a random unknown word response
    random(&m38, &m40, rndNum);
    print.v(rndNum);
  }
  
  [ hit/punch/kill/shoot/kick anything
  if ((said("hit", "rol") || said("kick", "rol"))) {
    print("Unprovoked violence is never acceptable.");
  }
  
  [ look anything
  if (said("look", "anyword", "rol")) {
    print("What? Where?");
  }

  [ get anything
  if (said("get", "rol")) {
    print("You can't get that here.");
  }
  
  [ use anything
  if (said("use", "rol")) {
    print("Be more specific. What do you want me to do with it?");
  }

  if (said("touch", "rol")) {
    print("Keep your hands to yourself!");
  }
  
  if (said("move", "anyword", "rol")) {
    print("Leave things be. No need to move anything here.");
  }
  if ((said("push", "anyword", "rol") || said("pull", "anyword", "rol"))) {
    print("There is no need to push or pull anything.");
  }

  if ((said("look", "ego") || said("look", "drew"))) {
    print("Yes, Drew is a very handsome fellow. Easy on the eyes.");
  }
  if (said("look", "pocket")) {
    print("Your enormously oversized pockets have room for all kinds of "
          "amazing things. Right now you have the following items:");
    [ disable selection of inventory items
    reset(enableItemSelect);
    status();
  }
  
  [ climb anything - not allowed (in most rooms)
  if (said("climb", "rol")) {
    print("There is no need to cimb anything here.");
  }
  
  if (said("climb", "up", "anyword", "rol")) {
    print("What are you, a mountain goat?");
  }
  if ((said("climb", "in", "anyword", "rol") || said("get", "in", "anyword", "rol"))) {
    print("What are you, a hermit crab?");
  }
  if (said("what", "anyword", "rol")) {
    print("That's a good question. Maybe you should ask google.");
  }
  if (said("ask", "google", "rol")) {
    print("If only you had a cell phone, that might work.");
  }
  if (said("jump", "rol")) {
    print("There's no reason for jumping of any kind needed here.");
  }
  if (said("drop", "anyword", "rol")) {
    print("Since your pockets are so ridiculously large, and can carry "
          "more than your average pack mule, there's no reason to drop "
          "anything. It's best to keep it all.");
  }
  
  [ finally, if there is input that still hasn't been recognized
  if (!haveMatch) {
    print("I don't understand your request.");
    reset(haveInput);
  }
}

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
[ default cursors
#message 1 "0000FF3FFF1FFF0FFF07FF03FF01FF007F003F001F00FF01FF00FF307FF87FF8FFFC"
            "00000040006000700078007C007E007F807F007C006C00460006000300030000"
[ walk
#message 2 "040FFFF1FFE07FC07FC0FFE0FFF1FFE17FC03FC07FE0FFE1FFC1FF80FF087F183FBC"
            "0000000E001D001F000E0004000C0016801B0006000C001C0036006200430000"
[ look
#message 3 "0709FFFFFFFFFFFFFFFEEFF62DB40BD0024001808001018003C00FF03FFCFFFFFFFF"
            "000000000000000000000000C003F00F7C3E3E7C7C3EF00FC003000000000000"
[ talk
#message 4 "050E1FF807E0018000000000000000000000008001E007FC0FFE3FFC7FF8FFF9FFFF"
            "0000E007F81FFE7FFE7FFE7FFE7FFE7FFE1FF803F000C0008001000200000000"
[ use 
#message 5 "0803FFFFFFFF1FFE07F801F000F000F000F00090000000000000018001C003E007F0"
            "000000000000C000D806DA06DA06DA06DA06FA6FFE7FFE7FFC3FFC1FF80F0000"
[ wait
#message 6 "0707018003C003C007E007E00FF01FF83FFC3FFC1FF80FF007E007E003C003C00180"
            "0000F81FF81F5005A00A40058002000180004003E007700E1008081000000000"
[ disk
#message 7 "0707FFFFFFFFFFFF0000000000000000000000000000000001000300FFFFFFFFFFFF"
            "0000000000000000EE77EE770E70FE7FFE7FFE7F1E78DC790000000000000000"
[ tape
#message 8 "0707FFFFFFFFFFFFFFFF01800000000000000000000000000000FFFFFFFFFFFFFFFF"
            "00000000000000000000FE7FF66FEA57F66F1E78EE7700000000000000000000"
#message 9 "Uh oh. You suddenly get the feeling you forgot to do something important back in the closet."

#message 11 gameAboutMsg
#message 12 gameVersionMsg

[ unknown input messages
#message 38 "I don't understand \"%s1\""
#message 39 "\"%s1\" is not in my vocabulary."
#message 40 "What is \"%s1\""
