[ ********************************************************************[[ lgc.Debug: Debug mode[[ When debugging, use this logic to handle debug commands.[[ ********************************************************************#define xPos            v240#define yPos            v241#define tmpVarA         v254#define tmpVarB         v255#define comment          s12 [ show/hide ego coordinatesif ((controller(cXY) || said("coords")))   {  toggle(showCoords);  [ if coordinate are now hidden  if (!showCoords)     {    [ clear the coordinate line    clear.lines(24, 24, 0);    }  }[ show ego object informationif (controller(cShowEgo))   {  tmpVarB = 0;  obj.status.v(tmpVarB);  }[ game versionif ((said("game version") || controller(cVersion)))   {  print(gameVersionMsg);  version();  }[ debug help screenif ((said("debug", "help") || controller(cDebugHelp)))   {  call(lgc.DebugHelp);  }[ force ego to dieif (said("die"))  {  load.view(vw.EgoDead);  set.view(ego, vw.EgoDead);  program.control();  stop.motion(ego);  deathType = 1;  }        [ enable command tracingif (said("trace", "on"))   {  set(enableTrace);  }[ show current memory statusif ((said("show", "mem") || controller(cShowMem)))   {  show.mem();  }[ teleport to another roomif (said("tp"))   {  get.num("new room: ", tmpVarB);  [ don't allow teleporting to room 0  if (tmpVarB != 0)     {    [ it is up to player to make sure     [ new room value points to an    [ actual room    new.room.v(tmpVarB);    }  }[ move ego to new positionif (said("pos"))   {  get.num("x: ", xPos);  get.num("y: ", yPos);  erase(ego);  reposition.to.v(ego, xPos, yPos);  draw(ego);  }[ show value of a variableif (said("show", "var"))   {  get.num("var number: ", tmpVarB);  tmpVarA = *tmpVarB;  print("var %v255: %v254");  }[ change a variable valueif (said("set", "var"))   {  get.num("var number: ", tmpVarA);  get.num("var value: ", tmpVarB);  *tmpVarA = tmpVarB;  }[ show value of a flagif (said("show", "flag"))   {  get.num("flag number: ", tmpVarB);  if (issetv(tmpVarB))     {    print("flag %v255 is set");    }  else     {    print("flag %v255 is not set");    }  }[ set a flag to TRUEif (said("set", "flag"))   {  get.num("flag number: ", tmpVarB);  set.v(tmpVarB);  }[ reset a flag to FALSEif (said("reset", "flag"))   {  get.num("flag number: ", tmpVarB);  reset.v(tmpVarB);  }[ display status of any objectif ((said("object") || controller(cObjInfo)))   {  get.num("object #: ", tmpVarB);  obj.status.v(tmpVarB);  }[ show the priority screenif ((said("show", "pri") || controller(cShowPriority)))   {  show.pri.screen();  }[ move an inventory object to ego's inventoryif (said("get", "object"))   {  get.num("object number: ", tmpVarB);  if (tmpVarB > numberOfItems)     {    print("Invalid object number!");    }  else     {    get.v(tmpVarB);    }  }[ get all inventory objectsif ((controller(cGimme) || said("gimme", "gimme")))   {  print("You gottum!");  tmpVarB = 0;NextObj:  if (tmpVarB < numberOfItems)     {    tmpVarB = tmpVarB + 1;    get.v(tmpVarB);    goto(NextObj);    }  }[ display the room where an inventory object is locatedif (said("object", "room"))   {  get.num("Object number: ", tmpVarB);  if (tmpVarB > numberOfItems)     {    print("Invalid object number!");    }  else     {    get.room.v(tmpVarB, tmpVarA);    [ a room value of 255 means 'in player inventory'    if (tmpVarA == 255)       {      print("Object %v255 is in your inventory.");      }    else       {      print("Object %v255 is in room %v254.");      }    }  }[ set ego priority to a fixed valueif (said("set", "pri"))   {  get.num("New priority: ", tmpVarB);  set.priority.v(ego, tmpVarB);  }[ restore auto priority assignmentif (said("release", "pri"))   {  release.priority(ego);  }[ if ego coordinates need to be shownif (showCoords)   {  [ get ego's current position and priority  get.posn(ego, xPos, yPos);  get.priority(ego, tmpVarA);  [ change color to brown on black  set.text.attribute(BROWN, BLACK);  display(24, 15, "Rm %v0|3 Pri %v254|2 x:%v240|3 y:%v241|3");  [ restore colors to white on black  set.text.attribute(WHITE, BLACK);  }[ if an unknown word was entered and input not matched yetif (!isset(haveMatch) && isset(haveInput) && unknownWordNum > 0)   {  [ adjust input/match flags to indicate nothing to parse  set(haveMatch);  reset(haveInput);  [ log the unknown word  if (unknownWordNum == 1)     {    log("%m19%w1");    }  if (unknownWordNum == 2)     {    log("%m19%w2");    }  if (unknownWordNum == 3)     {    log("%m19%w3");    }  if (unknownWordNum == 4)     {    log("%m19%w4");    }  if (unknownWordNum == 5)     {    log("%m19%w5");    }  if (unknownWordNum == 6)     {    log("%m19%w6");    }  if (unknownWordNum == 7)     {    log("%m19%w7");    }  if (unknownWordNum == 8)     {    log("%m19%w8");    }  if (unknownWordNum == 9)     {    log("%m19%w9");    }  if (unknownWordNum == 10)    {    log("%m19%w10");    }  print("Logged an unknown word.");  }[ add a comment to log fileif (said("log"))   {  get.string(comment, "Comment: ", 22, 0, 25);  log("%m31%s1");  clear.lines(22, 24, 0);  accept.input();  }return();[ **************************************[ MESSAGES[ **************************************#message 1 "You gottum!"#message 2 "new room: "#message 3 "x: "#message 4 "y: "#message 5 "var number: "#message 6 "var %v255: %v254"#message 7 "var value: "#message 8 "flag number: "#message 9 "flag %v255 is set"#message 10 "flag %v255 is not set"#message 11 "object #: "#message 12 "object number: "#message 13 "Invalid object number!"#message 14 "Object number: "#message 15 "Object %v255 is in your inventory."#message 16 "Object %v255 is in room %v254."#message 17 "New priority: "#message 18 "Rm %v0|3 Pri %v255|2 x:%v253|3 y:%v254|3"#message 19 "Unknown word: "#message 20 "%m19%w1"#message 21 "%m19%w2"#message 22 "%m19%w3"#message 23 "%m19%w4"#message 24 "%m19%w5"#message 25 "%m19%w6"#message 26 "%m19%w7"#message 27 "%m19%w8"#message 28 "%m19%w9"#message 29 "%m19%w10"#message 30 "Logged an unknown word."#message 31 "Comment: "#message 32 "%m31%s1"