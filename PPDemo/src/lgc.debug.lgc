[*********************************************************************
[
[ lgc.Debug
[
[ When debugging, this logic handles all debug commands.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define xPos            v240
#define yPos            v241
#define tmpVarA         v254
#define tmpVarB         v255

#define tmpStr           s20 

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ show/hide ego coordinates
if (said("coords")) {
  toggle(showCoords);
  [ if coordinate are now hidden
  if (!showCoords) {
    [ clear the coordinate line
    clear.lines(24, 24, BLACK);
  }
}

[ game version
if (said("game version")) {
  print(gameVersionMsg);
  version();
}

[ debug help screen
if ((controller(cDebugHelp) || said("debug", "help"))) {
  call(lgc.DebugHelp);
}

[ start command tracing
if (said("trace", "on")) {
  set(enableTrace);
  set(startTrace);
}

[ show current memory status
if (said("show", "mem")) {
  show.mem();
}

[ teleport to another room (enable inline room number)
if (said("tp", "rol")) {
  [ check for a room number by manually parsing the previous
  [ input line
  get.string(tmpStr, m1, PREVIOUS.INPUT, 0, 0); [ current.input(sRESULT)
  block(STR.TRIM, &tmpStr, &tmpStr, TRIM_ALL); [ strTrim(sINPUT, sRESULT, vMODE)
  [ strip off 'tp' at front of line, then remove extra spaces
  block(STR.LEN, &tmpStr, &tmpVarB, 0); [ str.len(sINPUT, vRESULT)
  tmpVarB -= 2;
  block(STR.RIGHT, &tmpStr, &tmpStr, &tmpVarB); [ str.right(sINPUT, sRESULT, vCOUNT)
  block(STR.TRIM, &tmpStr, &tmpStr, TRIM_ALL); [ strTrim(sINPUT, sRESULT, vMODE)
  [ now check to see what's left on the line
  block(STR.LEN, &tmpStr, &tmpVarB, 0); [ str.len(sINPUT, vRESULT)
  if (tmpVarB == 0) {
    [ nothing- player entered just 'tp'
    get.num("new room: ", tmpVarB);
  } else {
    [ assume what's left on line is room number; convert the string
    [ to a byte value
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  [ don't allow teleporting to room 0
  if (tmpVarB > 1 && tmpVarB < 11) {
    block(FADE.OUT, BYNUM, 0, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
    new.room.v(tmpVarB);
  } else {
    print("not a valid room");
  }
}

[ move ego to new position
if (said("pos")) {
  get.num("x: ", xPos);
  get.num("y: ", yPos);
  erase(ego);
  reposition.to.v(ego, xPos, yPos);
  draw(ego);
}

[ show value of a variable (enable inline variable number)
if (said("show", "var", "rol")) {
  [ alternate way to extract a number from the input line
  reset(haveMatch);
  if (said("show", "var")) {
    get.num("variable number: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  tmpVarA = *tmpVarB;
  print("var %v255: %v254");
}

[ change a variable value (enable inline variable number)
if (said("set", "var", "rol")) {
  reset(haveMatch);
  if (said("set", "var")) {
    get.num("variable number: ", tmpVarA);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  get.num("v%254 new value: ", tmpVarB);
  *tmpVarA = tmpVarB;
}

[ show value of a flag (enable inline flag number)
if (said("show", "flag", "rol")) {
  reset(haveMatch);
  if (said("show", "flag")) {
    get.num("flag number: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  if (issetv(tmpVarB)) {
    print("flag f%v255 is SET");
  } else {
    print("flag f%v255 is RESET");
  }
}

[ set a flag to TRUE (enable inline flag number)
if (said("set", "flag", "rol")) {
  reset(haveMatch);
  if (said("set", "flag")) {
    get.num("flag number: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  set.v(tmpVarB);
  print("flag f%v255 is SET");
}

[ reset a flag to FALSE (enable inline flag number)
if (said("reset", "flag", "rol")) {
  reset(haveMatch);
  if (said("reset", "flag")) {
    get.num("flag number: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  reset.v(tmpVarB);
  print("flag f%v255 is RESET");
}

[ display status of any object (enable inline object number)
if (said("object", "rol")) {
  reset(haveMatch);
  if (said("object")) {
    get.num("object #: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w2);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  [ validate
  if (tmpVarB > 16) {
    print("Invalid object: valid range is 0 - 16");
  } else {
    obj.status.v(tmpVarB);
  }
}

[ show the priority screen
if (said("show", "pri")) {
  show.pri.screen();
}

[ move an inventory object to ego's inventory (enable inline object number)
if (said("get", "item", "rol")) {
  reset(haveMatch);
  if (said("get", "item")) {
    get.num("item number: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  tmpVarA = 0;
  block(ITEM.COUNT, &tmpVarA, &tmpVarA, 0); [ item.count(vLOCATION, vRESULT)
  if ((tmpVarB > tmpVarA || tmpVarB == 0)) {
    print("Invalid item number!");
  } else {
    get.v(tmpVarB);
    print("You now have '%o255'");
  }
}

[ get all inventory objects
if (said("gimme", "gimme")) {
  print("You gottum!");
  tmpVarA = 0;
  [ get count of items
  block(ITEM.COUNT, &tmpVarA, &tmpVarA, 0); [ item.count(vLOCATION, vRESULT)
  [ skip item 0 ('?')
  tmpVarB = 1;
  NextObj:
    get.v(tmpVarB);
    ++tmpVarB;
  if (tmpVarB < tmpVarA) {
    goto(NextObj);
  }
}

[ display the room where an inventory object is located
if (said("item", "room")) {
  get.num("item number: ", tmpVarB);
  tmpVarA = 0;
  block(ITEM.COUNT, &tmpVarA, &tmpVarA, 0); [ item.count(vLOCATION, vRESULT)
  if (tmpVarB > tmpVarA) {
    print("Invalid item number!");
  } else {
    get.room.v(tmpVarB, tmpVarA);
    [ a room value of 255 means 'in player inventory'
    if (tmpVarA == 255) {
      print("item %v255 is in your inventory.");
    } else {
      print("item %v255 is in room %v254.");
    }
  }
}

[ set ego priority to a fixed value (enable inline priority number)
if (said("set", "pri", "rol")) {
  reset(haveMatch);
  if (said("set", "pri")) {
    get.num("New priority: ", tmpVarB);
  } else {
    set(haveMatch);
    word.to.string(tmpStr, w3);
    block(STR2BYTE, &tmpStr, &tmpVarB, 0); [ str2byte(sINPUT, vRESULT)
  }
  [ validate
  if (tmpVarB > 3 && tmpVarB < 16) {
    set.priority.v(ego, tmpVarB);
    print("ego priority set to %v255");
  } else {
    print("Invalid priority value");
  }
}

[ restore auto priority assignment
if (said("release", "pri")) {
  release.priority(ego);
  print("ego priority reset to auto");
}

[ if ego coordinates need to be shown
if (showCoords) {
  [ get ego's current position and priority
  get.posn(ego, xPos, yPos);
  get.priority(ego, tmpVarA);
  [ change color to brown on black
  set.text.attribute(BROWN, BLACK);
  display(24, 15, "Rm %v0|3 Pri %v254|2 x:%v240|3 y:%v241|3");
  [ restore colors to white on black
  set.text.attribute(WHITE, BLACK);
}

[ if an unknown word was entered and input not matched yet
if (!fLogInput && !isset(haveMatch) && 
    isset(haveInput) && unknownWordNum > 0) {
  [ reset match so main logic still catches it
  reset(haveMatch);
  
  [ log the unknown word
  if (unknownWordNum == 1) {
    log("%m19%w1");
  }
  if (unknownWordNum == 2) {
    log("%m19%w2");
  }
  if (unknownWordNum == 3) {
    log("%m19%w3");
  }
  if (unknownWordNum == 4) {
    log("%m19%w4");
  }
  if (unknownWordNum == 5) {
    log("%m19%w5");
  }
  if (unknownWordNum == 6) {
    log("%m19%w6");
  }
  if (unknownWordNum == 7) {
    log("%m19%w7");
  }
  if (unknownWordNum == 8) {
    log("%m19%w8");
  }
  if (unknownWordNum == 9) {
    log("%m19%w9");
  }
  if (unknownWordNum == 10) {
    log("%m19%w10");
  }
  print("Logged an unknown word.");
}

[ add a comment to log file
if (said("log")) {
  get.string(tmpStr, "Comment: ", 22, 0, 25);
  log("%m31%s1");
  clear.lines(22, 24, BLACK);
  accept.input();
}

[ clear save games
if (said("delete", "save")) {
  work1 = 1;
  work2 = 0;
  :delloop
    tmpStr = "PPDSG.%v46";
    block(STR.FORMAT, &tmpStr, &tmpStr, 0); [ str.format(sINPUT, sRESULT)
    block(DELETE.FILE, &tmpStr, 0, 0); [ delete.file(sFILENAME)
    if (!errorParameter) {
      ++work2;
    }
    ++work1;
  if (work1 < 13) {
    goto(delloop);
  }
  if (work2 == 0) {
    print("No save game files found.");
  } else {
    if (work2 == 1) {
      tmpStr = "";
    } else {
      tmpStr = "s";
    }
    print("Deleted %v47 save game file%s20");
  }
}

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "You gottum!"
#message 2 "new room: "
#message 3 "x: "
#message 4 "y: "
#message 5 "var number: "
#message 6 "var %v255: %v254"
#message 7 "var value: "
#message 8 "flag number: "
#message 9 "flag %v255 is set"
#message 10 "flag %v255 is not set"
#message 11 "object #: "
#message 12 "object number: "
#message 13 "Invalid object number!"
#message 14 "Object number: "
#message 15 "Object %v255 is in your inventory."
#message 16 "Object %v255 is in room %v254."
#message 17 "New priority: "
#message 18 "Rm %v0|3 Pri %v255|2 x:%v253|3 y:%v254|3"
#message 19 "Unknown word: "
#message 20 "%m19%w1"
#message 21 "%m19%w2"
#message 22 "%m19%w3"
#message 23 "%m19%w4"
#message 24 "%m19%w5"
#message 25 "%m19%w6"
#message 26 "%m19%w7"
#message 27 "%m19%w8"
#message 28 "%m19%w9"
#message 29 "%m19%w10"
#message 30 "Logged an unknown word."
#message 31 "Comment: "
#message 32 "%m31%s1"