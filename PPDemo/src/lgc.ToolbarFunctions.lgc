[ 
[ lgc.ToolbarFunctions
[ 

#define toggleBtn    f240

[ if wait cursor is active, do nothing
if (cursoricon == C_WAIT) {
  return();
}

[ if ego is dead, force the default cursor
[ and limit buttons to restore only
if (deathType > 0) {
  if (cursormode != C_DEFAULT) {
    cursormode = C_DEFAULT;
    set(toggleBtn);
  }
}

[ if mouse is NOT over toolbar AND NOT over menu, show correct cursor
if ((mouseX < 14 || mouseX > 145 || mouseY > 25) && mouseY > 7) {
  [ show correct cursor icon
  if (cursormode != cursoricon) {
    [ change it
    cursoricon = cursormode;
    set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  }
  [ reenable click2move if in walk mode
  if (cursormode == C_WALK) {
    set(click2move);
  }
} else {
  [ show default cursor icon
  if (cursoricon != C_DEFAULT) {
    [ change it
    cursoricon = C_DEFAULT;
    set.key(0, &m1, mouse); [ set.cursor(BYVAR, MSGNUM);
    [ disable click2move
    reset(click2move);
  }
}


[ check for button click
if (controller(cLeftClick)) {
  if (!deathType) {
    [ if on button1:
    if (posn(tbPoint, -1, 1, &mouseX, &mouseY)) {
      if (cursormode != C_DEFAULT) {
        [ select it
        cursormode = C_DEFAULT;
        set(toggleBtn);
      }
    }
    
    [ if on button5:
    if (posn(tbMove, -1, 1, &mouseX, &mouseY)) {
      if (cursormode != C_WALK) {
        [ select it
        cursormode = C_WALK;
        set(toggleBtn);
      }
    }
  
    [ if on button6:
    if (posn(tbLook, -1, 1, &mouseX, &mouseY)) {
      if (cursormode != C_LOOK) {
        [ select it
        cursormode = C_LOOK;
        set(toggleBtn);
      }
    }
  
    [ if on button7:
    if (posn(tbTalk, -1, 1, &mouseX, &mouseY)) {
      if (cursormode != C_TALK) {
        [ select it
        cursormode = C_TALK;
        set(toggleBtn);
      }
    }
  
    [ if on button8:
    if (posn(tbUse, -1, 1, &mouseX, &mouseY)) {
      if (cursormode != C_USE) {
        [ select it
        cursormode = C_USE;
        set(toggleBtn);
      }
    }
  }
  [ check for mouse down/mouse up on quit/save/restore buttons
  if (!tbBtnDown) {
    [ if on button2:
    if (posn(tbQuit, -1, 1, &mouseX, &mouseY) && !deathType) {
      set.loop(tbQuit, 1);
      set(tbBtnDown);
    }
    [ if on button3:
    if (posn(tbSave, -1, 1, &mouseX, &mouseY) && !deathType) {
      set.loop(tbSave, 1);
      set(tbBtnDown);
    }
    [ if on button4:
    if (posn(tbRestore, -1, 1, &mouseX, &mouseY)) {
      set.loop(tbRestore, 1);
      set(tbBtnDown);
    }
  }
}

[ update buttons
if (toggleBtn) {
  reset(toggleBtn);
  if (cursormode == C_DEFAULT) {
    set.loop(tbPoint, 1);
  } else {
    set.loop(tbPoint, 0);
  }
  if (cursormode == C_WALK) {
    set.loop(tbMove, 1);
  } else {
    set.loop(tbMove, 0);
  }
  if (cursormode == C_LOOK) {
    set.loop(tbLook, 1);
  } else {
    set.loop(tbLook, 0);
  }
  if (cursormode == C_TALK) {
    set.loop(tbTalk, 1);
  } else {
    set.loop(tbTalk, 0);
  }
  if (cursormode == C_USE) {
    set.loop(tbUse, 1);
  } else {
    set.loop(tbUse, 0);
  }
}

[ check for mouse up on a button
if (mouseBtn != 1) {
  if (tbBtnDown) {
    reset(tbBtnDown);
    current.loop(tbQuit, work1);
    current.loop(tbSave, work2);
    current.loop(tbRestore, work3);
    set.loop(tbQuit, 0);
    set.loop(tbSave, 0);
    set.loop(tbRestore, 0);
    force.update(tbQuit);
    [ take appropriate action
    if (work1 == 1 && posn(tbQuit, -1, 1, &mouseX, &mouseY)) {
      quit(0);
    }
    if (work2 == 1 && posn(tbSave, -1, 1, &mouseX, &mouseY)) {
      save.game();
    }
    [ if on button3:
    if (work3 == 1 && posn(tbRestore, -1, 1, &mouseX, &mouseY)) {
      restore.game();
    }
    
    [ ignore clicks for one cycle
    set.key(-1, -1, cLeftClick); [ clear.controller(cLeftClick);
  }
}

return();

[*****
[ messages         [  declared messages go here
[*****
#message 1 "%g40"
#message 2 "%g41"
#message 3 "%g42"
#message 4 "%g43"
#message 5 "%g44"
#message 6 "%g45"