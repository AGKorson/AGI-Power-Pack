[*********************************************************************
[ 
[ lgc.ToolbarFunctions
[ 
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define toggleBtn        f240

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ if wait cursor is active, do nothing
if (cursoricon == C_WAIT) {
  return();
}

[ if ego is dead, force the default cursor
if (deathType) {
  if (cursormode != C_DEFAULT) {
    cursormode = C_DEFAULT;
    set(toggleBtn);
  }
}

[ if mouse is NOT over toolbar AND NOT over menu, show correct cursor
if ((mouseX < 14 || mouseX > 145 || mouseY > 17) && mouseY < 248) {
  [ show correct cursor icon
  if (cursormode != cursoricon) {
    [ change it
    cursoricon = cursormode;
    set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM);
  }
  [ reenable click2move if in walk mode
  if (cursormode == C_WALK) {
    set(click2move);
  }
} else {
  [ show default cursor icon
  if (cursoricon != C_DEFAULT) {
    [ change it
    cursoricon = C_DEFAULT;
    set.key(BYNUM, &m1, mouse); [ set.cursor(FN_MODE, MSGNUM);
    [ disable click2move
    reset(click2move);
  }
}

[ right-dbl click to cycle through modes
if (controller(cRightDblClick)) {
  if (cursormode > 0 && cursormode < 6) {
    ++cursormode;
    if (cursormode == 6) {
      cursormode = 1;
    }
    set(toggleBtn);
  }
}

[ check for button click
if (controller(cLeftClick)) {
  if (!deathType) {
    [ if on button1:
    if (mouseX > 14 && mouseX < 31 && mouseY < 17) {
      if (cursormode != C_DEFAULT) {
        [ select it
        cursormode = C_DEFAULT;
        set(toggleBtn);
      }
    }

    [ if on button5:
    if (mouseX > 80 && mouseX < 97 && mouseY < 17) {
      if (cursormode != C_WALK) {
        [ select it
        cursormode = C_WALK;
        set(toggleBtn);
      }
    }
  
    [ if on button6:
    if (mouseX > 96 && mouseX < 113 && mouseY < 17) {
      if (cursormode != C_LOOK) {
        [ select it
        cursormode = C_LOOK;
        set(toggleBtn);
      }
    }
  
    [ if on button7:
    if (mouseX > 112 && mouseX < 129 && mouseY < 17) {
      if (cursormode != C_TALK) {
        [ select it
        cursormode = C_TALK;
        set(toggleBtn);
      }
    }
  
    [ if on button8:
    if (mouseX > 128 && mouseX < 145 && mouseY < 17) {
      if (cursormode != C_USE) {
        [ select it
        cursormode = C_USE;
        set(toggleBtn);
      }
    }
    [ normally after processing a click, you should always 
    [ clear the controller; here we don't because this is  
    [ the last logic run in the game cycle, so controllers 
    [ will be reset anyway (this saves us a few bytes of
    [ memory)
  }
  
  [ check for mouse down/mouse up on quit/save/restore buttons
  if (!tbBtnDown) {
    [ if on button2:
    if (mouseX > 31 && mouseX < 48 && mouseY < 17) {
      set.cel(tbActionBtn, 1);
      position(tbActionBtn, 32, 16);
      draw(tbActionBtn);
      set(tbBtnDown);
    }
    [ if on button3:
    if (mouseX > 47 && mouseX < 64 && mouseY < 17) {
      if (deathType) {
        set.cel(tbActionBtn, 8);
      } else {
        set.cel(tbActionBtn, 2);
      }
      position(tbActionBtn, 48, 16);
      draw(tbActionBtn);
      set(tbBtnDown);
    }
    [ if on button4:
    if (mouseX > 63 && mouseX < 80 && mouseY < 17) {
      set.cel(tbActionBtn, 3);
      position(tbActionBtn, 64, 16);
      draw(tbActionBtn);
      set(tbBtnDown);
    }
  }
}

[ update buttons
if (toggleBtn) {
  reset(toggleBtn);
  if (cursormode == C_DEFAULT) {
    set.cel(tbStateBtn, 0);
    reposition.to(tbStateBtn, 15, 16);
  }
  if (cursormode == C_WALK) {
    set.cel(tbStateBtn, 4);
    reposition.to(tbStateBtn, 81, 16);
  }
  if (cursormode == C_LOOK) {
    set.cel(tbStateBtn, 5);
    reposition.to(tbStateBtn, 97, 16);
  }
  if (cursormode == C_TALK) {
    set.cel(tbStateBtn, 6);
    reposition.to(tbStateBtn, 113, 16);
  }
  if (cursormode == C_USE) {
    set.cel(tbStateBtn, 7);
    reposition.to(tbStateBtn, 129, 16);
  }
  [ set click2move if in walk mode
  if (cursormode == C_WALK) {
    set(click2move);
  } else {
    reset(click2move);
  }
}

[ check for mouse up on a button
if (mouseBtn != 1) {
  if (tbBtnDown) {
    reset(tbBtnDown);
    [ which btn is down (cel is set)
    current.cel(tbActionBtn, work1);
    [ restart uses same button as save
    if (work1 == 8) {
      work1 = 2;
    }
    erase(tbActionBtn);
    force.update(tbActionBtn);
    set.cel(tbActionBtn, 0);
    [ take appropriate action
    if (work1 == 1 && mouseX > 31 && mouseX < 48 && mouseY < 17) {
      quit(0);
    }
    if (work1 == 2 && mouseX > 47 && mouseX < 64 && mouseY < 17) {
      [ if dead, restart; if not dead, save
      if (deathType) {
        call(lgc.CacheOptions);
        restart.game();
      } else {
        [ because patient views aren't loaded, need to erase them
        [ prior to saving; then redraw afterward; when restoring,
        [ the views need to be loaded BEFORE the patients are redrawn
        if (currentRoom == rm.Lobby) {
          #define oPatient2        o5
          #define oPatient3        o6
          #define oPatient4        o7
          [ erase patients 2,3,4
          erase(oPatient2);
          erase(oPatient3);
          erase(oPatient4);
        } 
        save.game();
        if (currentRoom == rm.Lobby) {
          [ redraw patients, if currently in the room
          if (patient2Loc != LOC_GONE) {
            draw(oPatient2);
          }
          if (patient3Loc != LOC_GONE) {
            draw(oPatient3);
          }
          if (patient4Loc != LOC_GONE) {
            draw(oPatient4);
          }
        }
      }
    }
    [ if on button3:
    if (work1 == 3 && mouseX > 63 && mouseX < 80 && mouseY < 17) {
      restore.game();
    }
    
    [ ignore clicks for rest of cycle
    set.key(CLR.CTRL, CLR.CTRL, cLeftClick); [ clear.controller(cNUM)
  }
}

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "%g20"
#message 2 "%g21"
#message 3 "%g22"
#message 4 "%g23"
#message 5 "%g24"
#message 6 "%g25"
#message 7 "%g26"
#message 8 "%g27"
