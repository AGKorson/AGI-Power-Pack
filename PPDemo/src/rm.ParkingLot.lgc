[ ********************************************************************
[
[ rm.ParkingLot
[
[ 
[
[ ********************************************************************

[ **************************************
[ LOCAL DEFINES
[ **************************************
#define egoCar        o1
#define oPatient      o2
#define oPatientCar   o3
#define btnYes        o4
#define btnNo         o5

#define egoCarSeq    v220
#define   EC_IDLE      0
#define   EC_ARRIVE    1
#define   EC_PARKING   2
#define   EC_PARKED    3
#define   EC_LEAVE    10
#define   EC_STARTCAR 11
#define   EC_LEAVING  12

#define patientSeq   v221
#define   IDLE         0
[ patient 1 arriving
#define   P1_DRIVE_A 201
#define   P1_STOP    202
#define   P1_WALK_A    3
#define   P1_WALK_B    4
[ patient 1 leaving
#define   P1_WALK_C  105
#define   P1_WALK_D  106
#define   P1_WALK_E  107
#define   P1_START   208
#define   P1_DRIVE_B 209
#define   P1_DRIVE_C 210
#define   P1_DRIVE_D 211
[ patient 2 arriving
#define   P2_DRIVE_A 212
#define   P2_DRIVE_B 213
#define   P2_DRIVE_C 214
#define   P2_DRIVE_D 215
#define   P2_STOP    216
#define   P2_WALK_A   17
#define   P2_WALK_B   18
[ patient 2 leaving
#define   P2_WALK_C  119
#define   P2_WALK_D  120
#define   P2_WALK_E  121
#define   P2_START   222
#define   P2_DRIVE_E 223
#define   P2_DRIVE_F 224
#define patientTimer v222
#define carX         v223
#define carY         v224
#define deathSeq     v225

#define fCarDone     f220
#define fPatientDone f221
#define fPatientHere f222
#define f2ndspot     f223
#define fEgoDead     f224
#define fRunOver     f225
#define fClickOn     f226
#define fSkip1       f227
#define fElectrocuted  f228
#define fCarSound     f229

#define CAR_INSTRUMENT   41  [ 41 = viola

[ **************************************
[ FIRST CYCLE ONLY
[ **************************************
if (newRoom) {
  [ this is the first cycle through this room
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  
  [ add toolbar buttons
  load.view(vw.ButtonsDown);
  call(lgc.InitToolbar);
  
  [ the horizon defines the upper limit of ego's movement
  set.horizon(117);
  
  load.view(vw.Cars);
  [ add permanently parked cars
  #define tmpView     v220
  #define tmpLoop     v221
  #define tmpCel      v222
  #define tmpX        v223
  #define tmpY        v224
  #define tmpPri      v225
  #define tmpMgn      v226
 
  [ parking spot 1
  tmpView = vw.Cars;
  tmpLoop = car0car1;
  tmpLoop /= 16;
  tmpLoop += 19;
  tmpCel = 0;
  tmpX = 106;
  tmpY = 141;
  tmpPri = 13;
  tmpMgn = 4;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 2
  tmpLoop = car0car1;
  block(BIT.AND, 0, &tmpLoop, 15); [ bit.and(BYVAL, VAR, AMOUNT)
  tmpX = 92;
  tmpY = 154;
  tmpPri = 14;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 3
  tmpLoop = car2car3;
  tmpLoop /= 16;
  tmpLoop += 19;
  tmpX = 51;
  tmpY = 167;
  tmpPri = 15;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 4
  tmpLoop = car2car3;
  block(BIT.AND, 0, &tmpLoop, 15); [ bit.and(BYVAL, VAR, AMOUNT)
  tmpLoop += 19;
  tmpX = 46;
  tmpY = 155;
  tmpPri = 14;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 5
  tmpLoop = car4car5;
  tmpLoop /= 16;
  tmpX = 26;
  tmpY = 156;  
  tmpPri = 0;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  
  [ ego's car
  animate.obj(egoCar);
  tmpLoop = car4car5;
  block(BIT.AND, 0, &tmpLoop, 15); [ bit.and(BYVAL, VAR, AMOUNT)
  set.view(egoCar, vw.Cars);
  set.loop.v(egoCar, tmpLoop);
  ignore.blocks(egoCar);
  
  [ done with temp variables; reset module variables as needed
  patientSeq = IDLE;
  
  [ tiny ego view
  load.view(vw.EgoSmall);
  set.view(ego, vw.EgoSmall);
  
  [ patient car
  animate.obj(oPatientCar);
  set.view(oPatientCar, vw.Cars);
  ignore.objs(oPatientCar);
  [ don't draw until needed
  
  [ tiny patient view
  animate.obj(oPatient);
  load.view(vw.SmallPerson1);
  load.view(vw.SmallPerson2);
  load.view(vw.SmallPerson3);
  load.view(vw.SmallPerson4); 
  load.view(vw.SmallPerson5);
  load.view(vw.SmallPerson6);
  load.view(vw.SmallPerson7);
  [ don't draw until needed
  
  [ buttons for end game msgbox
  load.view(vw.ParkingLotArt);
  animate.obj(btnYes);
  animate.obj(btnNo);
  set.view(btnYes, vw.ParkingLotArt);
  set.view(btnNo, vw.ParkingLotArt);
  ignore.objs(btnYes);
  ignore.objs(btnNo);
  ignore.blocks(btnYes);
  ignore.blocks(btnNo);
  ignore.horizon(btnYes);
  ignore.horizon(btnNo);
  position(btnYes, 62, 96);
  set.priority(btnYes, 15);
  position(btnNo, 81, 96);
  set.priority(btnNo, 15);
  [ don't draw until needed
  
  [ set initial timer to slightly faster random amount
  random(40, 140, patientTimer);
  
  [ sound effects for this room
  load.sound(s.Car);
  load.sound(s.CarStart);
  load.sound(s.CarStop);
  load.sound(s.Shock);
set(forceAutoloop);  
  [ if starting (coming from intro screen) and first game
  if (previousRoom == rm.Title && forceAutoloop) {
    [ begin opening sequence dialog
    egoCarSeq = EC_ARRIVE;
    [ reset forceAutoloop
    reset(forceAutoloop);
  } else {
    [ enable menu/mouse input
    set(enableMenu);
    reset(disableGameFunctions);
    [ skip opening sequence
    egoCarSeq = EC_IDLE;
    [ if car wasn't locked, there's a chance it gets stolen
    if (previousRoom > rm.Title && !carLocked) {
      random(1, 10, work1);
      if (work1 == 10) {
        [ it's gone!
        set(fEgoDead);
        deathType = 7;
      }
    }
    if (!fEgoDead) {
      [ car is in parking spot
      position(egoCar, 41, 143);
      draw(egoCar);
      stop.cycling(egoCar);
    }
    
    [ if startng/restarting 
    if ((previousRoom == 0 || previousRoom == rm.Title)) {
      [ add ego next to car
      position(ego, 50, 139);
    } else {
      [ coming from lobby
      position(ego, 54, 121);
    }
    egodir = STOPPED;
    draw(ego);
  }
    
  [ display the picture on screen
  show.pic();
  [ fade in
  block(FADE.IN, 0, 25, 0); [ fade.in(BYVAR, DELAY, COLOR)
  
  [ if not showing opening dialog
  if (egoCarSeq == EC_IDLE) {
    [ restore cursor
    cursoricon = cursormode;
    set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  }
}

[ **************************************
[  NON-INPUT CODE 
[ **************************************
if (egoCarSeq) {
  [ ego arrives
  if (egoCarSeq == EC_ARRIVE) {
    [ disallow menu use
    reset(enableMenu);
    [ game functions are disabled
    set(disableGameFunctions);
    [ no input allowed
    prevent.input();
    
    [ move car to parking spot
    ++egoCarSeq;
    position(egoCar, 0, 131);
    draw(egoCar);
    move.obj(egoCar, 40, 143, 1, fCarDone);
    [ restore cursor for message
    cursoricon = cursormode;
    set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
    print("At long last, you finally made it to Oakhurst, "
          "California to visit the original Sierra On-Line headquarters "
          "building.");
    print("It has been a long drive, but you are super excited as you "
          "pull into the parking lot.");
    [ show wait cursor
    cursoricon = C_WAIT;
    set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
    work1 = 0;
    work2 = CAR_INSTRUMENT;
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
    sound(s.Car, soundDone);
    set(playSound);
  }
  if (egoCarSeq == EC_PARKING && soundDone) {
    sound(s.Car, soundDone);
  }
  if (egoCarSeq == EC_PARKING && fCarDone) {
    reset(fCarDone);
    [ stop car
    sound(s.CarStop, soundDone);
    ++egoCarSeq;
  }
  if (egoCarSeq == EC_PARKED && soundDone) {
    [ ego gets out
    reset(soundDone);
    egoCarSeq = EC_IDLE;
    stop.cycling(egoCar);
    position(ego, 50, 139);
    draw(ego);
    [ restore cursor for message
    cursoricon = cursormode;
    set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
    print("The building is now a medical office. There aren't too many "
          "cars in the parking lot. So you decide to go inside and "
          "take a look around.");
    print("Who knows? Maybe you might find some original Sierra memorabilia "
          "or other signs of long past gaming history.");
    [ allow menu use
    set(enableMenu);
    [ game functions are no longer disabled
    reset(disableGameFunctions);
    [ allow input
    accept.input();
  }
  [ skip rest of room logic until opening sequence is finished
  if (egoCarSeq < EC_PARKED) {
    return();
  }
  
  [ ego drives away
  if (egoCarSeq == EC_LEAVE) {
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.CarStart, soundDone);
      set(playSound);
    } else {
      [ skip the sound
      set(soundDone);
    }
    egoCarSeq = EC_STARTCAR;
  }
  if (egoCarSeq == EC_STARTCAR && soundDone) {
    reset(soundDone);
    reset(playSound);
    [ ego drives away
    egoCarSeq = EC_LEAVING;
    start.cycling(egoCar);
    move.obj(egoCar, 143, 126, 2, fCarDone);
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.Car, soundDone);
      set(playSound);
    }
  }
  if (egoCarSeq == EC_LEAVING && soundDone) {
    [ keep playing
    sound(s.Car, soundDone);
    set(playSound);
  }
  if (egoCarSeq == EC_LEAVING && fCarDone) {
    reset(fCarDone);
    [ only stop sound if active
    if (playSound) {
      stop.sound();
      reset(soundDone);
      reset(playSound);
    }
    egoCarSeq = EC_IDLE;
    erase(egoCar);
    set(fEgoDead);
    deathType = 99;
  }  
}

[ timing bug with controllers
if (fSkip1) {
  reset(fSkip1);
  set.key(-1, -1, cLeftClick); [ clear.controller(cNUM);  
}

[ parked cars in rightside parking lot don't quite align with priority bands
get.posn(ego, work1, work2);
if (work1 > 102 && work1 < 121 && work2 > 141 && work2 < 145) {
  set.priority(ego, 13);
} else {
  if (work1 > 88 && work1 < 108 && work2 >154 && work2 < 157) {
    set.priority(ego, 14);
  } else {
    release.priority(ego);
  }
}

[ check for random patient arriving or leaving
if (patientTimer == 0) {
  [ reset the timer
  random(80, 250, patientTimer);
  if (fPatientHere) {
    [ time for patient to leave
    position(oPatient, 55, 117);
    if (f2ndspot) {
      [ go back to parking spot 2
      move.obj(oPatient, 55, 127, 1, fPatientDone);
      patientSeq = P2_WALK_C;
    } else {
      [ go back to parking spot 1
      move.obj(oPatient, 55, 127, 1, fPatientDone);
      patientSeq = P1_WALK_C;
    }
    draw(oPatient);
  } else {
    [ time for patient to arrive
    random(0, 1, work1);
    if (work1 == 0) {
      reset(f2ndspot);
      patientSeq = P1_DRIVE_A; [ drive to first point
      random(0, 18, work1);
      set.loop.v(oPatientCar, work1);
      position(oPatientCar, 0, 131);
      move.obj(oPatientCar, 18, 143, 2, fPatientDone);
    } else {
      set(f2ndspot);
      patientSeq = P2_DRIVE_A; [ gdrive to first point
      random(19, 37, work1);
      set.loop.v(oPatientCar, work1);
      position(oPatientCar, 143, 128);
      move.obj(oPatientCar, 99, 128, 2, fPatientDone);
    }
    draw(oPatientCar);
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.Car, soundDone);
      set(playSound);
    } else {
      [ skip the sound
      set(soundDone);
    }
      
    [ choose a random patient
    random(2, 8, work1);
    set.view.v(oPatient, work1);
  }
} else {
  if (patientSeq == IDLE) {
    [ countdown
    --patientTimer;
  }
}

if (fPatientDone) {
  [ patient/path 2
  if (patientSeq == P2_DRIVE_F) {
    [ car has left 
    erase(oPatientCar);
    reset(fPatientHere);
    reset(fPatientDone);
    if (playSound) {
      stop.sound();
      reset(playSound);
    }
    patientSeq = IDLE;
  }
  if (patientSeq == P2_DRIVE_E) {
    [ move car to last point
    move.obj(oPatientCar, 0, 131, 2, fPatientDone);
    patientSeq = P2_DRIVE_F;
  }
  if (patientSeq == P2_WALK_E) {
    [ patient gets in car
    erase(oPatient);
    [ start car
    reset(fPatientDone);
    patientSeq = P2_START; 
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.CarStart, soundDone);
      set(playSound);
    } else {
      set(soundDone);
    }
  }
  if (patientSeq == P2_WALK_D) {
    [ walk to car
    move.obj(oPatient, 88, 142, 1, fPatientDone);
    patientSeq = P2_WALK_E;  
  }
  if (patientSeq == P2_WALK_C) {
    [ walk to next point
    move.obj(oPatient, 70, 142, 1, fPatientDone);
    patientSeq = P2_WALK_D;  
  }
  if (patientSeq == P2_WALK_B) {
    [ patient enters building
    erase(oPatient);
    patientSeq = IDLE;
    set(fPatientHere);
    reset(fPatientDone);
  }
  if (patientSeq == P2_WALK_A) {
    [ walk to building door
    move.obj(oPatient, 55, 117, 1, fPatientDone);
    patientSeq = P2_WALK_B;  
  }
  if (patientSeq == P2_DRIVE_D) {
    [ car is at parking spot 2
    stop.cycling(oPatientCar);
    ignore.blocks(oPatientCar);
    block(78, 138, 99, 142);
    [ stop car
    reset(fPatientDone);
    patientSeq = P2_STOP; 
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.CarStop, soundDone);
      set(playSound);
    } else {
      set(soundDone);
    }
  }
  if (patientSeq == P2_DRIVE_C) {
    [ drive to parking spot 2
    move.obj(oPatientCar, 83, 141, 1, fPatientDone);
    patientSeq = P2_DRIVE_D;  
  }
  if (patientSeq == P2_DRIVE_B) {
    [ drive to next point
    move.obj(oPatientCar, 61, 141, 1, fPatientDone);
    patientSeq = P2_DRIVE_C;  
  }
  if (patientSeq == P2_DRIVE_A) {
    [ drive to next point
    move.obj(oPatientCar, 75, 129, 2, fPatientDone);
    patientSeq = P2_DRIVE_B;  
  }
  
  [ patient/path 1
  if (patientSeq == P1_DRIVE_D) {
    [ car has left
    erase(oPatientCar);
    reset(fPatientHere);
    reset(fPatientDone);
    if (playSound) {
      stop.sound();
      reset(playSound);
    }
    patientSeq = IDLE;
  }
  if (patientSeq == P1_DRIVE_C) {
    [ drive to last point
    move.obj(oPatientCar, 143, 128, 2, fPatientDone);
    patientSeq = P1_DRIVE_D;
  }
  if (patientSeq == P1_DRIVE_B) {
    [ drive to next point
    move.obj(oPatientCar, 20, 128, 2, fPatientDone);
    patientSeq = P1_DRIVE_C;
  }
  if (patientSeq == P1_WALK_E) {
    [ patient gets in car
    erase(oPatient);
    [ start car
    reset(fPatientDone);
    patientSeq = P1_START; 
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.CarStart, soundDone);
      set(playSound);
    } else {
      set(soundDone);
    }
  }
  if (patientSeq == P1_WALK_D) {
    [ walk to next point
    move.obj(oPatient, 25, 140, 1, fPatientDone);
    patientSeq = P1_WALK_E;
  }
  if (patientSeq == P1_WALK_C) {
    [ walk to next point
    move.obj(oPatient, 38, 127, 1, fPatientDone);
    patientSeq = P1_WALK_D;
  }
  if (patientSeq == P1_WALK_B) {
    [ patient enters building
    erase(oPatient);
    patientSeq = IDLE;
    set(fPatientHere);
    reset(fPatientDone);
  }
  if (patientSeq == P1_WALK_A) {
    [ walk to building door
    move.obj(oPatient, 55, 117, 1, fPatientDone);
    patientSeq = P1_WALK_B;
  }
  if (patientSeq == P1_DRIVE_A) {
    [ car is at parking spot 1
    stop.cycling(oPatientCar);
    ignore.blocks(oPatientCar);
    block(14, 140, 34, 144);
    [ stop car
    reset(fPatientDone);
    patientSeq = P1_STOP; 
    [ only play sound if walkman is not in use
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.CarStop, soundDone);
      set(playSound);
    } else {
      set(soundDone);
    }
  }
}

if (soundDone) {
  reset(soundDone);
  if (patientSeq == P1_START) {
    [ drive car to first point
    start.cycling(oPatientCar);
    move.obj(oPatientCar, 5, 143, 1, fPatientDone);
    unblock();
    patientSeq = P1_DRIVE_B;
    [ playsound
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.Car, soundDone);
      set(playSound);
    }
    goto(checkdeath);
  }
  if (patientSeq == P1_STOP) {
    [ patient walks to first point
    position(oPatient, 25, 140);
    draw(oPatient);
    move.obj(oPatient, 55, 125, 1, fPatientDone);
    patientSeq = P1_WALK_A;
    goto(checkdeath);
  }
  if (patientSeq == P2_START) {
    [ drive car to first point
    start.cycling(oPatientCar);
    move.obj(oPatientCar, 61, 131, 1, fPatientDone);
    unblock();
    patientSeq = P2_DRIVE_E;
    if ((currentTrack == 0 || currentTrack > 128)) {
      work1 = 0;
      work2 = CAR_INSTRUMENT;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
      sound(s.Car, soundDone);
      set(playSound);
    }
    goto(checkdeath);
  }
  if (patientSeq == P2_STOP) {
    [ patient walks to first point
    position(oPatient, 88, 142);
    draw(oPatient);
    move.obj(oPatient, 72, 142, 1, fPatientDone);
    patientSeq = P2_WALK_A;
    goto(checkdeath);
  }
  
  [ continue engine noise if car is moving
  if ((currentTrack == 0 || currentTrack > 128) && 
      patientSeq > 200) {
    work1 = 0;
    work2 = CAR_INSTRUMENT;
    set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
    sound(s.Car, soundDone);
    set(playSound);
  }
}

:checkdeath
if (!fEgoDead) {
  [ check for ego getting run over
  get.posn(oPatientCar, carX, carY);
  work1 = carY;
  work1 -= 2;
  if (egoY >= work1 && egoY <= carY) {
    work1 = egoX;
    work1 += 3;
    work2 = carX;
    work2+= 15;
    if (work1 >= carX && egoX <= work2) {
    [ if ego is on or in front of the car, force priority
      if (egoY == carY) {
        get.priority(ego, work1);
        ++work1;
        set.priority.v(ego, work1);
      }
      set(fEgoDead);
      [ temporarily stop driving
      stop.update(oPatientCar);
      load.view(vw.EgoDead);
      set.view(ego, vw.EgoDead);
      egoDir = STOPPED;
      program.control();
      prevent.input();
      [ turn off auto-cycle to allow cycle-at-rest
      work1 = 0;
      set.upper.left(&ego, &work1);
      work1 = 2;
      cycle.time(ego, work1);
      end.of.loop(ego, fRunOver);
      print("Uh oh! That car just hit you!");
    }
  }
  [ check for batmobile electrocution
  if (deathSeq > 0) {
    if (deathSeq == 1) {
      ++deathSeq;
      current.loop(ego, work1);
      set.view(ego, vw.ParkingLotArt);
      if (work1 > 0 && work1 < 3) {
        set.loop(ego, 2);
      } else {
       set.loop(ego, 1);
      }
      set.cel(ego, 0);
      [ allow cycle at rest
      work1 = 0;
      set.upper.left(&ego, &work1);
      end.of.loop(ego, fElectrocuted);
      if ((currentTrack == 0 || currentTrack > 128)) {
        work1 = 3;
        work2 = 129;
        set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
        sound(s.Shock, soundDone);
        set(playSound);
      }
    }
    if (fElectrocuted) {
      if (deathSeq < 5) {
        ++deathSeq;
        set.cel(ego, 0);
        end.of.loop(ego, fElectrocuted);
        if ((currentTrack == 0 || currentTrack > 128)) {
          work1 = 3;
          work2 = 129;
          set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT);
          sound(s.Shock, soundDone);
          set(playSound);
        }
      }
      if (deathSeq == 5) {
        ++deathSeq;
        current.loop(ego, work1);
        load.view(vw.EgoDead);
        set.view(ego, vw.EgoDead);
        --work1;
        set.loop.v(ego, work1);
        set.cel(ego, 0);
        work1 = 2;
        cycle.time(ego, work1);
        end.of.loop(ego, fElectrocuted);
        set(fEgoDead);
        print("Yikes! This batmobile has an anti-theft system!");
      }
    }
  }
}

[ check for end of run-over death cycle
if (fRunOver) {
  reset(fRunOver);
  deathType = 1;
  work1 = 1;
  cycle.time(ego, work1);
  accept.input();
  ignore.objs(oPatient);
}

[ check for end of electrocution death cycle
if (fElectrocuted && deathSeq == 6) {
  reset(fElectrocuted);
  ++deathSeq;
  deathType = 5;
  accept.input();
  ignore.objs(oPatient);
}

[ if dead, skip player input
if (fEgoDead) {
  [ check for stolen car
  if (deathType == 7) {
    print("Hey! Where is your car???");
  ignore.objs(oPatient);
  }
  return();
}

[ **************************************
[ PROCESS PLAYER INPUT
[ **************************************
if (haveInput && !haveMatch && unknownWordNum == 0) {
[ TODO: more said statements for parking lot
  [ look sky
  [ look mountain
  [ look building
  [ look car
  [ look patient
  [ look tree/bushes
  [ look parking lot
  [ look sidewalk/lawn
  [ look door
  [ open door
  [ get in car, enter car
  [ drive away, leave, go home
  [ take car, steal car, 
  [ take/steal batmobile
  [ hit/punch/kick/kill anything- not allowed "unprovoked violence is never acceptable"
  [ climb anything - not allowed (in most rooms)
  
  
 [ place said tests here
  if (said("look")) {
    print("You are in the Sierra building parking lot.");
  }
  if (said("use", "keyfob")) {
    if (carLocked) {
      print("Using your keyfob, you unlock your car door.");
      reset(carLocked);
      work1 = -2;
      call(lgc.ScoreHandler);
    } else {
      print("Thinking it's best not to take any chances, "
            "you hit the lock button on your keyfob to "
            "prevent your car from being stolen.");
      set(carLocked);
      work1 = 2;
      call(lgc.ScoreHandler);
    }
  }
  
  if (said("lock", "car")) {
    [ if already locked
    if (carLocked) {
      print("It's already locked.");
    } else {
      print("Thinking it's best not to take any chances, "
            "you hit the lock button on your keyfob to "
            "prevent your car from being stolen.");
      set(carLocked);
      work1 = 2;
      call(lgc.ScoreHandler);
    }
  }
  if (said("unlock", "car")) {
    if (carLocked) {
      print("Using your keyfob, you unlock your car door.");
      reset(carLocked);
      work1 = -2;
      call(lgc.ScoreHandler);
    } else {
      print("It's already unlocked.");
    }
  }
  if (said("get in", "car")) {
    goto(entercar);
  }
}

[ if cursor is look/talk/use and left-click and NOT 
[ clicking on the actual toolbar, check for clicks
[ on in-game items
if (cursoricon > C_WALK && cursoricon < C_WAIT && 
    controller(cLeftClick) &&
    (mouseX < 14 || mouseX > 145 || mouseY > 17)) {
  [ ignore borders, off screen
  if (mouseY > 167) {
    goto(doneclick);
  }
  if (cursormode == C_LOOK) {
    [ same as 'look'
    [ check for objects first
    
    [ ego
    if (posn(ego, ON.OBJ, 0, &mouseX, &mouseY)) {
      print("Yes, Drew is a handsome fellow. Easy on the eyes.");
      goto(doneclick);
    }
    
    [ ego car
    if (posn(egoCar, ON.OBJ, 0, &mouseX, &mouseY)) {
      current.loop(egoCar, work1);
      if (work1 > 18) {
        work1 -= 19;
      }
      if (work1 < 8) {
        print("This is your car. You drove it here.");
      } else {
        if (work1 < 12) {
          print("Your minivan is great to have on long road trips like this one.");
        } else {
          if (work1 < 17) {
            print("Your truck doesn't get the best mileage, but it's great for hauling stuff.");
          } else {
            if (work1 == 17) {
              print("This is your red sportscar. You love to go fast!");
            } else {
              print("Yeah, this is your batmobile. How cool is that?");
            }
          }
        }
      }
      goto(doneclick);
    }
    
    [ patient
    if (posn(oPatient, ON.OBJ, 0, &mouseX, &mouseY)) {
      [ coming or going?
      if (patientSeq > 100) {
        print("This person is leaving.");
      } else {
        print("This person must have an appointment. They seem to be in a hurry.");
      }
      goto(doneclick);
    }
    
    [ patient car
    if (posn(oPatientCar, ON.OBJ, 0, &mouseX, &mouseY)) {
      current.loop(oPatientCar, work1);
      if (work1 > 18) {
        work1 -= 19;
      }
      if (work1 < 8) {
        print("It's a patient's car.");
      } else {
        if (work1 < 12) {
          print("This minivan belongs to one of the patients.");
        } else {
          if (work1 < 17) {
            print("It's a truck belonging to one of the patients.");
          } else {
            if (work1 == 17) {
              print("This sportscar belongs to one of the patients.");
            } else {
              print("A batmobile? Who drives a batmobile to a doctor's appointment?");
            }
          }
        }
      }
      goto(doneclick);
    }

    [ parked cars
    reset(fClickOn);
    if (mouseX > 26 && mouseX < 41 && mouseY > 145 && mouseY < 157) {
      set(fClickOn);
    }
    if (mouseX > 46 && mouseX < 61 && mouseY > 144 && mouseY < 155) {
      set(fClickOn);
    }
    if (mouseX > 51 && mouseX < 66 && mouseY > 156 && mouseY < 167) {
      set(fClickOn);
    }
    if (mouseX > 106 && mouseX < 121 && mouseY > 130 && mouseY < 141) {
      set(fClickOn);
    }
    if (mouseX > 92 && mouseX < 107 && mouseY > 143 && mouseY < 154) {
      set(fClickOn);
    }
    if(fClickOn) {
      print("There are a several cars in the parking lot. Only one is yours. This is not the one.");
      goto(doneclick);
    }
    
    [ then check background
    [ pixel color can help with discriminating what was clicked
    block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)

    if (work1 > 239) {
      [ foreground tree
      print("Giant evergreen trees surround the parking lot.");
      goto(doneclick);
    }
    
    if (work1 > 111) { 
      [ forest/mountain/sky
      print("The forest and mountain are beautiful to look at.");
      goto(doneclick);
    }
    if (work1 > 95) {
      [ lawn/sidewalk
      print("The lawn and shrubbery is well maintained.");
      goto(doneclick);
    }
    if (work1 > 79) {
      [ building, door
      if (mouseX > 53 && mouseX < 60 && mouseY > 104 && mouseY < 139) {
        print("There is a large automatic glass door at the entrance to building.");
      } else {
        print("The building looks almost the same as it did thirty years ago.");
      }
      goto(doneclick);
    }
    [ if nothing else, must be parking lot
    print("It's a parking lot. What else do you want me to say?");
    goto(doneclick);
  }

  if (cursormode == C_TALK) {
    [ same as 'talk to'

    [ ego
    if (posn(ego, ON.OBJ, 0, &mouseX, &mouseY)) {
      print("You have nothing to say to yourself.");
      goto(doneclick);
    }
    
    [ ego car
    if (posn(egoCar, ON.OBJ, 0, &mouseX, &mouseY)) {
      print("Your car has nothing to say.");
      goto(doneclick);
    }
    
    [ patient
    if (posn(oPatient, ON.OBJ, 0, &mouseX, &mouseY)) {
      distance(ego, oPatient, work1);
      if (work1 <= 20) {
        [ coming or going?
        if (patientSeq > 100) {
          print("\"Sorry, gotta run!\"");
        } else {
          print("\"Can't talk now, I'm late for my appointment.\"");
        }
      } else {
        print("The person is too far away to hear you.");
      }
      
      goto(doneclick);
    }
    
    [ patient car
    if (posn(oPatientCar, ON.OBJ, 0, &mouseX, &mouseY)) {
      [ if patient is driving
      if (patientSeq > 200) {
        print("The person in the car can't hear you.");
      } else {
        print("There is no one in the car to talk to.");
      }
      goto(doneclick);
    }

    [ parked cars
    reset(fClickOn);
    if (mouseX > 26 && mouseX < 41 && mouseY > 145 && mouseY < 157) {
      set(fClickOn);
    }
    if (mouseX > 46 && mouseX < 61 && mouseY > 144 && mouseY < 155) {
      set(fClickOn);
    }
    if (mouseX > 51 && mouseX < 66 && mouseY > 156 && mouseY < 167) {
      set(fClickOn);
    }
    if (mouseX > 106 && mouseX < 121 && mouseY > 130 && mouseY < 141) {
      set(fClickOn);
    }
    if (mouseX > 92 && mouseX < 107 && mouseY > 143 && mouseY < 154) {
      set(fClickOn);
    }
    if(fClickOn) {
      print("There is no one in the car to talk to.");
      goto(doneclick);
    }
    
    [ ignore anything else that's clicked on
    goto(doneclick);
  }

  if (cursormode == C_USE) {
    [ same as 'use item'
    [ ego
    if (posn(ego, ON.OBJ, 0, &mouseX, &mouseY)) {
      print("Please don't touch yourself in public. There may be children watching.");
      goto(doneclick);
    }

    [ ego car
    if (posn(egoCar, ON.OBJ, 0, &mouseX, &mouseY)) {
      :entercar
      if (posn(ego, 39, 132, 56, 146)) {
        if (carLocked) {
          print("The door is locked.");
          return();
        }
        [ display a msgbox with 'yes/no' buttons
        set(leaveWindow);
        print("Are you sure you want to \nleave?\n\n");
        draw(btnYes);
        draw(btnNo);
        [ need to force update so the buttons get drawn right now
        force.update(btnYes);
        [ add button text
        set.text.attribute(-1, 0);
        set.text.attribute(BLACK, WHITE);
        display(12, 33, "Yes");
        display(12, 43, "No");
        set.text.attribute(0, -1);
        [ change to default cursor (it will change back 
        [ after dialog box is dismissed)
        if (cursoricon != C_DEFAULT) {
          [ change it
          cursoricon = C_DEFAULT;
          set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
          [ disable click2move
          reset(click2move);
        }
        [ clear input and controller before starting wait loop
        set.key(-1, -1, cLeftClick); [ clear.controller(cNUM);  
        lastChar = 0;
        work1 = 0;
        :wait
        if (!have.key() && mouseBtn != 1) {
          goto(wait);
        }
        [ if left button was pressed, check buttons
        if (mouseBtn == 1) {
          lastChar = 0;
          if (posn(btnYes, ON.OBJ, 0, &mouseX, &mouseY)) {
            work1 = 1;
          } else {
            if (posn(btnNo, ON.OBJ, 0, &mouseX, &mouseY)) {
              work1 = 2;
            }
          }
        } else {
          [ 'ENTER', 'Y' or 'y' for YES
          if ((lastChar == 13 || lastChar == 89 || lastChar == 121)) {
            work1 = 1;
          }
          [ 'ESC', 'N' or 'n' for NO
          if ((lastChar == 27 || lastChar == 78 || lastChar == 110)) {
            work1 = 2;
          }
        }
        [ if wrong keypress, or click was not on button, continue waiting
        if (work1 == 0) {
          goto(wait);
        }
        [ hide buttons, then close print window
        erase(btnYes);
        erase(btnNo);
        close.window();
        [ if 'NO', do nothing; if 'YES', end the game
        if (work1 == 1) {
          erase(ego);
          print("You get in your car and drive away.");
          egoDir = STOPPED;
          program.control();
          prevent.input();
          egoCarSeq = EC_LEAVE;
          [ 5 pts for leaving
          work1 = 5;
          call(lgc.ScoreHandler);
          if (floppyfiles > 1) {
            [ 5 more pts for leaving with source code
            work1 = 5;
            call(lgc.ScoreHandler);
          }
        }
        [ there is a timing glitch in AGI (not sure if it's a DOSBox thing
        [ or inherent to MSDOS/AGI; but on occasion, a second 'ghost click'
        [ will set the left-click controller when the dialog is dismissed)
        [ to fix this, skip the controller on the very next cycle
        set(fSkip1);
      } else {
        print("You are too far away to get in your vehicle from here.");
      }
      goto(doneclick);
    }
    
    [ patient
    if (posn(oPatient, ON.OBJ, 0, &mouseX, &mouseY)) {
      distance(ego, oPatient, work1);
      if (work1 < 6) {
        print("Get your ands off me, you big jerk!");
      } else {
        print("You are too far away to touch that person.");
      }
      goto(doneclick);
    }
    
    [ patient car
    if (posn(oPatientCar, ON.OBJ, 0, &mouseX, &mouseY)) {
      [ is car moving?
      if (patientSeq > 200) {
        print("It's not a good idea to touch a moving vehicle.");
      } else {
        distance(ego, oPatientCar, work1);
        if (work1 < 14) {
          current.loop(oPatientCar, work1);
          if (work1 > 18) {
            work1 -= 19;
          }
          if (work1 < 8) {
            print("This is not your car. It's locked anyway.");
          } else {
            if (work1 < 12) {
              print("The owner of this minivan would not appreciate you stealing it.");
            } else {
              if (work1 < 17) {
                print("There's nothing worth taking from this truck.");
              } else {
                if (work1 == 17) {
                  print("This sportcar is really neat, but that's no reason to steal it.");
                } else {
                  prevent.input();
                  program.control();
                  stop.motion(ego);
                  deathSeq = 1;
                }
              }
            }
          }
        } else {
          print("You are too far away to touch that vehicle.");
        }
      }
      goto(doneclick);
    }

    [ parked cars
    reset(fClickOn);
    if (mouseX > 26 && mouseX < 41 && mouseY > 145 && mouseY < 157) {
      set(fClickOn);
    }
    if (mouseX > 46 && mouseX < 61 && mouseY > 144 && mouseY < 155) {
      set(fClickOn);
    }
    if (mouseX > 51 && mouseX < 66 && mouseY > 156 && mouseY < 167) {
      set(fClickOn);
    }
    if (mouseX > 106 && mouseX < 121 && mouseY > 130 && mouseY < 141) {
      set(fClickOn);
    }
    if (mouseX > 92 && mouseX < 107 && mouseY > 143 && mouseY < 154) {
      set(fClickOn);
    }
    if(fClickOn) {
      print("There's nothing you can do with this car.");
      goto(doneclick);
    }
    
    [ then check background
    [ pixel color can help with discriminating what was clicked
    block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)

    if (work1 > 239) {
      [ foreground tree
      print("The trees are covered in sap. You should probably wash your hands when you get a chance.");
      reset(handsWashed);
      if (!touchTrees) {
        set(touchTrees);
        [ lose 1 point
        work1 = -1;
        call(lgc.ScoreHandler);
      }
      goto(doneclick);
    }
    
    if (work1 > 111) { 
      [ forest/mountain/sky
      [ nothing
      goto(doneclick);
    }
    if (work1 > 95) {
      [ lawn/sidewalk
      print("There's nothing you can do with the shrubbery or lawn. Leave it be.");
      goto(doneclick);
    }
    if (work1 > 79) {
      [ building
      if (egoX < 71 && egoY < 121) {
        [ door
        if (mouseX > 53 && mouseY < 52 && mouseY > 105) {
          print("The door will open automatically when you approach.");
        } else {
          print("You run your hands over the weathered building exterior. It's rough.");
        }
      } else {
        print("You are not close enough to touch the building.");
      }
    }
  }
  :doneClick
  set.key(-1, -1, cLeftClick); [ clear.controller(cNUM);
}

[*****
:exit              [  test for leaving the room
[*****
if (egoHitSpecial) {
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  [ fade out, then change room
  block(FADE.OUT, 0, FADECOUNT, BLACK); [ fade.out(BYVAR, DELAY, COLOR)
  [ move to lobby
  new.room(rm.Lobby);  [ ##LE001##
}

return();


[ **************************************
[ DECLARED MESSAGES
[ **************************************
#message 1 "%g20"
#message 2 "%g21"
#message 3 "%g22"
#message 4 "%g23"
#message 5 "%g24"
#message 6 "%g25"
#message 7 "%g26"
#message 8 "%g27"
