[ ********************************************************************[[ cp.Instrument[acc is[ custom acoustic instrument settings occ[ CAISOCC[[ ********************************************************************#define oCursorB       o1  [ need four objects for cursor otherwise#define oCursorT       o2  [ text gets erased#define oCursorL       o3#define oCursorR       o4#define oMode          o5#define tmpVal       v220#define selinst      v221#define cursorrow    v222#define cursorcol    v223#define cursorpos    v224#define    CP_MOUSE   1#define    CP_KEYB    2#define btnAction    v225#define egoPrevX     v226#define egoPrevY     v227#define egoPrevDir   v228#define tmpRow       v229#define tmpCol       v230[ instrument parameter flags and variables#define feedback         v239#define modFreqMult      v240#define carFreqMult      v241#define modKSL           v242#define carKSL           v243#define modLevel         v244#define carLevel         v245#define modAttack        v246#define carAttack        v247#define modDecay         v248#define carDecay         v249#define modSusLvl        v250#define carSusLvl        v251#define modRelease       v252#define carRelease       v253#define modWaveForm      v254#define carWaveForm      v255#define update           f220#define loadinst         f221#define cursormode       f222#define modTremolo       f240#define carTremolo       f241#define modVibrato       f242#define carVibrato       f243#define modSustain       f244#define carSustain       f245#define modKyScale       f246#define carKyScale       f247#define connect          f248#define strInst       s12#define strByte       s13#define strTemp       s14[ **************************************[ FIRST CYCLE ONLY[ **************************************if(newRoom) {  [ this is the first cycle through this room  [ use eighty column mode  configure.screen(-1, 0, 1);    [ load, draw and discard the picture resource for the current room  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ do basic room initialization  call(lgc.RoomInit);  lastChar = 0;    [ disable game functions  set(disableGameFunctions);    [ this view has all the art for cursors and buttons  load.view(vw.cp.Instrument);    [ no horizon    [ option button that determines input mode; mouse or keyboard  animate.obj(oMode);  set.view(oMode, vw.cp.Instrument);  set.loop(oMode, 0);  set.cel(oMode, 0);  stop.cycling(oMode);  position(oMode, 8, 65);  draw(oMode);    [ no text input in this room  prevent.input();  lastChar = 0;  [ arrow keys control cursor here  egoDir = 0;    [ mouse is enabled, not cursor; no button active  enable.item(mouse);  reset(cursormode);  btnAction = 0;  [ cache ego movement parameters (to be restored  [ when returning to the control room)  egoPrevX = egoX;  egoPrevY = egoY;  egoPrevDir = egoDir;    [ display the picture on screen  show.pic();    [ clear line 22 to match the picture  clear.lines(22, 22, LT_GRAY);    set.text.attribute(-1, 0);  set.text.attribute(WHITE, LT_GRAY);  display(5, 37, "Modulator");  display(5, 63, "Carrier");    set.text.attribute(BLACK, LT_GRAY);  display(6, 10, "Input Mode");  display(8, 8, "Mouse");  display(8, 20, "Keybd");  display(11, 31, "Freq Mult");  display(12, 31, "KSL");  display(13, 31, "Level");  display(14, 31, "Attack");  display(15, 31, "Decay");  display(16, 31, "Sustain");  display(17, 31, "Release");  display(18, 31, "Wave Shape");  display(20, 31, "Feedback");  display(11, 56, "Freq Mult");  display(12, 56, "KSL");  display(13, 56, "Level");  display(14, 56, "Attack");  display(15, 56, "Decay");  display(16, 56, "Sustain");  display(17, 56, "Release");  display(18, 56, "Wave Shape");    set.text.attribute(BLACK, CYAN);  display(6, 31, "[ ] Tremolo");  display(7, 31, "[ ] Vibrato");  display(8, 31, "[ ] Sound Sustain");  display(9, 31, "[ ] Kybd Scaling");    display(6, 56, "[ ] Tremolo");  display(7, 56, "[ ] Vibrato");  display(8, 56, "[ ] Sound Sustain");  display(9, 56, "[ ] Kybd Scaling");  display(20, 56, "[ ] Connection");    set.text.attribute(0, -1);    [ default to first custom instrument  selinst = 1;  work1 = 22;  strTemp = m1;  block(STR.LEFT, &strTemp, &strInst, &work1);    [ force update of button text  set(update);    [ force reload of instrument parameters  set(loadinst);}if (update) {  [ add all button/label text  set.text.attribute(-1, 0);  set.text.attribute(BLACK, WHITE);  display(18, 6, "Save");  display(18, 18, "Cancel");  display(3, 66, "Test");  display(20, 6, "Copy Instrument...");    [ instrument choices  work1 = 11;  work2 = 4;  work3 = 1;  tmpVal = &m137;  :loop1    if (work3 == selinst) {      set.text.attribute(WHITE, BLACK);    } else {      set.text.attribute(BLACK, WHITE);    }    display.v(work1, work2, tmpVal);    ++work1;    ++work3;  if (work1 < 16) {    goto(loop1);  }  set.text.attribute(0, -1);    [ always reset  reset(update); }[ load instrument parametersif (loadinst) {  [ using instrument string, break out parameters as follows:  [  [              bit:    7   6   5   4   3   2   1   0  [ byte 1: modulator  |tre|vib|sus|KSR|    frq mul   |  [ byte 2: carrier    |tre|vib|sus|KSR|    frq mul   |  [ byte 3: modulator  |  KSL  |    output level      |  [ byte 4: carrier    |  KSL  |    output level      |  [ byte 5: modulator  | attack rate   | decay rate   |  [ byte 6: carrier    | attack rate   | decay rate   |  [ byte 7: modulator  | sustain lvl   | release rt   |  [ byte 8: carrier    | sustain lvl   | release rt   |  [ byte 9: modulator  |    not used      | waveform  |  [ byte 10: carrier   |    not used      | waveform  |  [ byte 11: modulator | 0   0   0   0 | feedback |con|  set.text.attribute(BLACK, CYAN);  [ get first byte: mod flags & freq  work1 = 2;  block(STR.LEFT, &strInst, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ mod Tremolo  if (work1 > 127) {    work2 = &m138;    set(modTremolo);  } else {    work2 = &m139;    reset(modTremolo);  }  tmpRow = 6;  tmpCol = 32;  display.v(tmpRow, tmpCol, work2);  block(BIT.AND, 0, &work1, 127);  [ mod Vibrato  if (work1 > 63) {    work2 = &m138;    set(modVibrato);  } else {    work2 = &m139;    reset(modVibrato);  }  ++tmpRow;  display.v(tmpRow, tmpCol, work2);  block(BIT.AND, 0, &work1, 63);  [ mod Sustain  if (work1 > 31) {    work2 = &m138;    set(modSustain);  } else {    work2 = &m139;    reset(modSustain);  }  ++tmpRow;  display.v(tmpRow, tmpCol, work2);  block(BIT.AND, 0, &work1, 31);  [ mod keyb scaling  if (work1 > 15) {    work2 = &m138;    set(modKyScale);  } else {    work2 = &m139;    reset(modKyScale);  }  ++tmpRow;  display.v(tmpRow, tmpCol, work2);  set.text.attribute(WHITE, BLUE);  [ freq mult  block(BIT.AND, 0, &work1, 15);  modFreqMult = work1;  tmpRow = 11;  tmpCol += 14;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);      [ get 3rd byte: mod KSL/output level  work1 = 6;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ KSL  block(BIT.AND, 0, &work1, 192);  work1 /= 64;  modKSL = work1;  ++tmpRow;  work2 = &m133;  display.v(tmpRow, tmpCol, work2);  [ output level  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 63);  modLevel = work1;  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 5th byte: mod attack/decay  work1 = 10;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ attack  block(BIT.AND, 0, &work1, 240);  work1 /= 16;  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);  [ decay  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 15);  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 7th byte: mod sustain/release  work1 = 14;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ sustainlvl  block(BIT.AND, 0, &work1, 240);  work1 /= 16;  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);  [ release rate  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 15);  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 9th byte: mod waveform  work1 = 18;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ wave form  block(BIT.AND, 0, &work1, 7);  ++tmpRow;  work2 = &m140;  display.v(tmpRow, tmpCol, work2);    [***CARRIER***  set.text.attribute(BLACK, CYAN);  [ get 2nd byte: carrier flags & freq  work1 = 4;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ car Tremolo  if (work1 > 127) {    work2 = &m138;  } else {    work2 = &m139;  }  tmpRow = 6;  tmpCol = 57;  display.v(tmpRow, tmpCol, work2);  block(BIT.AND, 0, &work1, 127);  [ car Vibrato  if (work1 > 63) {    work2 = &m138;  } else {    work2 = &m139;  }  ++tmpRow;  display.v(tmpRow, tmpCol, work2);  block(BIT.AND, 0, &work1, 63);  [ car Sustain  if (work1 > 31) {    work2 = &m138;  } else {    work2 = &m139;  }  ++tmpRow;  display.v(tmpRow, tmpCol, work2);  block(BIT.AND, 0, &work1, 31);  [ car keyb scaling  if (work1 > 15) {    work2 = &m138;  } else {    work2 = &m139;  }  ++tmpRow;  display.v(tmpRow, tmpCol, work2);    [ number values use white on blue  set.text.attribute(WHITE, BLUE);    [ freq mult  block(BIT.AND, 0, &work1, 15);  tmpRow = 11;  tmpCol = 71;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 4th byte: carrier KSL/output level  work1 = 8;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ KSL  block(BIT.AND, 0, &work1, 192);  work1 /= 64;  ++tmpRow;  work2 = &m140;  display.v(tmpRow, tmpCol, work2);  [ output level  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 63);  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 6th byte: carrier attack/decay  work1 = 12;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ attack  block(BIT.AND, 0, &work1, 240);  work1 /= 16;  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);  [ decay  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 15);  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 8th byte: carrier sustain/release  work1 = 16;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ sustainlvl  block(BIT.AND, 0, &work1, 240);  work1 /= 16;  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);  [ release rate  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 15);  ++tmpRow;  if (work1 < 10) {    work2 = &m140;  } else {    work2 = &m141;  }  display.v(tmpRow, tmpCol, work2);    [ get 10th byte: carrier waveform  work1 = 20;  block(STR.LEFT, &strInst, &strByte, &work1);  work1 = 2;  block(STR.RIGHT, &strByte, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ wave form  block(BIT.AND, 0, &work1, 7);  ++tmpRow;  work2 = &m140;  display.v(tmpRow, tmpCol, work2);      [ get 11th byte: feedback/connection  work1 = 2;  block(STR.RIGHT, &strInst, &strByte, &work1);  block(HEX2BYTE, &strByte, &work1, 0);  [ feedback  block(BIT.AND, 0, &work1, 14);  work1 /= 2;  tmpRow = 20;  tmpCol = 46;  work2 = &m140;  display.v(tmpRow, tmpCol, work2);  [ connection  set.text.attribute(BLACK, CYAN);  block(HEX2BYTE, &strByte, &work1, 0);  block(BIT.AND, 0, &work1, 1);  tmpCol = 57;  if (work1 > 0) {    work2 = &m138;  } else {    work2 = &m139;  }  display.v(tmpRow, tmpCol, work2);    set.text.attribute(0, -1);    reset(loadinst);}if (have.key()) {  [ restore 40 col  configure.screen(-1, 0, 0);  [ restore default colors  set.text.attribute(0, -1);  [ restore game functions  reset(disableGameFunctions);    new.room.v(previousRoom);}return();[ **************************************[ MESSAGES[ **************************************[ instrument msgs have name and data in one string#message 1 "02023000F1F58404000000Acoust. Grand Piano"#message 2 "82040500F1A50C35000002Bright Acous. Piano"#message 3 "42040805F1F401C4010002Elec. Grand Piano  "#message 4 "04420106A1F42143010100Honky-tonk Piano   "#message 5 "82442000F3F30303000100Electric Piano 1   "#message 6 "04042003A1A20102010100Electric Piano 2   "#message 7 "02C410087162E1E2030300Harpsichord        "#message 8 "08080707F7F70707030306Clavinet           "#message 9 "88842007F1F10303000000Celesta            "#message 10 "0C640707F7FE0723030100Glockenspiel       "#message 11 "02043F0100F50016000002Music Box          "#message 12 "C2C22000A1A12525000006Vibraphone         "#message 13 "8C040D0087F5812D030004Marimba            "#message 14 "02042100F1A71516020008Xylophone          "#message 15 "8C44200323438F1E000004Tubular Bells      "#message 16 "8202030388411C11000304Dulcimer           "#message 17 "8C440F0087A48718000106Drawbar Organ      "#message 18 "62C41F0016A5142502030EPercussive Organ   "#message 19 "84421C00FF812483000300Rock Organ         "#message 20 "0442070385A58722010006Church Organ       "#message 21 "04C4070387878734030306Reed Organ         "#message 22 "04821A0347428783000006Accordion          "#message 23 "04420F03FB410117000300Harmonica          "#message 24 "04C2000347438783010000Tango Accordion    "#message 25 "02821000F4F5F104010202Ac. Guitar (nylon) "#message 26 "02020D00F3F44103000202Ac. Guitar (steel) "#message 27 "84CC1100F26525D5020102Elec. Guitar (jazz)"#message 28 "02C21003F4F4F1F1000002El. Guitar (clean) "#message 29 "C2042000F1F5F174000102El. Guitar (muted) "#message 30 "08822F00F1F47474020308Overdriven Guitar  "#message 31 "0282030075A1A153000308Distortion Guitar  "#message 32 "82821002A3F3F3F3000004Guitar harmonics   "#message 33 "E2620000F1F2F1A1000000Acoustic Bass      "#message 34 "C2420000F973F193000200Elec. Bass (finger)"#message 35 "02C22000F1F3F1F3000200Elec. Bass (pick)  "#message 36 "2222050681F11111000000Fretless Bass      "#message 37 "42021700F5F30303010004Slap Bass 1        "#message 38 "02C2200051FF5112000200Slap Bass 2        "#message 39 "C8022000F4F104B6010108Synth Bass 1       "#message 40 "4C020305F5F5D305010104Synth Bass 2       "#message 41 "04420D038C530B5302030EViolin             "#message 42 "A2101700AE8F190501010EViola              "#message 43 "04440505F5F50515010104Cello              "#message 44 "08140505F5F50505010104Contrabass         "#message 45 "08440500F5F50517000100Tremolo Strings    "#message 46 "08440503F5F24C0503010CPizzicato Strings  "#message 47 "A4A41700F5F50303000006Orchestral Harp    "#message 48 "0202100013A31103000000Timpani            "#message 49 "02C2200051A50102000200String Ensemble 1  "#message 50 "0242090931510111000000String Ensemble 2  "#message 51 "02422008F1F20102000000Synth Strings 1    "#message 52 "82440808F1F10102010000Synth Strings 2    "#message 53 "84C4200811A10122000000Choir Aahs         "#message 54 "0844200811A10152000000Voice Oohs         "#message 55 "0244200811A101A2000000Synth Voice        "#message 56 "0282000055D40404000002Orchestra Hit      "#message 57 "04C21C0055FF0505000200Trumpet            "#message 58 "0242200345F10505000200Trombone           "#message 59 "0244000324280424020106Tuba               "#message 60 "C44211085A712424010200Muted Trumpet      "#message 61 "02480E0054542123020206French Horn        "#message 62 "02480E0A5451211402000ABrass Section      "#message 63 "02440006F6F40704010004Synth Brass 1      "#message 64 "0444100CF4FE030200000CSynth Brass 2      "#message 65 "02040800AAF51A0300020ASoprano Sax        "#message 66 "04021004F4F40404000004Alto Sax           "#message 67 "02020404F4F40404000004Tenor Sax          "#message 68 "02020400F4F80404000204Baritone Sax       "#message 69 "C2C21705FFFF0105010004Oboe               "#message 70 "0202040454A80411000104English Horn       "#message 71 "0204130BF1F11161020108Bassoon            "#message 72 "44481703F1311122000100Clarinet           "#message 73 "02423F0300F10005000204Piccolo            "#message 74 "44C4200355F1F105000002Flute              "#message 75 "02423F01FFFF0507000000Recorder           "#message 76 "42442103A1332113020000Pan Flute          "#message 77 "44C4200333F1F125000002Blown Bottle       "#message 78 "04020108F1F10101010100Shakuhachi         "#message 79 "02C43F0500A10054000000Whistle            "#message 80 "02040101F1220801020100Ocarina            "#message 81 "04020808F1F11101020102Lead 1 (square)    "#message 82 "0402080AE2F10104000000Lead 2 (sawtooth)  "#message 83 "02021703F1F30181000000Lead 3 (calliope)  "#message 84 "0202000381F38101000000Lead 4 (chiff)     "#message 85 "82021000F1F10301000300Lead 5 (charang)   "#message 86 "0442200011A101A2000000Lead 6 (voice)     "#message 87 "0202000081818181000000Lead 7 (fifths)    "#message 88 "0202080881F10101000000Lead 8 (bass+lead) "#message 89 "0844200811A101A2000000Pad 1 (new age)    "#message 90 "0202200081818181000000Pad 2 (warm)       "#message 91 "0202080044818383000000Pad 3 (polysynth)  "#message 92 "0844200811A101A2000000Pad 4 (choir)      "#message 93 "02021000F18141C1000000Pad 5 (bowed)      "#message 94 "44A83200D2E2D2B2020202Pad 6 (metallic)   "#message 95 "E2041000F491F5F1020000Pad 7 (halo)       "#message 96 "82C410001181F2F2010002Pad 8 (sweep)      "#message 97 "02020010F1FF010100030EFX 1 (rain)        "#message 98 "0C680200FDF1C411000002FX 2 (soundtrack)  "#message 99 "C8441C0392825292020000FX 3 (crystal)     "#message 100 "C404000022518362010100FX 4 (atmosphere)  "#message 101 "4242200355F1F1F1010000FX 5 (brightness)  "#message 102 "C2C23000F1F1F1F1000000FX 6 (goblins)     "#message 103 "E2E83000F1F1F1F1000100FX 7 (echoes)      "#message 104 "2CA83000F1D1F1F6000306FX 8 (sci-fi)      "#message 105 "E2EC3000F172F174000000Sitar              "#message 106 "E4E83C007B553315030102Banjo              "#message 107 "F02C05002AF54F05010004Shamisen           "#message 108 "183C3100336C0378010004Koto               "#message 109 "C2C432047443159501020EKalimba            "#message 110 "0442100374310513000304Bag pipe           "#message 111 "7CF03B041A7C9E7C02020AFiddle             "#message 112 "38481B0545F59F0503010AShanai             "#message 113 "14140505F5F10504010004Tinkle Bell        "#message 114 "14140505F5F50505010104Agogo              "#message 115 "1414050345F54305010104Steel Drums        "#message 116 "14B00F057CF5DD05030104Woodblock          "#message 117 "0802110BF5F10401000000Taiko Drum         "#message 118 "02020003F1F10105000000Melodic Tom        "#message 119 "02023F0061F10106010000Synth Drum         "#message 120 "02020000F12F0107020204Reverse Cymbal     "#message 121 "02020E08F1F10103000008Guitar Fret Noise  "#message 122 "02020010F1F1010200000EBreath Noise       "#message 123 "02020010F1FF010100030ESeashore           "#message 124 "02083F00003F001A000000Bird Tweet         "#message 125 "02883F00F1550131000200Telephone Ring     "#message 126 "828200081111010100000EHelicopter         "#message 127 "828200081111010100000EApplause           "#message 128 "02020000FFF5150700000EGunshot            "#message 129 "22215909FFFF030F020000AGISB Default      "#message 130 "2F200000FFFF0F0F00030ESierra White Noise "#message 131 "22242100C0C00C0C000000Sierra Tone Noise  "#message 132 "22215909FFFF030F020000Custom Inst 1      "#message 133 "22215909FFFF030F020000Custom Inst 2      "#message 134 "22215909FFFF030F020000Custom Inst 3      "#message 135 "22215909FFFF030F020000Custom Inst 4      "#message 136 "22215909FFFF030F020000Custom Inst 5      "            #message 137 " Custom Instrument %v48 "#message 131 "X"#message 132 " "#message 133 "  %v46 "#message 134 " %v46 "  