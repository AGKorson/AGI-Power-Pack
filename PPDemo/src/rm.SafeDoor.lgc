[*********************************************************************
[
[ rm.SafeDoor
[
[ This is a close up of the safe door. The player has to dial in the
[ correct code to open the safe.
[
[ Views for dial numbers take up A LOT of memory. In order to display
[ rotating numbers, the views are split into two views. The logic 
[ swaps them in and out of memory as needed.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define oBlank1        o1
#define oBlank2        o2
#define oNum00         o3
#define oNum05         o4
#define oNum10         o5
#define oNum15         o6
#define oNum20         o7
#define oNum25         o8
#define oNum30         o9
#define oNum35        o10
#define oDialCenter   o11

#define currentNum    v220
#define comboNum1     v221
#define comboNum2     v222
#define comboNum3     v223
#define spinCount     v224
#define SPIN_DELAY     3
#define comboRev1     v225
#define comboRev2     v226
#define comboRev3     v227
#define startNum      v228
#define tickCounter   v229
#define handleCel     v230
#define viewNum       v231
#define tryCount      v232

#define setNum1       f220
#define setNum2       f221
#define setNum3       f222
#define spinLeft      f223
#define spinRight     f224
#define updateCombo   f225
#define fOpening      f226
#define swapViews     f227
#define tmpFlag       f228

[***************************************
[ FIRST CYCLE ONLY
[***************************************
if (newRoom) {
  [ this is the first cycle through this room
  [ no scripting in this room
  set(noScript);
  
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);

  [ set horizon at top so it doesn't interfere with dial numbers
  set.horizon(1);
  
  [ no ego, and no input (mouse only)
  set(disableGameFunctions);
  prevent.input();
  lastChar = 0;
  egoDir = 0;
  
  [ no statusbar
  status.line.off();
  
  [ access to cursor icons
  load.logics(lgc.GameFunctions);
  
  [ stop walkman
  if (playWalkman) {
    reset(playWalkman);
    stop.sound();
    reset(musicDone);
  }
  
  load.sound(s.SafeDial);
  load.sound(s.DoorOpen);
  [ sound effects use 4channel, use FM
  set(4channelsound);
  reset(useMIDI);
  set.key(FM_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
  [ set instruments
  work1 = 0;
  work2 = 128;
  set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
  work1 = 4;
  work2 = 1;
  set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)

  [ center dial logo
  load.view(vw.SafeDial);
  
  [ start at previous dial position
  currentNum = comboNumber;

  [ to initialize, use dial art for positions 0-19; the update
  [ function will swap if necessary
  load.view(vw.SafeNumbers1);
  viewNum = vw.SafeNumbers1;
  
  animate.obj(oNum00);
  set.view(oNum00, vw.SafeNumbers1);
  set.loop(oNum00, 0);
  set.cel(oNum00, 0);
  stop.cycling(oNum00);
  set.priority(oNum00, 8);
  position(oNum00, 39, 38);
  ignore.objs(oNum00);

  animate.obj(oNum05);
  set.view(oNum05, vw.SafeNumbers1);
  set.loop(oNum05, 0);
  set.cel(oNum05, 1);
  stop.cycling(oNum05);
  set.priority(oNum05, 8);
  position(oNum05, 57, 54);
  ignore.objs(oNum05);
  
  animate.obj(oNum10);
  set.view(oNum10, vw.SafeNumbers1);
  set.loop(oNum10, 0);
  set.cel(oNum10, 2);
  stop.cycling(oNum10);
  set.priority(oNum10, 8);
  position(oNum10, 65, 95);
  ignore.objs(oNum10);
  
  animate.obj(oNum15);
  set.view(oNum15, vw.SafeNumbers1);
  set.loop(oNum15, 0);
  set.cel(oNum15, 3);
  stop.cycling(oNum15);
  set.priority(oNum15, 8);
  position(oNum15, 55, 137);
  ignore.objs(oNum15);
  
  animate.obj(oNum20);
  set.view(oNum20, vw.SafeNumbers1);
  set.loop(oNum20, 0);
  set.cel(oNum20, 4);
  stop.cycling(oNum20);
  set.priority(oNum20, 8);
  position(oNum20, 36, 147);
  ignore.objs(oNum20);
  
  animate.obj(oNum25);
  set.view(oNum25, vw.SafeNumbers1);
  set.loop(oNum25, 0);
  set.cel(oNum25, 5);
  stop.cycling(oNum25);
  set.priority(oNum25, 8);
  position(oNum25, 15, 134);
  ignore.objs(oNum25);
  
  animate.obj(oNum30);
  set.view(oNum30, vw.SafeNumbers1);
  set.loop(oNum30, 0);
  set.cel(oNum30, 6);
  stop.cycling(oNum30);
  set.priority(oNum30, 8);
  position(oNum30, 10, 96);
  ignore.objs(oNum30);
  
  animate.obj(oNum35);
  set.view(oNum35, vw.SafeNumbers1);
  set.loop(oNum35, 0);
  set.cel(oNum35, 7);
  stop.cycling(oNum35);
  set.priority(oNum35, 8);
  position(oNum35, 16, 58);
  ignore.objs(oNum35);
  
  [ if at starting number is <20, need to force draw numbers
  if (currentNum < 20) {
    draw(oNum00);
    draw(oNum05);
    draw(oNum10);
    draw(oNum15);
    draw(oNum20);
    draw(oNum25);
    draw(oNum30);
    draw(oNum35);
  }
  
  animate.obj(oDialCenter);
  set.view(oDialCenter, vw.SafeDial);
  set.cel(oDialCenter, 0);
  stop.cycling(oDialCenter);
  set.priority(oDialCenter, 15);
  position(oDialCenter, 32, 98);
  draw(oDialCenter);
  
  [ blanks, to clear areas during view swaps
  animate.obj(oBlank1);
  set.view(oBlank1, vw.SafeDial);
  set.loop(oBlank1, 1);
  stop.cycling(oBlank1);
  ignore.objs(oBlank1);
  position(oBlank1, 136, 167);
  draw(oBlank1);
  animate.obj(oBlank2);
  set.view(oBlank2, vw.SafeDial);
  set.loop(oBlank2, 1);
  stop.cycling(oBlank2);
  ignore.objs(oBlank2);
  position(oBlank2, 136, 167);
  draw(oBlank2);
  
  [ select correct palette to show tick marks correctly
  tickCounter = currentNum;
  :loop1
  if (tickCounter > 4) {
    tickCounter -= 5;
    goto(loop1);
  }  
  tickCounter += 10;
  work1 = 1;
  block(SET.PALETTE, BYVAR, &tickCounter, &work1); [ set.palette(FN_MODE, PALETTE, LOADONLY)
  comboNum1 = -1;
  comboNum2 = -1;
  comboNum3 = -1;

  [ display the picture on screen
  show.pic();
  
  [ move numbers into initial positions
  goto(updatenow);
}

[***************************************
[ NON-INPUT CODE 
[***************************************
if (fOpening) {
  if (!openSafe) {
    ++handleCel;
    if (handleCel < 12) {
      set.cel.v(oNum00, handleCel);
      if (handleCel == 2) {
        work1 = 3;
        work2 = -1;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 3) {
        work1 = 2;
        work2 = -2;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 4) {
        work1 = 1;
        work2 = -7;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 5) {
        work1 = 1;
        work2 = -5;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 6) {
        work1 = 2;
        work2 = -9;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 7) {
        work1 = 2;
        work2 = -10;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 8) {
        work1 = 1;
        work2 = -9;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 9) {
        work1 = 1;
        work2 = -12;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 10) {
        work1 = 1;
        work2 = -12;
        reposition(oNum00, work1, work2);
      }
      if (handleCel == 11) {
        work1 = 0;
        work2 = -13;
        reposition(oNum00, work1, work2);
      }
    } else {
      set(openSafe);
    }
  }
  goto(checkexit);
}

[***************************************
[ PROCESS PLAYER INPUT
[***************************************

[ in this room, only non-mouse input allowed are ego direction
[ keys (to spin dial left/right), and ENTER key to try the handle

if (lastChar == 13) {
  [ same as clicking on handle
  goto(clickhandle);
}

if (egoDir == LEFT) {
  [ spin once to left
  set(spinLeft);
  reset(spinRight);
  egoDir = 0;
  spinCount = 0;
  goto(checkspin);
} else {
  if (egoDir == RIGHT) {
    set(spinRight);
    reset(spinLeft);
    egoDir = 0;
    spinCount = 0;
    goto(checkspin);
  } else {
    egoDir = 0;
    reset(spinLeft);
    reset(spinRight);
  }
}

[***************************************
[ MOUSE INPUT
[***************************************
if (controller(cLeftClick)) {
  block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
  work1 /= 16;
  set.key(CLR.CTRL, CLR.CTRL, cLeftClick); [ clear.controller(cNUM)
  
  [ check for handle click
  if (work1 == 7) {
    :clickhandle
    [ check for correct combo
    if (comboNum1 == 36 && comboNum2 == 8 && comboRev2 == 1 &&
        comboNum3 == 14) {
      print("The safe door opens!");
      [ add numbers permanently - re-use combo variables that are no
      [ longer needed
      comboNum1 = currentNum;
      if (currentNum > 19) {
        comboNum1 -= 20;
      }
      comboNum2 = 4;
      comboNum3 = 4;
      get.posn(oNum00, work1, work2);
      work3 = 0;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum00);
      get.posn(oNum05, work1, work2);
      work3 = 1;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum05);
      get.posn(oNum10, work1, work2);
      work3 = 2;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum10);
      get.posn(oNum15, work1, work2);
      work3 = 3;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum15);
      get.posn(oNum20, work1, work2);
      work3 = 4;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum20);
      get.posn(oNum25, work1, work2);
      work3 = 5;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum25);
      get.posn(oNum30, work1, work2);
      work3 = 6;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum30);
      get.posn(oNum35, work1, work2);
      work3 = 7;
      add.to.pic.v(viewNum, comboNum1, work3, work1, work2, comboNum2, comboNum3);
      erase(oNum35);
      discard.view.v(viewNum);
      
      [ clear the pre-drawn handle
      load.view(vw.SafeHandle);
      add.to.pic(vw.SafeHandle, 0, 0, 94, 151, 7, 4);
      [ animate the handle
      set.view(oNum00, vw.SafeHandle);
      set.loop(oNum00, 0);
      handleCel = 1;
      set.cel(oNum00, 1);
      position(oNum00, 94, 151);
      draw(oNum00);
      stop.cycling(oNum00);
      set(fOpening);
      if (!scoreSafe) {
        set(scoreSafe);
        work1 = 3;
        call(lgc.ScoreHandler);
      }
      [ restore correct instruments, then
      call(lgc.SetSound);
      sound(s.DoorOpen, soundDone);
    } else {
      print("Nothing happens. That must not be the right combination.");
      [ if one of the post-it numbers was guessed, penalize player
      reset(tmpFlag);
      if (comboNum1 == 28 && comboNum2 == 32 && comboNum3 == 17) {
        set(tmpFlag);
      }
      if (comboNum1 == 19 && comboNum2 == 7 && comboNum3 == 35) {
        set(tmpFlag);
      }
      if (comboNum1 == 8 && comboNum2 == 22 && comboNum3 == 13) {
        set(tmpFlag);
      }
      if (comboNum1 == 14 && comboNum2 == 4 && comboNum3 == 31) {
        set(tmpFlag);
      }
      if (tmpFlag) {
        ++tryCount;
        [ one free pass
        if (tryCount > 1) {
          work2 = work1;
          work1 = -3;
          call(lgc.ScoreHandler);
          work1 = work2;
          print("Trying to guess the combination isn't working.");
        }
      }
      comboNum1 = -1;
      comboNum2 = -1;
      comboNum3 = -1;
      comboRev1 = 0;
      comboRev2 = 0;
      comboRev3 = 0;
    }
  }
  
  [ exit
  if (work1 == 8) {
    goto(exit);
  }
}

[ check for spin actions
if (mouseBtn == 1) {
  block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
  work1 /= 16;
  if (work1 == 5 && !spinLeft) {
    set(spinLeft);
  }
  if (work1 == 6 && !spinRight) {
    set(spinRight);
  }  
} else {
  if ((spinLeft || spinRight)) {
    [ always stop spinning if mouse up
    spinCount = 0;
    reset(spinLeft);
    reset(spinRight);
  }
}

:checkspin
[ spinning left
if (spinLeft) {
  [ if setting num1, switch to num2
  if (setNum1) {
    reset(setNum1);
    set(setNum2);
    comboRev2 = 0;
  } else {
    [ if setting 2, reset
    if (setNum3) {
      [ ?
      reset(setNum1);
      reset(setNum2);
      reset(setNum3);
      comboNum1 = -1;
      comboNum2 = -1;
      comboNum3 = -1;
      comboRev1 = 0;
      comboRev2 = 0;
      comboRev3 = 0;
    }
  }
  
  [ if counter is at zero, spin it
  if (spinCount == 0) {
    [ reset the counter
    spinCount = SPIN_DELAY;
    [ adjust number
    currentNum += 1;
    if (currentNum > 39) {
      currentNum = 0;
    }
    [ adjust tick counter
    ++tickCounter;
    if (tickCounter == 15) {
      tickCounter = 10;
    }
    [ force refresh
    set(updateCombo);
    [ if past 1st num 
    if (currentNum == comboNum1) {
     ++comboRev2;
    }
    
    [ if setting 2nd number, adjust it
    if (setNum2) {
      comboNum2 = currentNum;
    } else {
      [ all numbers are invalid
      comboNum1 = -1;
      comboNum2 = -1;
      comboNum3 = -1;
      comboRev1 = 0;
      comboRev2 = 0;
      comboRev3 = 0;
    }
  } else {
    --spinCount;
  }
}

[ spinning right
if (spinRight) {
  [ if nothing set, begin
  if (!setNum1 && !setNum2 && !setNum3) {
    set(setNum1);
  }
  [ if setting num2, move to 3
  if (setNum2) {
    reset(setNum2);
    set(setNum3);
    comboRev3 = 0;
  }
  
  [ if counter is at zero, spin it
  if (spinCount == 0) {
    [ reset the counter
    spinCount = SPIN_DELAY;
    [ adjust number
    currentNum -= 1;
    if (currentNum == -1) {
      currentNum = 39;
    }
    [ adjust tick counter
    --tickCounter;
    if (tickCounter == 9) {
      tickCounter = 14;
    }
    [ force refresh
    set(updateCombo);
    
    [ if setting 1st number, adjust it
    if (setNum1) {
      comboNum1 = currentNum;
      if (currentNum == startNum) {
        ++comboRev1;
      }
    }
    [ if setting third number, adjust it
    if (setNum3) {
      comboNum3 = currentNum;
      if (currentNum == comboNum2) {
        [ too far; start over
        reset(setNum3);
        set(setNum1);
        startNum = currentNum;
        comboRev1 = 0;
        comboNum2 = -1;
        comboRev2 = 0;
        comboNum3 = -1;
        comboRev3 = 0;
      }
    }
  } else {
    --spinCount;
  }
}

[ update numbers as the dial spins
if (updateCombo) {
  sound(s.SafeDial, soundDone);
  :updatenow

  work1 = currentNum;
  [ check that correct view is set
  if (currentNum > 19) {
    work1 -= 20;
    if (viewNum == vw.SafeNumbers1) {
      viewNum =vw.SafeNumbers2;
      position(oNum00, 136, 167);
      position(oNum05, 136, 167);
      position(oNum10, 136, 167);
      position(oNum15, 136, 167);
      position(oNum20, 136, 167);
      position(oNum25, 136, 167);
      position(oNum30, 136, 167);
      position(oNum35, 136, 167);
      erase(oNum00);
      erase(oNum05);
      erase(oNum10);
      erase(oNum15);
      erase(oNum20);
      erase(oNum25);
      erase(oNum30);
      erase(oNum35);
      discard.view(vw.SafeNumbers1);
      load.view(vw.SafeNumbers2);
      set(swapViews);
    }
  } else {
    if (viewNum == vw.SafeNumbers2) {
      viewNum =vw.SafeNumbers1;
      position(oNum00, 136, 167);
      position(oNum05, 136, 167);
      position(oNum10, 136, 167);
      position(oNum15, 136, 167);
      position(oNum20, 136, 167);
      position(oNum25, 136, 167);
      position(oNum30, 136, 167);
      position(oNum35, 136, 167);
      erase(oNum00);
      erase(oNum05);
      erase(oNum10);
      erase(oNum15);
      erase(oNum20);
      erase(oNum25);
      erase(oNum30);
      erase(oNum35);
      discard.view(vw.SafeNumbers2);
      load.view(vw.SafeNumbers1);
      set(swapViews);
    }
  }
  if (swapViews) {
    reset(swapViews);
    set.view.v(oNum00, viewNum);
    set.view.v(oNum05, viewNum);
    set.view.v(oNum10, viewNum);
    set.view.v(oNum15, viewNum);
    set.view.v(oNum20, viewNum);
    set.view.v(oNum25, viewNum);
    set.view.v(oNum30, viewNum);
    set.view.v(oNum35, viewNum);
    draw(oNum00);
    draw(oNum05);
    draw(oNum10);
    draw(oNum15);
    draw(oNum20);
    draw(oNum25);
    draw(oNum30);
    draw(oNum35);
    draw(oBlank1);
    draw(oBlank2);
    if (currentNum == 39) {
      set.cel(oBlank1, 0);
      set.cel(oBlank2, 1);
      reposition.to(oBlank1, 39, 29);
      reposition.to(oBlank2, 16, 52);
      goto(movenumbers);
    }
    if (currentNum == 0) {
      set.cel(oBlank1, 2);
      set.cel(oBlank2, 3);
      reposition.to(oBlank1, 24, 35);
      reposition.to(oBlank2, 11, 75);
      goto(movenumbers);
    }
    if (currentNum == 19) {
      set.cel(oBlank1, 4);
      set.cel(oBlank2, 5);
      reposition.to(oBlank1, 35, 31);
      reposition.to(oBlank2, 18, 52);
      goto(movenumbers);
    }
    if (currentNum == 20) {
      set.cel(oBlank1, 6);
      set.cel(oBlank2, 7);
      reposition.to(oBlank1, 25, 34);
      reposition.to(oBlank2, 10, 85);
    }
  } else {
    [ erase the blanks
    erase(oBlank1);
    erase(oBlank2);
  }
  :movenumbers
  reset(updateCombo);
  set.loop.v(oNum00, work1);
  set.loop.v(oNum05, work1);
  set.loop.v(oNum10, work1);
  set.loop.v(oNum15, work1);
  set.loop.v(oNum20, work1);
  set.loop.v(oNum25, work1);
  set.loop.v(oNum30, work1);
  set.loop.v(oNum35, work1);
  [
  set.cel.v(oDialCenter, currentNum);
  work1 = 0;
  if (newRoom) {
    ++work1;
  }
  block(SET.PALETTE, BYVAR, &tickCounter, &work1); [ set.palette(FN_MODE, PALETTE, LOADONLY)
  
  if (currentNum < 20) {
    if (currentNum < 10) {
      if (currentNum == 0) {
        reposition.to(oNum00, 39, 38);
        reposition.to(oNum05, 57, 54);
        reposition.to(oNum10, 65, 95);
        reposition.to(oNum15, 55, 137);
        reposition.to(oNum20, 36, 147);
        reposition.to(oNum25, 15, 134);
        reposition.to(oNum30, 10, 96);
        reposition.to(oNum35, 16, 58);
        reposition.to(oDialCenter, 32, 98);
        goto(checkexit);
      }
      if (currentNum == 1) {
        reposition.to(oNum00, 35, 41);
        reposition.to(oNum05, 54, 49);
        reposition.to(oNum10, 65, 88);
        reposition.to(oNum15, 59, 127);
        reposition.to(oNum20, 41, 148);
        reposition.to(oNum25, 19, 141);
        reposition.to(oNum30, 9, 104);
        reposition.to(oNum35, 13, 65);
        reposition.to(oDialCenter, 32, 99);
        goto(checkexit);
      }
      if (currentNum == 2) {
        reposition.to(oNum00, 32, 39);
        reposition.to(oNum05, 51, 45);
        reposition.to(oNum10, 63, 81);
        reposition.to(oNum15, 61, 122);
        reposition.to(oNum20, 44, 146);
        reposition.to(oNum25, 24, 144);
        reposition.to(oNum30, 10, 111);
        reposition.to(oNum35, 12, 73);
        reposition.to(oDialCenter, 32, 100);
        goto(checkexit);
      }
      if (currentNum == 3) {
        reposition.to(oNum00, 27, 43);
        reposition.to(oNum05, 46, 42);
        reposition.to(oNum10, 62, 71);
        reposition.to(oNum15, 63, 113);
        reposition.to(oNum20, 48, 145);
        reposition.to(oNum25, 27, 146);
        reposition.to(oNum30, 12, 120);
        reposition.to(oNum35, 10, 81);
        reposition.to(oDialCenter, 32, 101);
        goto(checkexit);
      }
      if (currentNum == 4) {
        reposition.to(oNum00, 22, 48);
        reposition.to(oNum05, 42, 41);
        reposition.to(oNum10, 59, 65);
        reposition.to(oNum15, 65, 105);
        reposition.to(oNum20, 52, 140);
        reposition.to(oNum25, 31, 148);
        reposition.to(oNum30, 13, 126);
        reposition.to(oNum35, 9, 89);
        reposition.to(oDialCenter, 32, 102);
        goto(checkexit);
      }
      if (currentNum == 5) {
        reposition.to(oNum00, 19, 54);
        reposition.to(oNum05, 38, 40);
        reposition.to(oNum10, 56, 58);
        reposition.to(oNum15, 66, 95);
        reposition.to(oNum20, 56, 134);
        reposition.to(oNum25, 34, 147);
        reposition.to(oNum30, 16, 134);
        reposition.to(oNum35, 10, 95);
        reposition.to(oDialCenter, 32, 103);
        goto(checkexit);
      }
      if (currentNum == 6) {
        reposition.to(oNum00, 14, 60);
        reposition.to(oNum05, 34, 40);
        reposition.to(oNum10, 54, 49);
        reposition.to(oNum15, 65, 88);
        reposition.to(oNum20, 59, 128);
        reposition.to(oNum25, 41, 149);
        reposition.to(oNum30, 20, 140);
        reposition.to(oNum35, 9, 104);
        reposition.to(oDialCenter, 33, 104);
        goto(checkexit);
      }
      if (currentNum == 7) {
        reposition.to(oNum00, 13, 68);
        reposition.to(oNum05, 31, 42);
        reposition.to(oNum10, 49, 46);
        reposition.to(oNum15, 64, 81);
        reposition.to(oNum20, 61, 120);
        reposition.to(oNum25, 43, 147);
        reposition.to(oNum30, 24, 145);
        reposition.to(oNum35, 10, 111);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 8) {
        reposition.to(oNum00, 11, 78);
        reposition.to(oNum05, 26, 46);
        reposition.to(oNum10, 45, 41);
        reposition.to(oNum15, 62, 72);
        reposition.to(oNum20, 63, 111);
        reposition.to(oNum25, 47, 145);
        reposition.to(oNum30, 28, 147);
        reposition.to(oNum35, 12, 121);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 9) {
        reposition.to(oNum00, 11, 83);
        reposition.to(oNum05, 22, 50);
        reposition.to(oNum10, 41, 40);
        reposition.to(oNum15, 59, 65);
        reposition.to(oNum20, 65, 104);
        reposition.to(oNum25, 52, 142);
        reposition.to(oNum30, 31, 147);
        reposition.to(oNum35, 13, 126);
        reposition.to(oDialCenter, 35, 105);
        goto(checkexit);
      }
    } else {
      if (currentNum == 10) {
        reposition.to(oNum00, 11, 90);
        reposition.to(oNum05, 19, 56);
        reposition.to(oNum10, 37, 40);
        reposition.to(oNum15, 56, 57);
        reposition.to(oNum20, 66, 96);
        reposition.to(oNum25, 55, 135);
        reposition.to(oNum30, 36, 147);
        reposition.to(oNum35, 16, 136);
        reposition.to(oDialCenter, 35, 105);
        goto(checkexit);
      }
      if (currentNum == 11) {
        reposition.to(oNum00, 11, 97);
        reposition.to(oNum05, 15, 62);
        reposition.to(oNum10, 32, 40);
        reposition.to(oNum15, 54, 52);
        reposition.to(oNum20, 66, 87);
        reposition.to(oNum25, 58, 126);
        reposition.to(oNum30, 41, 148);
        reposition.to(oNum35, 20, 142);
        reposition.to(oDialCenter, 35, 105);
        goto(checkexit);
      }
      if (currentNum == 12) {
        reposition.to(oNum00, 11, 104);
        reposition.to(oNum05, 13, 69);
        reposition.to(oNum10, 29, 42);
        reposition.to(oNum15, 49, 46);
        reposition.to(oNum20, 62, 80);
        reposition.to(oNum25, 61, 120);
        reposition.to(oNum30, 44, 146);
        reposition.to(oNum35, 24, 145);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 13) {
        reposition.to(oNum00, 13, 113);
        reposition.to(oNum05, 11, 77);
        reposition.to(oNum10, 24, 46);
        reposition.to(oNum15, 45, 43);
        reposition.to(oNum20, 60, 72);
        reposition.to(oNum25, 63, 111);
        reposition.to(oNum30, 48, 145);
        reposition.to(oNum35, 27, 148);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 14) {
        reposition.to(oNum00, 15, 121);
        reposition.to(oNum05, 11, 84);
        reposition.to(oNum10, 20, 50);
        reposition.to(oNum15, 41, 40);
        reposition.to(oNum20, 58, 67);
        reposition.to(oNum25, 65, 104);
        reposition.to(oNum30, 52, 140);
        reposition.to(oNum35, 30, 148);
        reposition.to(oDialCenter, 33, 104);
        goto(checkexit);
      }
      if (currentNum == 15) {
        reposition.to(oNum00, 19, 129);
        reposition.to(oNum05, 11, 92);
        reposition.to(oNum10, 17, 58);
        reposition.to(oNum15, 37, 39);
        reposition.to(oNum20, 55, 59);
        reposition.to(oNum25, 66, 96);
        reposition.to(oNum30, 56, 134);
        reposition.to(oNum35, 36, 147);
        reposition.to(oDialCenter, 32, 103);
        goto(checkexit);
      }
      if (currentNum == 16) {
        reposition.to(oNum00, 22, 135);
        reposition.to(oNum05, 11, 101);
        reposition.to(oNum10, 14, 64);
        reposition.to(oNum15, 32, 39);
        reposition.to(oNum20, 52, 50);
        reposition.to(oNum25, 66, 88);
        reposition.to(oNum30, 59, 128);
        reposition.to(oNum35, 41, 148);
        reposition.to(oDialCenter, 32, 102);
        goto(checkexit);
      }
      if (currentNum == 17) {
        reposition.to(oNum00, 27, 140);
        reposition.to(oNum05, 12, 106);
        reposition.to(oNum10, 12, 70);
        reposition.to(oNum15, 29, 41);
        reposition.to(oNum20, 47, 46);
        reposition.to(oNum25, 63, 81);
        reposition.to(oNum30, 61, 119);
        reposition.to(oNum35, 44, 146);
        reposition.to(oDialCenter, 32, 101);
        goto(checkexit);
      }
      if (currentNum == 18) {
        reposition.to(oNum00, 32, 144);
        reposition.to(oNum05, 14, 116);
        reposition.to(oNum10, 10, 78);
        reposition.to(oNum15, 24, 46);
        reposition.to(oNum20, 42, 42);
        reposition.to(oNum25, 60, 71);
        reposition.to(oNum30, 63, 111);
        reposition.to(oNum35, 47, 146);
        reposition.to(oDialCenter, 32, 100);
        goto(checkexit);
      }
      if (currentNum == 19) {
        reposition.to(oNum00, 35, 146);
        reposition.to(oNum05, 15, 122);
        reposition.to(oNum10, 10, 85);
        reposition.to(oNum15, 20, 50);
        reposition.to(oNum20, 40, 40);
        reposition.to(oNum25, 58, 66);
        reposition.to(oNum30, 65, 104);
        reposition.to(oNum35, 52, 141);
        reposition.to(oDialCenter, 32, 99);
        goto(checkexit);
      }
    }
  } else {
    if (currentNum < 30) {
      if (currentNum == 20) {
        reposition.to(oNum00, 38, 146);
        reposition.to(oNum05, 18, 130);
        reposition.to(oNum10, 11, 94);
        reposition.to(oNum15, 18, 55);
        reposition.to(oNum20, 35, 37);
        reposition.to(oNum25, 55, 58);
        reposition.to(oNum30, 66, 96);
        reposition.to(oNum35, 55, 135);
        reposition.to(oDialCenter, 32, 98);
        goto(checkexit);
      }
      if (currentNum == 21) {
        reposition.to(oNum00, 43, 145);
        reposition.to(oNum05, 21, 136);
        reposition.to(oNum10, 10, 101);
        reposition.to(oNum15, 14, 61);
        reposition.to(oNum20, 30, 38);
        reposition.to(oNum25, 52, 51);
        reposition.to(oNum30, 66, 87);
        reposition.to(oNum35, 58, 126);
        reposition.to(oDialCenter, 32, 99);
        goto(checkexit);
      }
      if (currentNum == 22) {
        reposition.to(oNum00, 46, 144);
        reposition.to(oNum05, 25, 141);
        reposition.to(oNum10, 10, 109);
        reposition.to(oNum15, 12, 67);
        reposition.to(oNum20, 28, 43);
        reposition.to(oNum25, 47, 46);
        reposition.to(oNum30, 62, 80);
        reposition.to(oNum35, 61, 120);
        reposition.to(oDialCenter, 32, 100);
        goto(checkexit);
      }
      if (currentNum == 23) {
        reposition.to(oNum00, 50, 140);
        reposition.to(oNum05, 29, 144);
        reposition.to(oNum10, 12, 119);
        reposition.to(oNum15, 11, 76);
        reposition.to(oNum20, 24, 47);
        reposition.to(oNum25, 43, 42);
        reposition.to(oNum30, 61, 72);
        reposition.to(oNum35, 63, 111);
        reposition.to(oDialCenter, 32, 101);
        goto(checkexit);
      }
      if (currentNum == 24) {
        reposition.to(oNum00, 54, 135);
        reposition.to(oNum05, 34, 146);
        reposition.to(oNum10, 14, 127);
        reposition.to(oNum15, 9, 84);
        reposition.to(oNum20, 19, 51);
        reposition.to(oNum25, 40, 38);
        reposition.to(oNum30, 58, 65);
        reposition.to(oNum35, 65, 103);
        reposition.to(oDialCenter, 32, 102);
        goto(checkexit);
      }
      if (currentNum == 25) {
        reposition.to(oNum00, 57, 129);
        reposition.to(oNum05, 38, 147);
        reposition.to(oNum10, 16, 132);
        reposition.to(oNum15, 10, 93);
        reposition.to(oNum20, 16, 59);
        reposition.to(oNum25, 36, 39);
        reposition.to(oNum30, 56, 59);
        reposition.to(oNum35, 66, 96);
        reposition.to(oDialCenter, 32, 103);
        goto(checkexit);
      }
      if (currentNum == 26) {
        reposition.to(oNum00, 60, 121);
        reposition.to(oNum05, 44, 146);
        reposition.to(oNum10, 20, 139);
        reposition.to(oNum15, 10, 101);
        reposition.to(oNum20, 14, 66);
        reposition.to(oNum25, 30, 38);
        reposition.to(oNum30, 52, 50);
        reposition.to(oNum35, 66, 88);
        reposition.to(oDialCenter, 33, 104);
        goto(checkexit);
      }
      if (currentNum == 27) {
        reposition.to(oNum00, 62, 113);
        reposition.to(oNum05, 46, 144);
        reposition.to(oNum10, 24, 143);
        reposition.to(oNum15, 10, 109);
        reposition.to(oNum20, 12, 72);
        reposition.to(oNum25, 27, 42);
        reposition.to(oNum30, 47, 46);
        reposition.to(oNum35, 63, 80);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 28) {
        reposition.to(oNum00, 65, 104);
        reposition.to(oNum05, 50, 141);
        reposition.to(oNum10, 28, 147);
        reposition.to(oNum15, 12, 118);
        reposition.to(oNum20, 10, 82);
        reposition.to(oNum25, 24, 47);
        reposition.to(oNum30, 42, 42);
        reposition.to(oNum35, 62, 72);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 29) {
        reposition.to(oNum00, 65, 97);
        reposition.to(oNum05, 54, 136);
        reposition.to(oNum10, 32, 148);
        reposition.to(oNum15, 13, 125);
        reposition.to(oNum20, 10, 88);
        reposition.to(oNum25, 19, 51);
        reposition.to(oNum30, 40, 39);
        reposition.to(oNum35, 58, 65);
        reposition.to(oDialCenter, 35, 105);
        goto(checkexit);
      }
    } else {
      if (currentNum == 30) {
        reposition.to(oNum00, 65, 90);
        reposition.to(oNum05, 57, 130);
        reposition.to(oNum10, 36, 146);
        reposition.to(oNum15, 16, 132);
        reposition.to(oNum20, 10, 96);
        reposition.to(oNum25, 16, 59);
        reposition.to(oNum30, 35, 37);
        reposition.to(oNum35, 56, 57);
        reposition.to(oDialCenter, 35, 105);
        goto(checkexit);
      }
      if (currentNum == 31) {
        reposition.to(oNum00, 65, 83);
        reposition.to(oNum05, 59, 123);
        reposition.to(oNum10, 41, 146);
        reposition.to(oNum15, 19, 140);
        reposition.to(oNum20, 9, 104);
        reposition.to(oNum25, 14, 66);
        reposition.to(oNum30, 30, 38);
        reposition.to(oNum35, 52, 49);
        reposition.to(oDialCenter, 35, 105);
        goto(checkexit);
      }
      if (currentNum == 32) {
        reposition.to(oNum00, 65, 77);
        reposition.to(oNum05, 61, 115);
        reposition.to(oNum10, 43, 147);
        reposition.to(oNum15, 24, 143);
        reposition.to(oNum20, 10, 112);
        reposition.to(oNum25, 12, 72);
        reposition.to(oNum30, 28, 42);
        reposition.to(oNum35, 47, 45);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 33) {
        reposition.to(oNum00, 62, 68);
        reposition.to(oNum05, 63, 107);
        reposition.to(oNum10, 48, 144);
        reposition.to(oNum15, 27, 146);
        reposition.to(oNum20, 12, 117);
        reposition.to(oNum25, 10, 82);
        reposition.to(oNum30, 24, 46);
        reposition.to(oNum35, 43, 41);
        reposition.to(oDialCenter, 34, 105);
        goto(checkexit);
      }
      if (currentNum == 34) {
        reposition.to(oNum00, 60, 60);
        reposition.to(oNum05, 64, 99);
        reposition.to(oNum10, 52, 139);
        reposition.to(oNum15, 31, 148);
        reposition.to(oNum20, 13, 125);
        reposition.to(oNum25, 10, 88);
        reposition.to(oNum30, 19, 50);
        reposition.to(oNum35, 40, 38);
        reposition.to(oDialCenter, 33, 104);
        goto(checkexit);
      }
      if (currentNum == 35) {
        reposition.to(oNum00, 57, 54);
        reposition.to(oNum05, 64, 89);
        reposition.to(oNum10, 54, 132);
        reposition.to(oNum15, 35, 147);
        reposition.to(oNum20, 16, 134);
        reposition.to(oNum25, 10, 96);
        reposition.to(oNum30, 16, 57);
        reposition.to(oNum35, 35, 37);
        reposition.to(oDialCenter, 32, 103);
        goto(checkexit);
      }
      if (currentNum == 36) {
        reposition.to(oNum00, 54, 48);
        reposition.to(oNum05, 63, 80);
        reposition.to(oNum10, 59, 125);
        reposition.to(oNum15, 41, 147);
        reposition.to(oNum20, 20, 140);
        reposition.to(oNum25, 9, 104);
        reposition.to(oNum30, 14, 64);
        reposition.to(oNum35, 30, 38);
        reposition.to(oDialCenter, 32, 102);
        goto(checkexit);
      }
      if (currentNum == 37) {
        reposition.to(oNum00, 50, 43);
        reposition.to(oNum05, 63, 76);
        reposition.to(oNum10, 61, 117);
        reposition.to(oNum15, 43, 147);
        reposition.to(oNum20, 24, 145);
        reposition.to(oNum25, 10, 112);
        reposition.to(oNum30, 12, 71);
        reposition.to(oNum35, 27, 41);
        reposition.to(oDialCenter, 32, 101);
        goto(checkexit);
      }
      if (currentNum == 38) {
        reposition.to(oNum00, 46, 39);
        reposition.to(oNum05, 61, 67);
        reposition.to(oNum10, 63, 110);
        reposition.to(oNum15, 48, 144);
        reposition.to(oNum20, 28, 147);
        reposition.to(oNum25, 13, 120);
        reposition.to(oNum30, 10, 81);
        reposition.to(oNum35, 24, 46);
        reposition.to(oDialCenter, 32, 100);
        goto(checkexit);
      }
      if (currentNum == 39) {
        reposition.to(oNum00, 43, 40);
        reposition.to(oNum05, 60, 61);
        reposition.to(oNum10, 65, 102);
        reposition.to(oNum15, 52, 139);
        reposition.to(oNum20, 31, 147);
        reposition.to(oNum25, 13, 125);
        reposition.to(oNum30, 10, 88);
        reposition.to(oNum35, 19, 50);
        reposition.to(oDialCenter, 32, 99);
      }
    }
  }
}

[***************************************
[ CHECK FOR AN EXIT CONDITION
[***************************************
:checkexit
[ if this is first time through the logic, need to show the room
if (newRoom) {
  [ force update (argument doesn't matter);
  force.update(ego);
  [ use hand cursor
  cursoricon = C_USE; [cursormode;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  [ fade in
  block(FADE.IN, BYNUM, FADECOUNT, BLACK); [ fade.in(FN_MODE, DELAY, COLOR)
  return();
}

[ ESC or right-click to cancel;
[ correct combo to open
if ((openSafe || controller(cMenu) || controller(cRightClick))) {
  :exit
  [ save current dial position
  comboNumber = currentNum;
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  [ fade out to black (faster than room fade)
  block(FADE.OUT, BYNUM, 10, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
  [ restore default palette
  block(SET.PALETTE, BYNUM, &m15, 1); [ set.palette(FN_MODE, PALETTE, LOADONLY)
  [ reenable input
  accept.input();
  reset(disableGameFunctions);
  [ restore statusline
  status.line.on();
  [ restore scripting
  reset(noScript);
  
  new.room(rm.Office); [ ##LE001##
}

[ add exit checks here (or use layout editor)
return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "%g30"
#message 2 "%g31"
#message 3 "%g32"
#message 4 "%g33"
#message 5 "%g34"
#message 6 "%g35"
#message 7 "%g36"
#message 8 "%g37"
[             blk   blu     grn    cyn    red     mgt    brn   ltg
[#message ## "000000 00002A 002A00 002A2A 2A0000 2A002A 2A1500 2A2A2A"
[            "151515 15153F 153F15 153F3F 3F1515 3F153F 3F3F15 3F3F3F"
            
#message 10 "0000001515152A2A2A1515152A00002A002A2A15002A2A2A15151515153F1515151515153F15153F153F3F3F153F3F3F"
#message 11 "0000001515151515151515152A00002A002A2A15002A2A2A15151515153F1515152A2A2A3F15153F153F3F3F153F3F3F"
#message 12 "0000001515151515151515152A00002A002A2A15002A2A2A15151515153F2A2A2A1515153F15153F153F3F3F153F3F3F"
#message 13 "0000002A2A2A1515151515152A00002A002A2A15002A2A2A15151515153F1515151515153F15153F153F3F3F153F3F3F"
#message 14 "0000001515151515152A2A2A2A00002A002A2A15002A2A2A15151515153F1515151515153F15153F153F3F3F153F3F3F"
#message 15 "%s2"