[ ********************************************************************
[
[ rm.SafeDoor
[
[ 
[
[ ********************************************************************

#define oNum00         o1
#define oNum05         o2
#define oNum10         o3
#define oNum15         o4
#define oNum20         o5
#define oNum25         o6
#define oNum30         o7
#define oNum35         o8

#define currentNum    v220
#define comboNum1     v221
#define comboNum2     v222
#define comboNum3     v223
#define spinCount     v224
#define comboRev1     v225
#define comboRev2     v226
#define comboRev3     v227
#define startNum      v228

#define setNum1       f220
#define setNum2       f221
#define setNum3       f222
#define spinLeft      f223
#define spinRight     f224
#define updateCombo   f225

if (newRoom) {
  [ this is the first cycle through this room
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  
  [ the horizon defines the upper limit of ego's movement
  set.horizon(1);
  
  [ no ego, and no input (mouse only)
  set(disableGameFunctions);
  prevent.input();
  lastChar = 0;
  
  [ access to cursor icons
  load.logics(lgc.GameFunctions);
  
  load.view(vw.SafeArt);
  animate.obj(oNum00);
  set.view(oNum00, vw.SafeArt);
  set.loop(oNum00, 0);
  set.cel(oNum00, 0);
  stop.cycling(oNum00);
  set.priority(oNum00, 8);
  position(oNum00, 39, 38);
  ignore.objs(oNum00);
  draw(oNum00);

  animate.obj(oNum05);
  set.view(oNum05, vw.SafeArt);
  set.loop(oNum05, 1);
  set.cel(oNum05, 0);
  stop.cycling(oNum05);
  set.priority(oNum05, 8);
  position(oNum05, 57, 54);
  ignore.objs(oNum05);
  draw(oNum05);
  
  animate.obj(oNum10);
  set.view(oNum10, vw.SafeArt);
  set.loop(oNum10, 2);
  set.cel(oNum10, 0);
  stop.cycling(oNum10);
  set.priority(oNum10, 8);
  position(oNum10, 65, 95);
  ignore.objs(oNum10);
  draw(oNum10);
  
  animate.obj(oNum15);
  set.view(oNum15, vw.SafeArt);
  set.loop(oNum15, 3);
  set.cel(oNum15, 0);
  stop.cycling(oNum15);
  set.priority(oNum15, 8);
  position(oNum15, 55, 137);
  ignore.objs(oNum15);
  draw(oNum15);
  
  animate.obj(oNum20);
  set.view(oNum20, vw.SafeArt);
  set.loop(oNum20, 4);
  set.cel(oNum20, 0);
  stop.cycling(oNum20);
  set.priority(oNum20, 8);
  position(oNum20, 36, 153);
  ignore.objs(oNum20);
  draw(oNum20);
  
  animate.obj(oNum25);
  set.view(oNum25, vw.SafeArt);
  set.loop(oNum25, 5);
  set.cel(oNum25, 0);
  stop.cycling(oNum25);
  set.priority(oNum25, 8);
  position(oNum25, 16, 137);
  ignore.objs(oNum25);
[  draw(oNum25);
  
  animate.obj(oNum30);
  set.view(oNum30, vw.SafeArt);
  set.loop(oNum30, 6);
  set.cel(oNum30, 0);
  stop.cycling(oNum30);
  set.priority(oNum30, 8);
  position(oNum30, 7, 96);
  ignore.objs(oNum30);
[  draw(oNum30);
  
  animate.obj(oNum35);
  set.view(oNum35, vw.SafeArt);
  set.loop(oNum35, 7);
  set.cel(oNum35, 0);
  stop.cycling(oNum35);
  set.priority(oNum35, 8);
  position(oNum35, 16, 61);
  ignore.objs(oNum35);
[  draw(oNum35);
  
  [ turn right for 1st num, left one full turn, then to 2nd
  [ then right to 3rd num
  currentNum = 0;
  comboNum1 = -1;
  comboNum2 = -1;
  comboNum3 = -1;

  [ display the picture on screen
  show.pic();
  
display(12, 60, "currentNum1: %v220 ");
display(13, 60, "combo1: %v221/%v225  ");
display(14, 60, "combo2: %v222/%v226  ");
display(15, 60, "combo3: %v223/%v227  ");

  [ use hand cursor
  cursoricon = C_USE; [cursormode;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  [ fade in
  block(FADE.IN, 0, FADECOUNT, BLACK); [ fade.in(BYVAR, DELAY, COLOR)
  return();
}

[ check for handle click
if (controller(cLeftClick)) {
  block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
  work1 /= 16;
  if (work1 == 7) {
    [ check for correct combo
    [ TODO: determine final combination
    if (comboNum1 == 36 && comboNum2 == 24 && comboRev2 == 1 &&
        comboNum3 == 34) {
      print("correct!");
      set(fOpenSafe);
    } else {
      print("wrong combination- try again");
      comboNum1 = -1;
      comboNum2 = -1;
      comboNum3 = -1;
      comboRev1 = 0;
      comboRev2 = 0;
      comboRev3 = 0;
    }
  }
}

[ check for spin actions
if (mouseBtn == 1) {
  block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
  work1 /= 16;
  if (work1 == 5 && !spinLeft) {
    set(spinLeft);
  }
  if (work1 == 6 && !spinRight) {
    set(spinRight);
  }  
} else {
  if ((spinLeft || spinRight)) {
    [ always stop spinning if mouse up
    spinCount = 0;
    reset(spinLeft);
    reset(spinRight);
  }
}

[ spinning left
if (spinLeft) {
  [ if setting num1, switch to num2
  if (setNum1) {
    reset(setNum1);
    set(setNum2);
    comboRev2 = 0;
  } else {
    [ if setting 2, reset
    if (setNum3) {
      [ ?
      reset(setNum1);
      reset(setNum2);
      reset(setNum3);
      comboNum1 = -1;
      comboNum2 = -1;
      comboNum3 = -1;
      comboRev1 = 0;
      comboRev2 = 0;
      comboRev3 = 0;
    }
  }
  
  [ if counter is at zero, spin it
  if (spinCount == 0) {
    [ reset the counter
    spinCount = 2;
    [ adjust number
    currentNum += 1;
    if (currentNum > 39) {
      currentNum = 0;
    }
    [ force refresh
    set(updateCombo);
    [ if past 1st num 
    if (currentNum == comboNum1) {
     ++comboRev2;
    }
    
    [ if setting 2nd number, adjust it
    if (setNum2) {
      comboNum2 = currentNum;
    } else {
      [ all numbers are invalid
      comboNum1 = -1;
      comboNum2 = -1;
      comboNum3 = -1;
      comboRev1 = 0;
      comboRev2 = 0;
      comboRev3 = 0;
    }
  } else {
    --spinCount;
  }
}

[ spinning right
if (spinRight) {
  [ if nothing set, begin
  if (!setNum1 && !setNum2 && !setNum3) {
    set(setNum1);
  }
  [ if setting num2, move to 3
  if (setNum2) {
    reset(setNum2);
    set(setNum3);
    comboRev3 = 0;
  }
  
  [ if counter is at zero, spin it
  if (spinCount == 0) {
    [ reset the counter
    spinCount = 3;
    [ adjust number
    currentNum -= 1;
    if (currentNum > 39) {
      currentNum = 39;
    }
    [ force refresh
    set(updateCombo);
    
    [ if setting 1st number, adjust it
    if (setNum1) {
      comboNum1 = currentNum;
      if (currentNum == startNum) {
        ++comboRev1;
      }
    }
    [ if setting third number, adjust it
    if (setNum3) {
      comboNum3 = currentNum;
      if (currentNum == comboNum2) {
        [ too far; start over
        reset(setNum3);
        set(setNum1);
        startNum = currentNum;
        comboRev1 = 0;
        comboNum2 = -1;
        comboRev2 = 0;
        comboNum3 = -1;
        comboRev3 = 0;
      }
    }
  } else {
    --spinCount;
  }
}

[ update numbers as the dial spins
if (updateCombo) {
  reset(updateCombo);
  display(12, 60, "currentNum: %v220 ");
  display(13, 60, "combo1: %v221/%v225  ");
  display(14, 60, "combo2: %v222/%v226  ");
  display(15, 60, "combo3: %v223/%v227  ");
  set.cel.v(oNum00, currentNum);
  set.cel.v(oNum05, currentNum);
  set.cel.v(oNum10, currentNum);
  set.cel.v(oNum15, currentNum);
  set.cel.v(oNum20, currentNum);
  set.cel.v(oNum25, currentNum);
  set.cel.v(oNum30, currentNum);
  set.cel.v(oNum35, currentNum);
  
  if (currentNum < 20) {
    if (currentNum < 10) {
      if (currentNum == 0) {
        reposition.to(oNum00, 39, 38);
        reposition.to(oNum05, 57, 54);
        reposition.to(oNum10, 65, 95);
        reposition.to(oNum15, 55, 137);
        reposition.to(oNum20, 36, 153);
        reposition.to(oNum25, 16, 137);
        reposition.to(oNum30, 7, 96);
        reposition.to(oNum35, 16, 61);
        goto(checkexit);
      }
      if (currentNum == 1) {
        reposition.to(oNum00, 35, 41);
        reposition.to(oNum05, 54, 49);
        reposition.to(oNum10, 65, 88);
        reposition.to(oNum15, 59, 129);
        reposition.to(oNum20, 41, 153);
        reposition.to(oNum25, 20, 142);
        reposition.to(oNum30, 7, 105);
        reposition.to(oNum35, 12, 72);
        goto(checkexit);
      }
      if (currentNum == 2) {
        reposition.to(oNum00, 30, 39);
        reposition.to(oNum05, 51, 45);
        reposition.to(oNum10, 63, 81);
        reposition.to(oNum15, 61, 122);
        reposition.to(oNum20, 44, 151);
        goto(checkexit);
      }
      if (currentNum == 3) {
        reposition.to(oNum00, 25, 43);
        reposition.to(oNum05, 46, 42);
        reposition.to(oNum10, 62, 71);
        reposition.to(oNum15, 63, 113);
        reposition.to(oNum20, 48, 146);
        goto(checkexit);
      }
      if (currentNum == 4) {
        reposition.to(oNum00, 21, 48);
        reposition.to(oNum05, 42, 41);
        reposition.to(oNum10, 59, 65);
        reposition.to(oNum15, 65, 105);
        reposition.to(oNum20, 52, 141);
        goto(checkexit);
      }
      if (currentNum == 5) {
        reposition.to(oNum00, 17, 54);
        reposition.to(oNum05, 38, 40);
        reposition.to(oNum10, 56, 58);
        reposition.to(oNum15, 65, 95);
        reposition.to(oNum20, 56, 134);
        goto(checkexit);
      }
      if (currentNum == 6) {
        reposition.to(oNum00, 13, 60);
        reposition.to(oNum05, 34, 40);
        reposition.to(oNum10, 54, 49);
        reposition.to(oNum15, 65, 88);
        reposition.to(oNum20, 59, 128);
        goto(checkexit);
      }
      if (currentNum == 7) {
        reposition.to(oNum00, 10, 68);
        reposition.to(oNum05, 30, 42);
        reposition.to(oNum10, 49, 46);
        reposition.to(oNum15, 63, 82);
        reposition.to(oNum20, 61, 120);
        goto(checkexit);
      }
      if (currentNum == 8) {
        reposition.to(oNum00, 8, 78);
        reposition.to(oNum05, 25, 46);
        reposition.to(oNum10, 45, 41);
        reposition.to(oNum15, 62, 72);
        reposition.to(oNum20, 63, 111);
        goto(checkexit);
      }
      if (currentNum == 9) {
        reposition.to(oNum00, 7, 83);
        reposition.to(oNum05, 21, 50);
        reposition.to(oNum10, 41, 40);
        reposition.to(oNum15, 59, 65);
        reposition.to(oNum20, 65, 104);
        goto(checkexit);
      }
    } else {
      if (currentNum == 10) {
        reposition.to(oNum00, 7, 90);
        reposition.to(oNum05, 17, 56);
        reposition.to(oNum10, 37, 40);
        reposition.to(oNum15, 56, 58);
        reposition.to(oNum20, 66, 96);
        goto(checkexit);
      }
      if (currentNum == 11) {
        reposition.to(oNum00, 7, 98);
        reposition.to(oNum05, 13, 62);
        reposition.to(oNum10, 32, 40);
        reposition.to(oNum15, 54, 51);
        reposition.to(oNum20, 66, 87);
        goto(checkexit);
      }
      if (currentNum == 12) {
        reposition.to(oNum00, 8, 108);
        reposition.to(oNum05, 10, 69);
        reposition.to(oNum10, 29, 42);
        reposition.to(oNum15, 49, 47);
        reposition.to(oNum20, 62, 80);
        goto(checkexit);
      }
      if (currentNum == 13) {
        reposition.to(oNum00, 10, 117);
        reposition.to(oNum05, 8, 77);
        reposition.to(oNum10, 24, 46);
        reposition.to(oNum15, 45, 43);
        reposition.to(oNum20, 60, 72);
        goto(checkexit);
      }
      if (currentNum == 14) {
        reposition.to(oNum00, 13, 125);
        reposition.to(oNum05, 7, 84);
        reposition.to(oNum10, 20, 50);
        reposition.to(oNum15, 41, 40);
        reposition.to(oNum20, 58, 67);
        goto(checkexit);
      }
      if (currentNum == 15) {
        reposition.to(oNum00, 17, 133);
        reposition.to(oNum05, 7, 92);
        reposition.to(oNum10, 17, 58);
        reposition.to(oNum15, 37, 40);
        reposition.to(oNum20, 55, 59);
        goto(checkexit);
      }
      if (currentNum == 16) {
        reposition.to(oNum00, 21, 141);
        reposition.to(oNum05, 7, 101);
        reposition.to(oNum10, 13, 64);
        reposition.to(oNum15, 32, 40);
        reposition.to(oNum20, 52, 50);
        goto(checkexit);
      }
      if (currentNum == 17) {
        reposition.to(oNum00, 25, 146);
        reposition.to(oNum05, 8, 108);
        reposition.to(oNum10, 10, 70);
        reposition.to(oNum15, 29, 42);
        reposition.to(oNum20, 46, 47);
        goto(checkexit);
      }
      if (currentNum == 18) {
        reposition.to(oNum00, 30, 151);
        reposition.to(oNum05, 10, 117);
        reposition.to(oNum10, 8, 78);
        reposition.to(oNum15, 24, 46);
        reposition.to(oNum20, 42, 42);
        goto(checkexit);
      }
      if (currentNum == 19) {
        reposition.to(oNum00, 35, 153);
        reposition.to(oNum05, 13, 125);
        reposition.to(oNum10, 7, 85);
        reposition.to(oNum15, 20, 50);
        reposition.to(oNum20, 40, 40);
        goto(checkexit);
      }
    }
  } else {
    if (currentNum < 30) {
      if (currentNum == 20) {
        reposition.to(oNum00, 38, 153);
        reposition.to(oNum05, 17, 133);
        reposition.to(oNum10, 7, 94);
        reposition.to(oNum15, 17, 55);
        reposition.to(oNum20, 35, 37);
        goto(checkexit);
      }
      if (currentNum == 21) {
        reposition.to(oNum00, 43, 153);
        reposition.to(oNum05, 21, 141);
        reposition.to(oNum10, 7, 101);
        reposition.to(oNum15, 13, 60);
        reposition.to(oNum20, 30, 38);
        goto(checkexit);
      }
      if (currentNum == 22) {
        reposition.to(oNum00, 46, 151);
        reposition.to(oNum05, 25, 146);
        reposition.to(oNum10, 8, 109);
        reposition.to(oNum15, 10, 67);
        reposition.to(oNum20, 28, 43);
        goto(checkexit);
      }
      if (currentNum == 23) {
        reposition.to(oNum00, 50, 146);
        reposition.to(oNum05, 29, 151);
        reposition.to(oNum10, 10, 119);
        reposition.to(oNum15, 8, 76);
        reposition.to(oNum20, 24, 47);
        goto(checkexit);
      }
      if (currentNum == 24) {
        reposition.to(oNum00, 54, 141);
        reposition.to(oNum05, 34, 153);
        reposition.to(oNum10, 13, 127);
        reposition.to(oNum15, 7, 84);
        reposition.to(oNum20, 19, 51);
        goto(checkexit);
      }
      if (currentNum == 25) {
        reposition.to(oNum00, 57, 133);
        reposition.to(oNum05, 38, 153);
        reposition.to(oNum10, 16, 133);
        reposition.to(oNum15, 7, 93);
        reposition.to(oNum20, 16, 59);
        goto(checkexit);
      }
      if (currentNum == 26) {
        reposition.to(oNum00, 60, 125);
        reposition.to(oNum05, 44, 154);
        reposition.to(oNum10, 20, 141);
        reposition.to(oNum15, 7, 101);
        reposition.to(oNum20, 13, 66);
        goto(checkexit);
      }
      if (currentNum == 27) {
        reposition.to(oNum00, 62, 117);
        reposition.to(oNum05, 46, 151);
        reposition.to(oNum10, 24, 146);
        reposition.to(oNum15, 8, 109);
        reposition.to(oNum20, 10, 72);
        goto(checkexit);
      }
      if (currentNum == 28) {
        reposition.to(oNum00, 65, 108);
        reposition.to(oNum05, 50, 146);
        reposition.to(oNum10, 28, 151);
        reposition.to(oNum15, 10, 119);
        reposition.to(oNum20, 8, 82);
        goto(checkexit);
      }
      if (currentNum == 29) {
        reposition.to(oNum00, 65, 98);
        reposition.to(oNum05, 54, 141);
        reposition.to(oNum10, 32, 153);
        reposition.to(oNum15, 13, 127);
        reposition.to(oNum20, 7, 88);
        goto(checkexit);
      }
    } else {
      if (currentNum == 30) {
        reposition.to(oNum00, 65, 90);
        reposition.to(oNum05, 57, 133);
        reposition.to(oNum10, 36, 153);
        reposition.to(oNum15, 16, 133);
        reposition.to(oNum20, 7, 96);
        goto(checkexit);
      }
      if (currentNum == 31) {
        reposition.to(oNum00, 65, 83);
        reposition.to(oNum05, 59, 125);
        reposition.to(oNum10, 41, 153);
        reposition.to(oNum15, 19, 141);
        reposition.to(oNum20, 7, 104);
        goto(checkexit);
      }
      if (currentNum == 32) {
        reposition.to(oNum00, 65, 77);
        reposition.to(oNum05, 61, 117);
        reposition.to(oNum10, 43, 151);
        reposition.to(oNum15, 24, 146);
        reposition.to(oNum20, 8, 112);
        goto(checkexit);
      }
      if (currentNum == 33) {
        reposition.to(oNum00, 62, 68);
        reposition.to(oNum05, 63, 108);
        reposition.to(oNum10, 48, 146);
        reposition.to(oNum15, 27, 151);
        reposition.to(oNum20, 10, 117);
        goto(checkexit);
      }
      if (currentNum == 34) {
        reposition.to(oNum00, 60, 60);
        reposition.to(oNum05, 64, 99);
        reposition.to(oNum10, 52, 141);
        reposition.to(oNum15, 31, 153);
        reposition.to(oNum20, 13, 125);
        goto(checkexit);
      }
      if (currentNum == 35) {
        reposition.to(oNum00, 57, 54);
        reposition.to(oNum05, 64, 89);
        reposition.to(oNum10, 54, 133);
        reposition.to(oNum15, 35, 153);
        reposition.to(oNum20, 16, 134);
        goto(checkexit);
      }
      if (currentNum == 36) {
        reposition.to(oNum00, 54, 48);
        reposition.to(oNum05, 63, 80);
        reposition.to(oNum10, 59, 125);
        reposition.to(oNum15, 41, 153);
        reposition.to(oNum20, 20, 141);
        goto(checkexit);
      }
      if (currentNum == 37) {
        reposition.to(oNum00, 50, 43);
        reposition.to(oNum05, 63, 76);
        reposition.to(oNum10, 60, 117);
        reposition.to(oNum15, 43, 151);
        reposition.to(oNum20, 24, 146);
        goto(checkexit);
      }
      if (currentNum == 38) {
        reposition.to(oNum00, 46, 39);
        reposition.to(oNum05, 61, 67);
        reposition.to(oNum10, 63, 110);
        reposition.to(oNum15, 48, 146);
        reposition.to(oNum20, 28, 151);
        goto(checkexit);
      }
      if (currentNum == 39) {
        reposition.to(oNum00, 43, 40);
        reposition.to(oNum05, 60, 61);
        reposition.to(oNum10, 65, 102);
        reposition.to(oNum15, 52, 141);
        reposition.to(oNum20, 31, 153);
        goto(checkexit);
      }
    }
  }
}

:checkexit
[ ESC or right-click to cancel;
[ correct combo to open
if ((fOpenSafe || lastChar == 27 || controller(cRightClick))) {
  [ reenable input
  accept.input();
  reset(disableGameFunctions);
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  [ fade out to black (faster than room fade)
  block(FADE.OUT, 0, 10, BLACK); [ fade.out(BYVAR, DELAY, COLOR)

  new.room.v(previousRoom);
}

[ add exit checks here (or use layout editor)
return();

[*****
[ messages         [  declared messages go here
[*****
#message 1 "%l90|40"
#message 2 "%l90|41"
#message 3 "%l90|42"
#message 4 "%l90|43"
#message 5 "%l90|44"
#message 6 "%l90|45"