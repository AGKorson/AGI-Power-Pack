[ ********************************************************************
[
[ rm.Lobby
[
[ receptionist is always here. start with patients 1 and 2
[ patient 3 arrives later. Patient 2 will then leave, patient 4
[ (reusing object number for patient 2 will arrive. Patient 3
[ then leaves; no more patient changes after that.
[
[ This room is a memory hog! In order to make it work with four
[ different patients, the views for patients are only loaded when
[ the patients using them are active; they are disarded after the
[ patient leaves the screen. AGI's memory model doesn't make that 
[ easy. Scripting has to be turned off for the views, and they 
[ need to be loaded/discarded in proper order every time a patient
[ leaves. When saving/restoring, patient objects need to be temp-
[ orarily erased, then redrawn after view resources are properly
[ set up.

[ ********************************************************************
[ TODO: more said statements for lobby
[ TODO: sound effects for phone, typing, doors

[ **************************************
[ LOCAL DEFINES
[ **************************************
#define backpane         o1
#define frontpane        o2
#define oReceptionist    o3
#define   LP_R_SIT       0
#define   LP_R_GETPHONE  1
#define   LP_R_TALKPHONE 2
#define   LP_R_SPEAK     3
#define   LP_TYPING      4
#define   LP_FLIPPING    5
#define oPatient1        o4
#define oPatient2        o5
#define oPatient3        o6
#define oPatient4        o7
#define   LP_MOVERIGHT  0
#define   LP_MOVELEFT   1
#define   LP_MOVEDOWN   2
#define   LP_MOVEUP     3
#define   LP_P_SIT      4
#define   LP_P_SPEAK    5
#define   LP_P_GETPHONE 6
#define   LP_USEPHONE   7
#define   LP_GETBOOK    8
#define   LP_READBOOK   9
#define   LP_TAPTOE     8

#define oMagazine       o8
#define oPapers         o9

#define frontdooropen  f220
#define fRDone         f221
#define fP1Done        f222
#define fP2Done        f223
#define fP3Done        f224
#define fP4Done        f225
#define fPaneDone      f226
#define fAskToPee      f227
#define fOneMinute     f228
#define fEgoWaitTalk   f229
#define fPatient1Talking      f230
#define fEgoTalkReceptionist  f231
#define fEgoTalkPatient       f232
#define checktalk      f233
#define fPatientAtDoor f234
#define fTripping      f235
#define fFalling       f236
#define fSlipped       f237
#define fPagesTurned   f238

#define receptionistLoc v220
#define   PHONE         1
#define   COMPUTER      2
#define   DESK          3
#define   HALL          4
#define receptionistSeq    v221
#define receptionistTimer  v222
#define receptionistCtr v223

#define patient1Seq    v224 [ sequence marker
#define patient1Timer  v225 [ timer for events, uses delta from gameclock seconds
#define patient1Ctr    v226 [ counter, used for events measured in cycles
#define bookcycles     v227

#define patient2Seq    v228
#define patient2Timer  v229
#define patient2Ctr    v230

#define patient3Seq    v231
#define patient3Timer  v232
#define patient3Ctr    v233

#define patient4Seq    v234 [ patient 2 and 4 are never on screen at same time
#define patient4Timer  v235
#define patient4Ctr    v236

#define tmpSec         v237
#define tmpMin         v238
#define secondCtr      v239

[ sequence actions for receptionist and patients
#define   SKIP         -1
#define   IDLE          0
#define   MOVEPHONE     1
#define   SITDOWN       2
#define   GETPHONE      3
#define   TALKPHONE     4
#define   HANGUP        5
#define   STANDUP       6
#define   SITSPEAK      7
#define   STANDSPEAK1   8
#define   STANDSPEAK2   9
#define   MOVECOMP     10
#define   R_MOVEDESK   11
#define   MOVEHALL1    12
#define   MOVEHALL2    13
#define   MOVEHALL3    14
#define   MOVEHALL4    15
#define   WAITHALL     16
#define   RTNHALL1     17
#define   RTNHALL2     18
#define   RTNHALL3     19
#define   RTNHALL4     20
#define   WAITDESK     21
#define   WAITPHONE    22
#define   NEWLOCATION  23
#define   ARRIVE       24
#define   MOVECOUNTER  25
#define   WAITCOUNTER  26
#define   TALKCOUNTER1 27
#define   TALKCOUNTER2 28
#define   MOVESEAT1    29
#define   MOVESEAT2    30
#define   MOVESEAT3    31
#define   USEPHONE     32
#define   STOWPHONE    33
#define   GETBOOK      34
#define   READBOOK     35
#define   STOWBOOK     36
#define   TAPTOE       37
#define   MOVEEXIT1    38
#define   MOVEEXIT2    39
#define   STOPCONV     40
#define   EXAMREADY    41

if (newRoom) {
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  [ add toolbar buttons
  load.view(vw.ButtonsDown);
  call(lgc.InitToolbar);
  
  [ the horizon defines the upper limit of ego's movement
  set.horizon(94);
  
  [ add additional room initialization here
  load.view(vw.LobbyArt);
  if (obj.in.room("magazine", currentRoom)) {
    animate.obj(oMagazine);
    set.view(oMagazine, vw.LobbyArt);
    set.loop(oMagazine, 2);
    position(oMagazine, 127, 91);
    set.priority(oMagazine, 9);
    ignore.blocks(oMagazine);
    ignore.horizon(oMagazine);
    draw(oMagazine);
    stop.update(oMagazine);
  } 
    
  [ sliding glass door (two parts)
  animate.obj(backpane);
  set.view(backpane, vw.LobbyArt);
  set.loop(backpane, 0);
  fix.loop(backpane);
  stop.cycling(backpane);
  ignore.blocks(backpane);
  ignore.objs(backpane);
  set.priority(backpane, 4);
  animate.obj(frontpane);
  set.view(frontpane, vw.LobbyArt);
  set.loop(frontpane, 1);
  fix.loop(frontpane);
  stop.cycling(frontpane);
  ignore.blocks(frontpane);
  ignore.objs(frontpane);
  set.priority(frontpane, 15);
  
  [ receptionist, begin on phone
  load.view(vw.ReceptionistWalk);
  load.view(vw.ReceptionistAct);
  animate.obj(oReceptionist);
  ignore.horizon(oReceptionist);

  [ if coming from hall after ego was kicked out
  if (!allowedPastLobby && previousRoom == rm.Hallway) {
    [ begin offscreen
    set.view(oReceptionist, vw.ReceptionistWalk);
    position(oReceptionist, 16, 93);
    receptionistLoc = HALL;
    receptionistSeq = WAITHALL;
    random(5, 8, receptionistTimer);
    receptionistTimer += elapsedSeconds;
  } else {
    [ begin on phone
    set.view(oReceptionist, vw.ReceptionistAct);
    set.loop(oReceptionist, LP_R_TALKPHONE);
    receptionistLoc = PHONE;
    receptionistSeq = IDLE;
    position(oReceptionist, 60, 96);
    [ phone conversation start at 3-5 seconds
    random(3, 5, receptionistTimer);
    receptionistTimer += elapsedSeconds;
    draw(oReceptionist);
  }
  if (receptionistTimer > 59) {
    receptionistTimer -= 60;
  }
  
  [ patients
  [ patient 1 is old lady; sits against back wall,
  [ uses phone, reads book, talks to receptionist;
  [ never leaves lobby, except to use restroom
  
  [ patient 2 sits against side wall, uses phone, 
  [taps toe, goes to hall, leaves

  [ patient 3 starts out off screen, arrives just before
  [ patient 2 leaves; after arriving, sits against side
  [ wall, uses phone, goes to hall, leaves
  
  [ patient 4 starts out off screen, arrives just before
  [ patient 3 leaves; after arriving, sits against side
  [ wall, uses phone, talks to receptionist, goes to
  [ hall; never leaves lobby area

  [ patient actions are managed by timer, at designated
  [ intervals (minutes) patients take actions:
  [      P1  P2  P3  P4  
  [  0   L        
  [  1   L   L             P2 ARRIVE
  [  2   L   L      
  [  3   L*  L           P1 RESTROOM
  [  4   L   L     
  [  5   L   L   L           P3 ARRIVE
  [  6   L   E   L         P2 EXAM
  [  7   L   E   L    
  [  8   L   E   L
  [  9   L       L         P2 EXIT
  [  10  L       L    
  [  11  L       L   L         P4 ARRIVE
  [  12  L       E   L       P3 EXAM
  [  13  L       E   L  
  [  14  L       E   L  
  [  15  L           L       P3 EXIT
  [  16  L           E         P4 EXAM
  [  17  L           E  
  [  18  L           E  
  [  19  L                     P4 EXIT
  [ 
  [ *first time ego enters lobby, patient 1 will 
  [ always ask to use restroom at  1 minute mark
  [
  [ all patients begin seated if present when
  [ room is loaded; initial actions depend on 
  [ current timer point
  tmpSec = -1;
  tmpMin = elapsedMinutes;

  [ patient 1 (always present)
  animate.obj(oPatient1);
  load.view(vw.Patient1); 
  set.view(oPatient1, vw.Patient1);
  set.loop(oPatient1, LP_P_SIT);
  set.cel(oPatient1, 0);
  position(oPatient1, 106, 97);
  stop.cycling(oPatient1);
  ignore.blocks(oPatient1);
  ignore.horizon(oPatient1);
  draw(oPatient1);
  patient1Seq = IDLE;
  [ idle time is random, from 4 - 8 seconds
  random(4, 8, patient1Timer);
  patient1Timer += elapsedSeconds;
  if (patient1Timer > 59) {
    patient1Timer -= 60;
  }
  
  [ to save on memory, patient 2/3/4 views are
  [ only loaded when needed; need to turn off
  [ scripting when managing memory this way
  set(noScript);
  
  [ patient 2
  animate.obj(oPatient2);
  ignore.blocks(oPatient2);
  ignore.horizon(oPatient2);
  if (patient2Loc == LOC_GONE) {
    patient2Seq = SKIP;
    patient2Timer = 255;
  } else {
    load.view(vw.Patient2);
    set.view(oPatient2, vw.Patient2);
    if (patient2Loc == LOC_LOBBY) {
      position(oPatient2, 139, 133);
      set.loop(oPatient2, LP_P_SIT);
      set.cel(oPatient2, 0);
      stop.cycling(oPatient2);
      patient2Seq = IDLE;
      random(2, 4, patient2Timer);
      patient2Timer += elapsedSeconds;
      if (patient2Timer > 59) {
        patient2Timer -= 60;
      }
      draw(oPatient2);
    } else {
      position(oPatient2, 12, 92);
    }
  }
  
  [ patient 3
  animate.obj(oPatient3);
  ignore.blocks(oPatient3);
  ignore.horizon(oPatient3);
  if (patient3Loc == LOC_GONE) {
    patient3Seq = SKIP;
    patient3Timer = 255;
  } else {
    load.view(vw.Patient3);
    set.view(oPatient3, vw.Patient3);
    if (patient3Loc == LOC_LOBBY) {
      position(oPatient3, 130, 112);
      set.loop(oPatient3, LP_P_SIT);
      set.cel(oPatient3, 0);
      stop.cycling(oPatient3);
      patient3Seq = IDLE;
      random(2, 4, patient3Timer);
      patient3Timer += elapsedSeconds;
      if (patient3Timer > 59) {
        patient3Timer -= 60;
      }
      draw(oPatient3);
    } else {
      position(oPatient3, 12, 92);
    }
  }
  
  [ patient 4
  animate.obj(oPatient4);
  ignore.blocks(oPatient4);
  ignore.horizon(oPatient4);
  if (patient4Loc == LOC_GONE) {
    patient4Seq = SKIP;
    patient4Timer = 255;
  } else {
    load.view(vw.Patient4);
    set.view(oPatient4, vw.Patient4);
    if (patient4Loc == LOC_LOBBY) {
      position(oPatient4, 137, 127);
      set.loop(oPatient4, LP_P_SIT);
      set.cel(oPatient4, 0);
      stop.cycling(oPatient4);
      patient4Seq = IDLE;
      random(2, 4, patient4Timer);
      patient4Timer += elapsedSeconds;
      if (patient4Timer > 59) {
        patient4Timer -= 60;
      }
      draw(oPatient4);
    } else {
      position(oPatient4, 12, 92);
    }
  }
  
  [ restore scripting
  reset(noScript);
  
  [ desk papers
  animate.obj(oPapers);
  set.view(oPapers, vw.LobbyArt);
  set.loop(oPapers, 3);
  set.cel(oPapers, 0);
  ignore.objs(oPapers);
  stop.cycling(oPapers);
  position(oPapers, 37, 107);
  set.priority(oPapers, 11);
  draw(oPapers);
  
  [ ego
  if (previousRoom == rm.ParkingLot) {
    position(ego, 115, 164);
    set.loop(ego, 3);
    set(frontdooropen);
    set.cel(backpane, 12);
    position(backpane, 124, 162);
    ignore.objs(backpane);
    set.cel(frontpane, 12);
    position(frontpane, 127, 160);
  } else {
    position(ego, 87, 97);
    reset(frontdooropen);
    set.cel(backpane, 0);
    position(backpane, 112, 162);
    observe.objs(backpane);
    set.cel(frontpane, 0);
    position(frontpane, 113, 160);
  }
  egoDir = STOPPED;
  [ add ego to the room
  draw(ego);
  
  [ add automatic door panes to room
  draw(backpane);
  draw(frontpane);

  [ walkman is not allowed, so skip check here
  
  [ display the picture on screen
  show.pic();
  [ fade in
  block(FADE.IN, 0, FADECOUNT, BLACK); [ fade.in(BYVAR, DELAY, COLOR)
  [ restore cursor
  cursoricon = cursormode;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
[  return();
}

if (gameRestored) {
  set(noScript);
  [ patient 2
  if (patient2Loc != LOC_GONE) {
    load.view(vw.Patient2);
    set.view(oPatient2, vw.Patient2);
    draw(oPatient2);
  }
  [ patient 3
  if (patient3Loc != LOC_GONE) {
    load.view(vw.Patient3);
    set.view(oPatient3, vw.Patient3);
    draw(oPatient3);
  }
  [ patient 4
  if (patient4Loc != LOC_GONE) {
    load.view(vw.Patient4);
    set.view(oPatient4, vw.Patient4);
    draw(oPatient4);
  }
  reset(noScript);
}

[ check for walkman; if in use, have player stop it
if (currentTrack > 0 && currentTrack < 128) {
  [ reset it
  currentTrack *= -1;
  if (warnWalkman) {
    print("You turn off the walkman as you enter the lobby to comply "
          "with the receptionist's instructions.");
  } else {
    block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
    print.at("\"Excuse me, can you please turn off your music? Thanks!\"", 6, 6, 35);
    block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
    print("You decide it's best to comply with the receptionist's request, and turn off the walkman.");
    set(warnWalkman);
    if (receptionistLoc == HALL) {
      print("(How did she hear that from all the way out in the hallway?)");
    }
  }
}

[ check for one min timer
if (firstLobbyVisit) {
  if (tmpSec != elapsedSeconds) {
    tmpSec = elapsedSeconds;
    ++secondCtr;
    if (secondCtr == 45) {
[    if (secondCtr == 10) {
      set(fOneMinute);
    }
  }
  
} else {
  [ debug code to track timer
  if (tmpSec != elapsedSeconds) {
    tmpSec = elapsedSeconds;
    display(23, 68, "%v12|2:%v11|2 (%v82)  ");
  }
}

[ adjust priority around the counter corner
if (posn(ego, 65, 113, 75, 120)) {
  set.priority(ego, 11);
} else {
  release.priority(ego);
}

[ if ego moves away from counter
if ((egoX > 78 || egoY > 125)) {
  [ end any conversation that is in progress, or pending
  if ((fEgoWaitTalk || fEgoTalkReceptionist)) {
    if ((fEgoTalkReceptionist || receptionistSeq == STANDSPEAK1)) {
      receptionistSeq = STOPCONV;
      receptionistCtr = 1;
    }
    reset(fEgoWaitTalk);
    reset(fEgoTalkReceptionist);
  }
}

[ check for request to talk with receptionist
if (checktalk) {
  reset(checktalk);
  [ if ego is near the desk
  if (egoX < 79 && egoY < 126) {
    if (fEgoWaitTalk) {
      print("She said she will be with you shortly. Be patient.");
    } else {
      if (fPatient1Talking) {
        print("She is busy talking to that patient. Wait until they're done.");
      } else {
        get.posn(oReceptionist, work1, work2);
        if (work2 > 95) {
          [ if already talking, ignore the click
          if (!fEgoTalkReceptionist) {
            [ if on phone, need to wait
            if (receptionistLoc == PHONE && receptionistSeq == IDLE) {
              print("Wait until she's off the phone.");
            } else {
              block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
              print.at("\"I'll be right with you.\"", 6, 6, 35);
              block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
              set(fEgoWaitTalk);
              [ shorten receptionist's time on task
              if (receptionistTimer != 255) {
                receptionistTimer = 254;
              }
            }
          }
        } else {
          print("She can't hear you.");
        }
      }
    }
  } else {
    print.at("Move closer to the counter so she can hear you.", 6, 6, 35); 
  }
}

[**************************************************************
[ RECEPTIONIST
[**************************************************************

[ if a counter is active
if (receptionistCtr > 0) {
  --receptionistCtr;
  if (receptionistCtr == 0) {
    [ reset counter
    receptionistCtr = 0;
    
    [ answering patient 1 request for bathroom
    if (patient1Seq == TALKCOUNTER1) {
      block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"Sure! It's through that doorway. Go left "
               "and it's the second door on the right.\"", 6, 6, 35);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      start.cycling(oPatient1);
      set.cel(oReceptionist, 0);
      stop.cycling(oReceptionist);
      patient1Seq = TALKCOUNTER2;
      patient1Ctr = 5;
    }
    
    [ respond to ego or patient1 request to speak
    if ((fEgoWaitTalk || patient1Seq == WAITCOUNTER) && receptionistSeq == STANDSPEAK1) {
      block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"Can I help you?\"", 6, 6, 35);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      [ stop receptionist from cycling
      set.cel(oReceptionist, 0);
      stop.cycling(oReceptionist);
      if (patient1Seq == WAITCOUNTER) {
        set.loop(oPatient1, LP_P_SPEAK);
        start.cycling(oPatient1);
        patient1Seq = TALKCOUNTER1;
        patient1Ctr = 10;
        set(fPatient1Talking);
        [ cancel ego talk, if it was in progress
        reset(fEgoWaitTalk);
        reset(fEgoTalkReceptionist);
      } else {
        [ ego conversation initiated
        reset(fEgoWaitTalk);
        set(fEgoTalkReceptionist);
      }
    }
    
    [ if done talking to ego/patient1
    if (receptionistSeq == STOPCONV) {
      [ receptionist goes back to the phone
      receptionistSeq = MOVEPHONE;
      [ force done flag so it happens immediately
      set(fRDone);
      receptionistTimer = 254;
      
      [ update view and loop so the normal phone sequence will work correctly
      set.view(oReceptionist, vw.ReceptionistWalk);
      set.loop(oReceptionist, LP_MOVEDOWN);
      set.cel(oReceptionist, 0);
      work1 = 0;
      work2 = 11;
      reposition(oReceptionist, work1, work2);
    }
  }
}

[ if a timer is active
if (receptionistTimer != 255) {
  [ force action if a conversation is starting
  [ or if other force condition (==254)
  if ((fEgoWaitTalk || patient1Seq == WAITCOUNTER || 
       patient2Seq == EXAMREADY || patient3Seq == EXAMREADY || 
       patient4Seq == EXAMREADY || receptionistTimer == 254)) {
    receptionistTimer = elapsedSeconds;
  }
  if (receptionistTimer == elapsedSeconds) {
    [ reset timer
    receptionistTimer = 255;
    
    [ if timer is up, and receptionist is not doing anything, 
    [ go to a new location
    if ((receptionistSeq == IDLE || receptionistSeq == WAITHALL)) {
      receptionistSeq = NEWLOCATION;
    }
  }
}

[ check for an action that uses the flag to indicate it is complete
if (fRDone) {
  [ always reset the timer
  reset(fRDone);
  [ if done with first leg of return-from-hall
  if (receptionistSeq == RTNHALL1) {
    [ move to second point on return path
    receptionistSeq = RTNHALL2;
    move.obj(oReceptionist, 60, 99, 1, fRDone);
    goto(doneRSeq);
  }
  [ if at second point of return-to-hall (or if standing up at phone station)
  if ((receptionistSeq == RTNHALL2 || receptionistSeq == STANDUP)) {
    [ after standing up, select the walking view 
    if (receptionistSeq == STANDUP) {
      set.view(oReceptionist, vw.ReceptionistWalk);
      normal.cycle(oReceptionist);
      work1 = 0;
      work2 = 11;
      reposition(oReceptionist, work1, work2);
    }
    [ if next destination is the computer, move there
    if (receptionistLoc == COMPUTER) {
      receptionistSeq = MOVECOMP;
      move.obj(oReceptionist, 24, 99, 1, fRDone);
      goto(doneRSeq);
    }
    [ if next destination is the phone, move there
    if (receptionistLoc == PHONE) {
      receptionistSeq = MOVEPHONE;
      [ use front facing loop for entire move
      set.loop(oReceptionist, LP_MOVEDOWN);
      fix.loop(oReceptionist);
      move.obj(oReceptionist, 60, 107, 1, fRDone);
      goto(doneRSeq);
    }
    [ if next destination is the desk area, move there
    if (receptionistLoc == DESK) {
      receptionistSeq = R_MOVEDESK;
      move.obj(oReceptionist, 41, 113, 1, fRDone);
      goto(doneRSeq);
    }
    [ if next destination is the hall, move to first hall point
    if (receptionistLoc == HALL) {
      if (receptionistSeq == STANDUP) {
        [ force facing away loop if heading to hall from phone
        set.loop(oReceptionist, LP_MOVEUP);
        fix.loop(oReceptionist);
      }
      receptionistSeq = MOVEHALL1;
      move.obj(oReceptionist, 60, 99, 1, fRDone);
      [ if at phone (standing up)
      goto(doneRSeq);
    }
  }
  [ if at first point of hall move (right in front of the doorway)
  if (receptionistSeq == MOVEHALL1) {
    [ move to second point
    release.loop(oReceptionist);
    receptionistSeq = MOVEHALL2;
    move.obj(oReceptionist, 60, 93, 1, fRDone);
    goto(doneRSeq);
  }
  [ if at second point of hall move (just past the doorway, into the hall) 
  if (receptionistSeq == MOVEHALL2) {
    [ move to the third point
    receptionistSeq = MOVEHALL3;
    move.obj(oReceptionist, 16, 93, 1, fRDone);
    goto(doneRSeq);
  }
  [ if at third point of hall move, (out of view, to the left)
  if (receptionistSeq == MOVEHALL3) {
    [ done moving; set timer and hide receptionist until
    [ timer is up, 8 - 12 seconds
    receptionistSeq = WAITHALL;
    random(8, 12, receptionistTimer);
    receptionistTimer += elapsedSeconds;
    if (receptionistTimer > 59) {
      receptionistTimer -= 60;
    }
    erase(oReceptionist);
    goto(doneRSeq);
  }
  [ if at the computer station
  if (receptionistSeq == MOVECOMP) {
    [ done moving, set timer and show 'use computer' loop
    receptionistSeq = IDLE;
    [ type for 7 - 12 seconds
    random(7, 12, receptionistTimer);
    receptionistTimer += elapsedSeconds;
    if (receptionistTimer > 59) {
      receptionistTimer -= 60;
    }
    [ switch to the action view
    set.view(oReceptionist, vw.ReceptionistAct);
    set.loop(oReceptionist, LP_TYPING);
    goto(doneRSeq);
  }
  [ if at the desk
  if (receptionistSeq == R_MOVEDESK) {
    receptionistSeq = WAITDESK;
    set.view(oReceptionist, vw.ReceptionistAct);
    set.loop(oReceptionist, LP_FLIPPING);
    work1 = 2;
    cycle.time(oReceptionist, work1);
    [ done moving, flip pages
    if (fPagesTurned) {
      [ flip them back
      reverse.loop(oPapers, fRDone);
      set.cel(oReceptionist, 3);
      reverse.cycle(oReceptionist);
    } else {
      [ flip forward
      end.of.loop(oPapers, fRDone);
      set.cel(oReceptionist, 0);
    }
    goto(doneRSeq);  
  }
  if (receptionistSeq == WAITDESK) {
    [ flip three times
    current.loop(oPapers, work1);
    if (fPagesTurned) {
      if (work1 == 3) {
        [ done turning pages
        set.view(oReceptionist, vw.ReceptionistWalk);
        work1 = 1;
        cycle.time(oReceptionist, work1);
        receptionistSeq = NEWLOCATION;
        reset(fPagesTurned);
        normal.cycle(oReceptionist);
      } else {
        --work1;
        set.loop.v(oPapers, work1);
        set.cel(oPapers, 7);
        reverse.loop(oPapers, fRDone);
      }
    } else {
      if (work1 == 5) {
        [ done turning pages
        set.view(oReceptionist, vw.ReceptionistWalk);
        work1 = 1;
        cycle.time(oReceptionist, work1);
        receptionistSeq = NEWLOCATION;
        set(fPagesTurned);
      } else {
        ++work1;
        set.loop.v(oPapers, work1);
        set.cel(oPapers, 0);
        end.of.loop(oPapers, fRDone);
      }
    }
  }
  [ if done hanging up phone
  if (receptionistSeq == HANGUP) {
    [ begin standing up (adjust loop and position)
    receptionistSeq = STANDUP;
    work1 = -2;
    work2 = 0;
    reposition(oReceptionist, work1, work2);
    set.loop(oReceptionist, LP_R_SIT);
    set.cel(oReceptionist, 0);
    end.of.loop(oReceptionist, fRDone);
    goto(doneRSeq);
  }
  [ if done moving to phone
  if (receptionistSeq == MOVEPHONE) {
    [ switch view to the action view and reposition
    release.loop(oReceptionist);
    set.view(oReceptionist, vw.ReceptionistAct);
    work1 = 0;
    work2 = -11;
    reposition(oReceptionist, work1, work2);
    [ if patient 2/3/4 ready to see nurse, announce it
    if (patient2Seq == EXAMREADY) {
      block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"Ms. Cole, the nurse will see you now.\"", 6, 6, 35);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      [ patient called to exam room
      patient2Loc = LOC_EXAM;
      patient2Seq = STANDUP;
      set.loop(oPatient2, LP_P_SIT);
      set.cel(oPatient2, 0);
      end.of.loop(oPatient2, fP2Done);
    }
    if (patient3Seq == EXAMREADY) {
      block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"Mr. Lowe, the nurse will see you now.\"", 6, 6, 35);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      [ patient called to exam room
      patient3Loc = LOC_EXAM;
      patient3Seq = STANDUP;
      set.loop(oPatient3, LP_P_SIT);
      set.cel(oPatient3, 0);
      end.of.loop(oPatient3, fP3Done);
    }
    if (patient4Seq == EXAMREADY) {
      block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"Mr. Walls, the nurse will see you now.\"", 6, 6, 35);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      [ patient called to exam room
      patient4Loc = LOC_EXAM;
      patient4Seq = STANDUP;
      set.loop(oPatient4, LP_P_SIT);
      set.cel(oPatient4, 0);
      work1 = -2;
      work2 = 0;
      reposition(oPatient4, work1, work2);
      end.of.loop(oPatient4, fP4Done);
    }
    [ if patient1 or ego want to talk
    if ((patient1Seq == WAITCOUNTER || fEgoWaitTalk)) {
      [ switch to 'stand and speak' mode
      receptionistSeq = STANDSPEAK1;
      set.loop(oReceptionist, LP_R_SPEAK);
      set.cel(oReceptionist, 0);
      start.cycling(oReceptionist);
      [ speak for 5 cycles
      receptionistCtr = 5;
    } else {
      [ if not talking to ego or patient, sit down
      receptionistSeq = SITDOWN;
      set.loop(oReceptionist, LP_R_SIT);
      set.cel(oReceptionist, 5);
      reverse.loop(oReceptionist, fRDone);
    }
    goto(doneRSeq);
  }
  [ if done sitting down,
  if (receptionistSeq == SITDOWN) {
    [ pick up the phone
    receptionistSeq = GETPHONE;
    set.loop(oReceptionist, LP_R_GETPHONE);
    work1 = 2;
    work2 = 0;
    reposition(oReceptionist, work1, work2);
    end.of.loop(oReceptionist, fRDone);
    goto(doneRSeq);
  }
  [ after picking up the phone
  if (receptionistSeq == GETPHONE) {
    [ start talking for a random amount of time 
    set.loop(oReceptionist, LP_R_TALKPHONE);
    normal.cycle(oReceptionist);
    receptionistSeq = IDLE;
    [ talk for 5 - 10 seconds
    random(5, 10, receptionistTimer);
    receptionistTimer += elapsedSeconds;
    if (receptionistTimer > 59) {
      receptionistTimer -= 60;
    }
  }
}
:doneRSeq

[ if receptionist needs a new task location
if (receptionistSeq == NEWLOCATION) {
  [ if patient1 or ego wish to talk, it takes precedence
  if ((patient1Seq == WAITCOUNTER || fEgoWaitTalk)) {
    work1 = PHONE;
  } else {
    [ choose a new location randomly (that doesn't match
    [ current location), with priority as follows:
    [ PHONE        40%
    [ COMPUTER     30%
    [ DESK         20%
    [ HALL         10%
    :newLoc
    random(1, 10, work1);
    if (work1 > 4) {
      if (work1 > 7) {
        if (work1 < 10) {
          work1 = 3; [ 8,9
        } else {
          work1 = 4; [ 10
        }
      } else {
        work1 = 2; [5,6,7
      }
    } else {
      work1 = 1; [ 1,2,3,4
    }
    if (work1 == receptionistLoc) {
      goto(newLoc);
    }
  }
  [ if currently in the hall
  if (receptionistLoc == HALL) {
    [ return before moving to next task
    receptionistSeq = RTNHALL1;
    draw(oReceptionist);
    move.obj(oReceptionist, 58, 93, 1, fRDone);
  } else {
    [ if currently on the phone
    if (receptionistLoc == PHONE) {
      [ hang up before moving to next task
      receptionistSeq = HANGUP;
      set.loop(oReceptionist, LP_R_GETPHONE);
      set.cel(oReceptionist, 6);
      reverse.loop(oReceptionist, fRDone);
    } else {
      [ at desk or computer: move to next
      [ location
      if (work1 == HALL) {
        receptionistSeq = MOVEHALL1;
        move.obj(oReceptionist, 60, 99, 1, fRDone);
      } else {
        [ 
        if (work1 == COMPUTER) {
          receptionistSeq = MOVECOMP;
          move.obj(oReceptionist, 24, 99, 1, fRDone);
        } else {
          if (work1 == DESK) {
            receptionistSeq = R_MOVEDESK;
            move.obj(oReceptionist, 41, 113, 1, fRDone);
          } else {
            receptionistSeq = MOVEPHONE;
            move.obj(oReceptionist, 58, 107, 1, fRDone);
          }
        }
      }
    }
  }
  [ unless current location is on the phone, switch to 
  [ the walking view
  if (receptionistLoc != PHONE) {
    set.view(oReceptionist, vw.ReceptionistWalk);
  }
  [ then update for the new location
  receptionistLoc = work1;
}

[**************************************************************
[ PATIENT 1
[**************************************************************
[ if a counter is active
if (patient1Ctr > 0) {
  [ countdown
  -- patient1Ctr;
  if (patient1Ctr == 0) {
    [ ready to speak first line
    if (patient1Seq == TALKCOUNTER1) {
      [ set flag so there will not be another request
      set(fAskToPee);
      set.cel(oPatient1, 0);
      stop.cycling(oPatient1);
      block(MSGBOX.COLOR, LT_RED, RED, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"May I use the restroom please?\"", 8, 38, 30);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      [ set timer for receptionist to speak
      receptionistCtr = 10;
      start.cycling(oReceptionist);
    }
    [ ready to speak second line
    if (patient1Seq == TALKCOUNTER2) {
      block(MSGBOX.COLOR, LT_RED, RED, WHITE); [ msgbox.color(BORDER, FG, BG)
      print.at("\"Thank you!\"", 8, 38, 30);
      block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      patient1Seq = MOVEHALL1;
      set.loop(oPatient1, LP_MOVERIGHT);
      move.obj(oPatient1, 86, 107, 1, fP1Done);
      [ receptionist goes back to the phone
      receptionistSeq = STOPCONV;
      receptionistCtr = 1;
      reset(fPatient1Talking);
    }
  }
}

[ if a timer is active
if (patient1Timer != 255) {
  if (patient1Timer == elapsedSeconds) {
    [ timer is done, take action
    patient1Timer = 255;
    [ if patient is not doing anything
    if (patient1Seq == IDLE) {
      [ find a new task (but asking for bathroom break will
      [ take precedence)
      work1 = 0;
      [ if a bathroom break has not happened yet
      if (!fAskToPee) { 
        [ force request if this is first visit to the lobby AND
        [ one minute has passed by
        if (fOneMinute && firstLobbyVisit) {
          work1 = 4;
        }
        [ if not first time in the room, only ask if the 3 minute
        [ point of patient timer is reached
        if (patientClock == 3) {
          work1 = 4;
        }
      }
      [ if forcing a request
      if (work1 == 4) {
        [ reset the one minute flag so it doesn't trigger again
        reset(fOneMinute);
[        [ set flag so there will not be another request
[        set(fAskToPee);
        [ patient1 stands up
        set.loop(oPatient1, LP_P_SIT);
        set.cel(oPatient1, 0);
        end.of.loop(oPatient1, fP1Done);
        patient1Seq = STANDUP;
      } else {
        [ choose a new random sequence to read book or use phone
        random(1, 3, work1);
        [ use phone or read book
        if (work1 == 1) {
          patient1Seq = GETPHONE;
          set.loop(oPatient1, LP_P_GETPHONE);
        } else {
          patient1Seq = GETBOOK;
          set.loop(oPatient1, LP_GETBOOK);
        }
        set.cel(oPatient1, 0);
        end.of.loop(oPatient1, fP1Done);
        work1 = 2;
        cycle.time(oPatient1, work1);
      }
      goto(p1SeqDone);
    }
    if (patient1Seq == USEPHONE) {
      patient1Seq = STOWPHONE;
      set.loop(oPatient1, LP_P_GETPHONE);
      set.cel(oPatient1, 3);
      reverse.loop(oPatient1, fP1Done);
      goto(p1SeqDone);
    }
    if (patient1Seq == READBOOK) {
      --bookcycles;
      if (bookcycles == 0) {
        patient1Seq = STOWBOOK;
        set.loop(oPatient1, LP_GETBOOK);
        set.cel(oPatient1, 5);
        reverse.loop(oPatient1, fP1Done);
        work1 = 1;
        cycle.time(oPatient1, work1);
      } else {
        [ turn the page
        end.of.loop(oPatient1, fP1Done);
      }
      goto(p1SeqDone);
    }
    [ if patient is at end of hall, ready to come back
    if (patient1Seq == MOVEHALL3) {
      [ begin return, and draw patient with correct loop
      patient1Seq = RTNHALL1;
      draw(oPatient1);
      set.loop(oPatient1, LP_MOVERIGHT);
      move.obj(oPatient1, 86, 92, 1, fP1Done);
    }
  }
}

[ check for a completed action
if (fP1Done) {
  reset(fP1Done);
  [ next sequence
  if (patient1Seq == GETPHONE) {
    patient1Seq = USEPHONE;
    set.loop(oPatient1, LP_USEPHONE);
    normal.cycle(oPatient1);
    [ spend 5-12 seconds on phone
    random(5, 12, patient1Timer);
    patient1Timer += elapsedSeconds;
    if (patient1Timer > 59) {
      patient1Timer -= 60;
    }
    goto(p1SeqDone);
  }
  if (patient1Seq == STOWPHONE) {
    patient1Seq = IDLE;
    set.loop(oPatient1, LP_P_GETPHONE);
    set.cel(oPatient1, 0);
    work1 = 1;
    cycle.time(oPatient1, work1);
    stop.cycling(oPatient1);
    [ idle time is random, from 4 - 8 seconds
    random(4, 8, patient1Timer);
    patient1Timer += elapsedSeconds;
    if (patient1Timer > 59) {
      patient1Timer -= 60;
    }
    goto(p1SeqDone);
  }
  if (patient1Seq == GETBOOK) {
    patient1Seq = READBOOK;
    set.loop(oPatient1, LP_READBOOK);
    set.cel(oPatient1, 0);
    stop.cycling(oPatient1);
    work1 = 2;
    cycle.time(oPatient1, work1);
    [ spend 3-5 seconds on each page
    random(3, 5, patient1Timer);
    patient1Timer += elapsedSeconds;
    if (patient1Timer > 59) {
      patient1Timer -= 60;
    }
    random(5, 15, bookcycles);
    goto(p1SeqDone);
  }
  if (patient1Seq == READBOOK) {
    set.cel(oPatient1, 0);
    stop.cycling(oPatient1);
    [ spend 3-5 seconds on each page
    random(3, 5, patient1Timer);
    patient1Timer += elapsedSeconds;
    if (patient1Timer > 59) {
      patient1Timer -= 60;
    }
    goto(p1SeqDone);
  }
  if ((patient1Seq == STOWBOOK || patient1Seq == RTNHALL4)) {
    patient1Seq = IDLE;
    set.loop(oPatient1, LP_P_SIT);
    set.cel(oPatient1, 0);
    work1 = 1;
    cycle.time(oPatient1, work1);
    stop.cycling(oPatient1);
    [ idle time is 4 - 8 seconds
    random(4, 8, patient1Timer);
    patient1Timer += elapsedSeconds;
    if (patient1Timer > 59) {
      patient1Timer -= 60;
    }
    goto(p1SeqDone);
  }
  if (patient1Seq == STANDUP) {
    patient1Seq = MOVECOUNTER;
    set.loop(oPatient1, LP_MOVELEFT);
    normal.cycle(oPatient1);
    move.obj(oPatient1, 76, 117, 1, fP1Done);
    goto(p1SeqDone);
  }
  [ when at counter, waiting for receptionist
  if (patient1Seq == MOVECOUNTER) {
    [ stop cycling, and wait
    patient1Seq = WAITCOUNTER;
    stop.cycling(oPatient1);
    goto(p1SeqDone);
  }
  if (patient1Seq == MOVEHALL1) {
    patient1Seq = MOVEHALL2;
    set.loop(oPatient1, LP_MOVEUP);
    move.obj(oPatient1, 86, 92, 1, fP1Done);
    goto(p1SeqDone);
  }
  if (patient1Seq == MOVEHALL2) {
    patient1Seq = MOVEHALL3;
    set.loop(oPatient1, LP_MOVELEFT);
    move.obj(oPatient1, 12, 92, 1, fP1Done);
    goto(p1SeqDone);
  }
  if (patient1Seq == MOVEHALL3) {
    [ wait in bathroom for ~20 seconds
    patient1Timer = 20;
    patient1Timer += elapsedSeconds;
    if (patient1Timer > 59) {
      patient1Timer -= 60;
    }
    erase(oPatient1);
    goto(p1SeqDone);
  }
  if (patient1Seq == RTNHALL1) {
    patient1Seq = RTNHALL2;
    set.loop(oPatient1, LP_MOVEDOWN);
    move.obj(oPatient1, 86, 97, 1, fP1Done);
    goto(p1SeqDone);
  }
  if (patient1Seq == RTNHALL2) {
    patient1Seq = RTNHALL3;
    set.loop(oPatient1, LP_MOVERIGHT);
    move.obj(oPatient1, 106, 97, 1, fP1Done);
    goto(p1SeqDone);
  }
  if (patient1Seq == RTNHALL3) {
    patient1Seq = RTNHALL4;
    set.loop(oPatient1, LP_P_SIT);
    set.cel(oPatient1, 3);
    reverse.loop(oPatient1, fP1Done);
  }
}
:p1SeqDone

[**************************************************************
[ PATIENT 2
[**************************************************************

[ if a counter is active
if (patient2Ctr > 0) {
  --patient2Ctr;
  if (patient2Ctr == 0) {
    [ patient 2 arrives
    if (patient2Seq == ARRIVE) {
      patient2Seq = MOVESEAT1;
      set.loop(oPatient2, LP_MOVEUP);
      normal.cycle(oPatient2);
      position(oPatient2, 116, 167);
      draw(oPatient2);
      move.obj(oPatient2, 116, 142, 1, fP2Done);
      goto(p2SeqDone);
    }
  }
}

[ if timer is active
if (patient2Timer != 255) {
  if (patient2Timer == elapsedSeconds) {
    [ timer is done, take action
    patient2Timer = 255;
    
    [ check for idle time
    if ((patient2Seq == IDLE || patient2Seq == TAPTOE)) {
      [ choose a random action (toe tap, or phone)
      random(1, 2, work1);
      if (work1 == 1) {
        [ tap toe for 6 - 12 seconds
        patient2Seq = TAPTOE;
        random(6, 12, patient2Timer);
        patient2Timer += elapsedSeconds;
        if (patient2Timer > 59) {
          patient2Timer -= 60;
        }
        set.loop(oPatient2, LP_TAPTOE);
        normal.cycle(oPatient2);
      } else {
        [ get phone
        patient2Seq = GETPHONE;
        set.loop(oPatient2, LP_P_GETPHONE);
        set.cel(oPatient2, 0);
        end.of.loop(oPatient2, fP2Done);
      }
      goto(p2SeqDone);
    }
    
    if (patient2Seq == USEPHONE) {
      patient2Seq = STOWPHONE;
      set.loop(oPatient2, LP_P_GETPHONE);
      set.cel(oPatient2, 8);
      reverse.loop(oPatient2, fP2Done);
      goto(p2SeqDone);
    }
  }
} else {
  [ check for main timer events
  if (patientClock > 0 && patientClock < 6 && patient2Loc == LOC_GONE) {
    [ patient arrives
    [ load view, but don't script it
    set(noScript);
    load.view(vw.Patient2);
    set.view(oPatient2, vw.Patient2);
    reset(noScript);
    patient2Loc = LOC_LOBBY;
    set(fPatientAtDoor);
    [ set timer to allow door to open
    patient2Ctr = 12;
    patient2Seq = ARRIVE;
    goto(p2SeqDone);
  }
  if (patientClock > 5 && patientClock < 9 && patient2Loc == LOC_LOBBY) {
    [ nurse is ready for patient
    patient2Loc = LOC_EXAM;
    patient2Seq = EXAMREADY;
    goto(p2SeqDone);
  }
  if (patientClock > 8 && patient2Loc == LOC_EXAM) {
    [ patient returns from exam room
    patient2Loc = LOC_GONE;
    patient2Seq = RTNHALL1;
    set.loop(oPatient2, LP_MOVERIGHT);
    normal.cycle(oPatient2);
    draw(oPatient2);
    move.obj(oPatient2, 86, 91, 1, fP2Done);
    goto(p2SeqDone);
  }
}

[ check for sequence completion flag
if (fP2Done) {
  reset(fP2Done);
  if (patient2Seq == GETPHONE) {
    [ use phone for 8-16 seconds
    patient2Seq = USEPHONE;
    random(8, 16, patient2Timer);
    patient2Timer += elapsedSeconds;
    if (patient2Timer > 59) {
      patient2Timer -= 60;
    }
    set.loop(oPatient2, LP_USEPHONE);
    set.cel(oPatient2, 0);
    normal.cycle(oPatient2);
    goto(p2SeqDone);
  }
  if (patient2Seq == STOWPHONE) {
    [ do nothing for 4-8 seconds
    patient2Seq = IDLE;
    random(4, 8, patient2Timer);
    patient2Timer += elapsedSeconds;
    if (patient2Timer > 59) {
      patient2Timer -= 60;
    }
    goto(p2SeqDone);
  }
  if (patient2Seq == MOVESEAT1) {
    patient2Seq = MOVESEAT2;
    reset(fPatientAtDoor);
    set.loop(oPatient2, LP_MOVERIGHT);
    move.obj(oPatient2, 139, 133, 1, fP2Done);
    goto(p2SeqDone);
  }
  if (patient2Seq == MOVESEAT2) {
    patient2Seq = SITDOWN;
    set.loop(oPatient2, LP_P_SIT);
    set.cel(oPatient2, 3);
    reverse.loop(oPatient2, fP2Done);
    goto(p2SeqDone);
  }
  if (patient2Seq == SITDOWN) {
    [ sit idle for 5-10 seconds
    patient2Seq = IDLE;
    random(5, 10, patient2Timer);
    patient2Timer += elapsedSeconds;
    if (patient2Timer > 59) {
      patient2Timer -= 60;
    }
    goto(p2SeqDone);
  }
  if (patient2Seq == STANDUP) {
    patient2Seq = MOVEHALL1;
    set.loop(oPatient2, LP_MOVELEFT);
    normal.cycle(oPatient2);
    move.obj(oPatient2, 88, 108, 1, fP2Done);
    goto(p2SeqDone);
  }
  if (patient2Seq == MOVEHALL1) {
    patient2Seq = MOVEHALL2;
    set.loop(oPatient2, LP_MOVEUP);
    normal.cycle(oPatient2);
    move.obj(oPatient2, 86, 91, 1, fP2Done);
    goto(p2SeqDone);
  }
  if (patient2Seq == MOVEHALL2) {
    patient2Seq = MOVEHALL3;
    set.loop(oPatient2, LP_MOVELEFT);
    normal.cycle(oPatient2);
    move.obj(oPatient2, 12, 91, 1, fP2Done);
    goto(p2SeqDone);
  }
  if (patient2Seq == MOVEHALL3) {
    erase(oPatient2);
    goto(p2SeqDone);
  }
  if (patient2Seq == RTNHALL1) {
    patient2Seq = RTNHALL2;
    set.loop(oPatient2, LP_MOVEDOWN);
    move.obj(oPatient2, 86, 114, 1, fP2Done);
    goto(p2SeqDone); 
  }
  if (patient2Seq == RTNHALL2) {
    patient2Seq = RTNHALL3;
    set.loop(oPatient2, LP_MOVERIGHT);
    move.obj(oPatient2, 116, 144, 1, fP2Done);
    goto(p2SeqDone); 
  }
  if (patient2Seq == RTNHALL3) {
    patient2Seq = RTNHALL4;
    set(fPatientAtDoor);
    set.loop(oPatient2, LP_MOVEDOWN);
    move.obj(oPatient2, 116, 167, 1, fP2Done);
    goto(p2SeqDone); 
  }
  if (patient2Seq == RTNHALL4) {
    patient2Seq = IDLE;
    erase(oPatient2);
    reset(fPatientAtDoor);
    [ unload view, but don't script it
    set(noScript);
    erase(oPatient3);
    discard.view(vw.Patient3);
    discard.view(vw.Patient2);
    load.view(vw.Patient3);
    set.view(oPatient3, vw.Patient3);
    draw(oPatient3);
    reset(noScript);
  }
}
:p2SeqDone

[**************************************************************
[ PATIENT 3
[**************************************************************

[ if a counter is active
if (patient3Ctr > 0) {
  --patient3Ctr;
  if (patient3Ctr == 0) {
    [ patient 3 arrives
    if (patient3Seq == ARRIVE) {
      patient3Seq = MOVESEAT1;
      set.loop(oPatient3, LP_MOVEUP);
      normal.cycle(oPatient3);
      position(oPatient3, 116, 167);
      draw(oPatient3);
      move.obj(oPatient3, 116, 126, 1, fP3Done);
      goto(p3SeqDone);
    }
  }
}

[ if a timer is active
if (patient3Timer != 255) {
  if (patient3Timer == elapsedSeconds) {
    [ timer is done, take action
    patient3Timer = 255;
    
    [ check for idle time
    if (patient3Seq == IDLE) {
      [ choose a random action (do nothing, or phone)
      random(1, 4, work1);
      if (work1 == 1) {
        [ do nothing for 6-10 seconds
        patient3Seq = IDLE;
        random(6, 10, patient3Timer);
        patient3Timer += elapsedSeconds;
        if (patient3Timer > 59) {
          patient3Timer -= 60;
        }
        stop.cycling(oPatient3);
      } else {
        [ get phone
        patient3Seq = GETPHONE;
        set.loop(oPatient3, LP_P_GETPHONE);
        set.cel(oPatient3, 0);
        end.of.loop(oPatient3, fP3Done);
      }
      goto(p3SeqDone);
    }
    
    if (patient3Seq == USEPHONE) {
      patient3Seq = STOWPHONE;
      set.loop(oPatient3, LP_P_GETPHONE);
      set.cel(oPatient3, 8);
      reverse.loop(oPatient3, fP3Done);
      goto(p3SeqDone);
    }
  }
} else {
  [ check for main timer events
  if (patientClock > 4 && patientClock < 12 && patient3Loc == LOC_GONE) {
    [ patient arrives
    [ load view, but don't script it
    set(noScript);
    load.view(vw.Patient3);
    set.view(oPatient3, vw.Patient3);
    reset(noScript);
    patient3Loc = LOC_LOBBY;
    set(fPatientAtDoor);
    [ set timer to allow door to open
    patient3Ctr = 12;
    patient3Seq = ARRIVE;
    goto(p3SeqDone);
  }
  if (patientClock > 11 && patientClock < 15 && patient3Loc == LOC_LOBBY) {
    [ nurse is ready for patient
    patient3Loc = LOC_EXAM;
    patient3Seq = EXAMREADY;
    goto(p3SeqDone);
  }
  if (patientClock > 14 && patient3Loc == LOC_EXAM) {
    [ patient returns from exam room
    patient3Loc = LOC_GONE;
    patient3Seq = RTNHALL1;
    set.loop(oPatient3, LP_MOVERIGHT);
    draw(oPatient3);
    move.obj(oPatient3, 86, 91, 1, fP3Done);
    goto(p3SeqDone);
  }
}

[ check for sequence completion flag
if (fP3Done) {
  reset(fP3Done);

  if (patient3Seq == GETPHONE) {
    [ use phone for 8 - 12 seconds
    patient3Seq = USEPHONE;
    random(8, 12, patient3Timer);
    patient3Timer += elapsedSeconds;
    if (patient3Timer > 59) {
      patient3Timer -= 60;
    }
    set.loop(oPatient3, LP_USEPHONE);
    set.cel(oPatient3, 0);
    normal.cycle(oPatient3);
    goto(p3SeqDone);
  }
  if (patient3Seq == STOWPHONE) {
    [ sit idle for 6-10 seconds
    patient3Seq = IDLE;
    random(6, 10, patient3Timer);
    patient3Timer += elapsedSeconds;
    if (patient3Timer > 59) {
      patient3Timer -= 60;
    }
    goto(p3SeqDone);
  }
  if (patient3Seq == MOVESEAT1) {
    patient3Seq = MOVESEAT2;
    reset(fPatientAtDoor);
    set.loop(oPatient3, LP_MOVERIGHT);
    move.obj(oPatient3, 130, 112, 1, fP3Done);
    goto(p3SeqDone);
  }
  if (patient3Seq == MOVESEAT2) {
    patient3Seq = SITDOWN;
    set.loop(oPatient3, LP_P_SIT);
    set.cel(oPatient3, 3);
    reverse.loop(oPatient3, fP3Done);
    goto(p3SeqDone);
  }
  if (patient3Seq == SITDOWN) {
    [ sit idle for 6-10 seconds
    patient3Seq = IDLE;
    random(6, 10, patient3Timer);
    patient3Timer += elapsedSeconds;
    if (patient3Timer > 59) {
      patient3Timer -= 60;
    }
    goto(p3SeqDone);
  }
  if (patient3Seq == STANDUP) {
    patient3Seq = MOVEHALL1;
    set.loop(oPatient3, LP_MOVELEFT);
    normal.cycle(oPatient3);
    move.obj(oPatient3, 88, 108, 1, fP3Done);
    goto(p3SeqDone);
  }
  if (patient3Seq == MOVEHALL1) {
    patient3Seq = MOVEHALL2;
    set.loop(oPatient3, LP_MOVEUP);
    normal.cycle(oPatient3);
    move.obj(oPatient3, 86, 91, 1, fP3Done);
    goto(p3SeqDone);
  }
  if (patient3Seq == MOVEHALL2) {
    patient3Seq = MOVEHALL3;
    set.loop(oPatient3, LP_MOVELEFT);
    normal.cycle(oPatient3);
    move.obj(oPatient3, 12, 91, 1, fP3Done);
    goto(p3SeqDone);
  }
  if (patient3Seq == MOVEHALL3) {
    erase(oPatient3);
    goto(p3SeqDone);
  }
  if (patient3Seq == RTNHALL1) {
    patient3Seq = RTNHALL2;
    set.loop(oPatient3, LP_MOVEDOWN);
    move.obj(oPatient3, 86, 114, 1, fP3Done);
    goto(p3SeqDone); 
  }
  if (patient3Seq == RTNHALL2) {
    patient3Seq = RTNHALL3;
    set.loop(oPatient3, LP_MOVERIGHT);
    move.obj(oPatient3, 116, 144, 1, fP3Done);
    goto(p3SeqDone); 
  }
  if (patient3Seq == RTNHALL3) {
    patient3Seq = RTNHALL4;
    set(fPatientAtDoor);
    set.loop(oPatient3, LP_MOVEDOWN);
    move.obj(oPatient3, 116, 167, 1, fP3Done);
    goto(p3SeqDone); 
  }
  if (patient3Seq == RTNHALL4) {
    patient3Seq = IDLE;
    erase(oPatient3);
    reset(fPatientAtDoor);
    [ unload view, but don't script it
    set(noScript);
    erase(oPatient4);
    discard.view(vw.Patient4);
    discard.view(vw.Patient3);
    load.view(vw.Patient4);
    set.view(oPatient4, vw.Patient4);
    draw(oPatient4);
    reset(noScript);
  }
}
:p3SeqDone

[**************************************************************
[ PATIENT 4
[**************************************************************
[ if a counter is active
if (patient4Ctr > 0) {
  --patient4Ctr;
  if (patient4Ctr == 0) {
    [ patient 4 arrives
    if (patient4Seq == ARRIVE) {
      patient4Seq = MOVESEAT1;
      set.loop(oPatient4, LP_MOVEUP);
      normal.cycle(oPatient4);
      position(oPatient4, 116, 167);
      draw(oPatient4);
      move.obj(oPatient4, 116, 142, 1, fP4Done);
      goto(p4SeqDone);
    }
  }
}

[ if a timer is active
if (patient4Timer != 255) {
  if (patient4Timer == elapsedSeconds) {
    [ timer is done, take action
    patient4Timer = 255;
    
    [ check for idle time
    if (patient4Seq == IDLE) {
      [ choose a random action (do nothing, or phone)
      random(1, 4, work1);
      if (work1 == 1) {
        [ do nothing for 4-8 seconds
        patient4Seq = IDLE;
        random(4, 8, patient4Timer);
        patient4Timer += elapsedSeconds;
        if (patient4Timer > 59) {
          patient4Timer -= 60;
        }
        stop.cycling(oPatient4);
      } else {
        [ get phone
        patient4Seq = GETPHONE;
        set.loop(oPatient4, LP_P_GETPHONE);
        set.cel(oPatient4, 0);
        end.of.loop(oPatient4, fP4Done);
      }
      goto(p4SeqDone);
    }
    
    if (patient4Seq == USEPHONE) {
      patient4Seq = STOWPHONE;
      set.loop(oPatient4, LP_P_GETPHONE);
      set.cel(oPatient4, 8);
      reverse.loop(oPatient4, fP4Done);
      goto(p4SeqDone);
    }
  }
} else {
  [ check for main timer events
  if (patientClock > 10 && patientClock < 16 && patient4Loc == LOC_GONE) {
    [ patient arrives
    [ load view, but don't script it
    set(noScript);
    load.view(vw.Patient4);
    set.view(oPatient4, vw.Patient4);
    reset(noScript);
    patient4Loc = LOC_LOBBY;
    set(fPatientAtDoor);
    [ set timer to allow door to open 
    patient4Ctr = 12;
    patient4Seq = ARRIVE;
    goto(p4SeqDone);
  }
  if (patientClock > 15 && patientClock < 19 && patient4Loc == LOC_LOBBY) {
    [ nurse is ready for patient
    patient4Loc = LOC_EXAM;
    patient4Seq = EXAMREADY;
    goto(p4SeqDone);
  }
  if (patientClock > 18 && patient4Loc == LOC_EXAM) {
    [ patient returns from exam room
    patient4Loc = LOC_GONE;
    patient4Seq = RTNHALL1;
    set.loop(oPatient4, LP_MOVERIGHT);
    draw(oPatient4);
    move.obj(oPatient4, 86, 91, 1, fP4Done);
    goto(p4SeqDone);
  }
}

[ check for sequence completion flag
if (fP4Done) {
  reset(fP4Done);

  if (patient4Seq == GETPHONE) {
    [ use phone for 7-12 seconds
    patient4Seq = USEPHONE;
    random(7, 12, patient4Timer);
    patient4Timer += elapsedSeconds;
    if (patient4Timer > 59) {
      patient4Timer -= 60;
    }
    set.loop(oPatient4, LP_USEPHONE);
    set.cel(oPatient4, 0);
    normal.cycle(oPatient4);
    goto(p4SeqDone);
  }
  if (patient4Seq == STOWPHONE) {
    [ sit idle for 4-8 seconds
    patient4Seq = IDLE;
    random(4, 8, patient4Timer);
    patient4Timer += elapsedSeconds;
    if (patient4Timer > 59) {
      patient4Timer -= 60;
    }
    goto(p4SeqDone);
  }
  if (patient4Seq == MOVESEAT1) {
    patient4Seq = MOVESEAT2;
    reset(fPatientAtDoor);
    set.loop(oPatient4, LP_MOVERIGHT);
    move.obj(oPatient4, 137, 127, 1, fP4Done);
    goto(p4SeqDone);
  }
  if (patient4Seq == MOVESEAT2) {
    patient4Seq = SITDOWN;
    set.loop(oPatient4, LP_P_SIT);
    set.cel(oPatient4, 3);
    reverse.loop(oPatient4, fP4Done);
    goto(p4SeqDone);
  }
  if (patient4Seq == SITDOWN) {
    patient4Seq = IDLE;
    set.loop(oPatient4, LP_P_GETPHONE);
    set.cel(oPatient4, 0);
    work1 = 2;
    work2 = 0;
    reposition(oPatient4, work1, work2);
    [ sit idle for 4-8 seconds
    patient4Seq = IDLE;
    random(4, 8, patient4Timer);
    patient4Timer += elapsedSeconds;
    if (patient4Timer > 59) {
      patient4Timer -= 60;
    }
    goto(p4SeqDone);
  }
  if (patient4Seq == STANDUP) {
    patient4Seq = MOVEHALL1;
    set.loop(oPatient4, LP_MOVELEFT);
    normal.cycle(oPatient4);
    move.obj(oPatient4, 88, 108, 1, fP4Done);
    goto(p4SeqDone);
  }
  if (patient4Seq == MOVEHALL1) {
    patient4Seq = MOVEHALL2;
    set.loop(oPatient4, LP_MOVEUP);
    normal.cycle(oPatient4);
    move.obj(oPatient4, 86, 91, 1, fP4Done);
    goto(p4SeqDone);
  }
  if (patient4Seq == MOVEHALL2) {
    patient4Seq = MOVEHALL3;
    set.loop(oPatient4, LP_MOVELEFT);
    normal.cycle(oPatient4);
    move.obj(oPatient4, 12, 91, 1, fP4Done);
    goto(p4SeqDone);
  }
  if (patient4Seq == MOVEHALL3) {
    erase(oPatient4);
    goto(p4SeqDone);
  }
  if (patient4Seq == RTNHALL1) {
    patient4Seq = RTNHALL2;
    set.loop(oPatient4, LP_MOVEDOWN);
    move.obj(oPatient4, 86, 114, 1, fP4Done);
    goto(p4SeqDone); 
  }
  if (patient4Seq == RTNHALL2) {
    patient4Seq = RTNHALL3;
    set.loop(oPatient4, LP_MOVERIGHT);
    move.obj(oPatient4, 116, 144, 1, fP4Done);
    goto(p4SeqDone); 
  }
  if (patient4Seq == RTNHALL3) {
    patient4Seq = RTNHALL4;
    set(fPatientAtDoor);
    set.loop(oPatient4, LP_MOVEDOWN);
    move.obj(oPatient4, 116, 167, 1, fP4Done);
    goto(p4SeqDone); 
  }
  if (patient4Seq == RTNHALL4) {
    patient4Seq = IDLE;
    erase(oPatient4);
    reset(fPatientAtDoor);
    [ unload view, but don't script it
    set(noScript);
    discard.view(vw.Patient4);
    reset(noScript);
  }
}
:p4SeqDone

[**************************************************************
[ AUTO-OPEN DOOR
[**************************************************************
if ((posn(ego, 105, 157, 127, 167) || fPatientAtDoor)) {
  if (!frontdooropen) {
    [ open it
    set(frontdooropen);
    start.cycling(backpane);
    normal.cycle(backpane);
    move.obj(backpane, 124, 162, 1, fPaneDone);
    start.cycling(frontpane);
    normal.cycle(frontpane);
    move.obj(frontpane, 127, 160, 1, fPaneDone);
  }
} else {
  if (frontdooropen) {
    [ close it
    reset(frontdooropen);
    start.cycling(backpane);
    move.obj(backpane, 112, 162, 1, fPaneDone);
    reverse.cycle(backpane);
    start.cycling(frontpane);
    move.obj(frontpane, 115, 160, 1, fPaneDone);
    reverse.cycle(frontpane);
  }
}

if (fPaneDone) {
  reset(fPaneDone);
  stop.cycling(backpane);
  stop.cycling(frontpane);
  if (frontdooropen) {
    ignore.objs(backpane);
  } else {
    observe.objs(backpane);
  }
}

[ check for a slip
if (egoHitSpecial && !fTripping) {
  set(fTripping);
  load.view(vw.Tripping);
  if (egoY > 150) {
    set.view(ego, vw.Tripping);
    set.loop(ego, 0);
    fix.loop(ego);
    work1 = 150;
    work2 = 1;
    move.obj.v(ego, egoX, work1, work2, fFalling);
  } else {
    set(fFalling);
  }
  [ no more player input/control
  program.control();
  prevent.input();
}
if (fFalling) {
  reset(fFalling);
  erase(ego);
  discard.view(vw.Tripping); 
  load.view(vw.EgoSlip);
  set.view(ego, vw.EgoSlip);
  set.loop(ego, 0);
  set.cel(ego, 0);
  work1 = -10;
  work2 = 5;
  reposition(ego, work1, work2);
  end.of.loop(ego, fSlipped);
  [ allow cycle at rest
  work1 = 0;
  set.upper.left(&ego, &work1);
  stop.motion(ego);
  draw(ego);
}

if (fSlipped) {
  reset(fSlipped);
  print("Didn't you notice that wet spot???");
  set.loop(ego, 1);
  normal.cycle(ego);
  deathType = 6;
}

[ if ego has slipped, skip player input
if (deathType) {
  return();
}

[ **************************************
[ PROCESS PLAYER INPUT
[ **************************************
if (haveInput && !haveMatch && unknownWordNum == 0) {
  [ place said tests here
  
  [ if ego is talking to receptionist or a patient, respond to input differently
  if (fEgoTalkReceptionist) {
    block(MSGBOX.COLOR, LT_MAGENTA, MAGENTA, WHITE); [ msgbox.color(BORDER, FG, BG)
    if (said("use", "bathroom")) {
      print.at("\"Sure! It's through that doorway. Go left and it's the second "
               "door on the right.\"", 6, 6, 35);
      work1 = 3;
      call(lgc.ScoreHandler);
      set(allowedPastLobby);
      goto(resetmsg);
    } 
    [ TODO: more responses for receptionist conversation
    [ ask about sierra
    [ ask name
    [ ask for appointment
    [ ask to see doctor/nurse
    [ ask about patients
    [ ask about tasks- phone/papers/computers
    [ magazine
    [ wet floor, sign
    
    print.at("\"I can't help you with that.\"", 6, 6, 35);
    :resetmsg
    block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
    return();
  }
  if (fEgoTalkPatient) {
    [ TODO: add discussions with the patients
    print("The patients have nothing to say to you.");
    return();
  }
  [ if not talking to anyone
  if (said("look")) {
    print("This is the lobby. There is a desk and some chairs in the waiting area.");
  }
  if (said("talk", "receptionist")) {
    [ same as talk-click
    set(checktalk);
  }
  if (said("use", "bathroom")) {
    print("Who are you talking to?");
  }
}

[ if cursor is look/talk/use and left-click and NOT 
[ clicking on the actual toolbar, check for clicks
[ on in-game items
if (cursoricon > C_WALK && cursoricon < C_WAIT && 
    controller(cLeftClick) &&
    (mouseX < 14 || mouseX > 145 || mouseY > 25)) {
  [ ignore borders
  if ((mouseX > 154 || mouseY < 31 || mouseY > 163)) {
    goto(doneclick);
  }
  if (cursormode == C_LOOK) {
    [ ego
    if (posn(ego, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("You see you.");
      goto(doneclick);
    }
    [ receptionist
    if (posn(oReceptionist, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("The receptionist looks really busy. It takes a lot of effort to "
            "manage this facility and all its patients.");
      goto(doneclick);
    }
    [ patient 1
    if (posn(oPatient1, ON.OBJ, 1, &mouseX, &mouseY)) {
      if (elapsedMinutes < 10) {
        [ if reading a book
        if ((patient1Seq == 3 || patient1Seq == 32 || patient1Seq == 33)) {
          print("Looks like she's checking her phone. Or maybe playing a game.");
          goto(doneclick);
        }
        if (patient1Seq > 33 && patient1Seq == 37) {        
          print("This patient is reading a book. It's nice to know that some "
                "people can survive without constantly checking their cell phone.");
        }
      } else {
        print("This old lady has been here a long time. She doesn't seem to "
              "upset about the long wait though.");
      }
      goto(doneclick);
    }    
    [ patient 2
    if (posn(oPatient2, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("The young lady seems very impatient. She must be in a hurry.");
      goto(doneclick);
    }
    
    [ patient 3
    if (posn(oPatient3, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("The old man reminds you of your grandpa. He's got the same big nose.");
      goto(doneclick);
    }
    
    [ patient 4
    if (posn(oPatient2, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("With those thick glasses, you wonder if this guy is here for an eye exam.");
      goto(doneclick);
    }
    
    [ magazine
    if (posn(oMagazine, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("It's an old computer magazine from the 1990s.");
      goto(doneclick);
    }
    
    [ desk papers
    if (posn(oPapers, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("This stack of papers must be very important to the administration "
            "of this clinic.");
      goto(doneclick);
    }
    
    [ other things to look at
    
    [ computer 22, 73, 32, 86
    if (mouseX > 21 && mouseX < 33 && mouseY > 80 && mouseY < 95) {
      print("The receptionist uses this computer to manage patient "
            "accounts and scheduling.");
      goto(doneclick);
    }
    [ entry door 112, 150, 139, 167
    if (mouseX > 111 && mouseX < 140 && mouseY > 157 && mouseY < 176) {
      print("The glass entrance door opens and closes automatically.");
      goto(doneclick);
    }
    [ floor sign 2, 125, 8, 140
    if (mouseX > 1 && mouseX < 9 && mouseY > 132 && mouseY < 149) {
      print("It says \"CAUTION - Wet Floor\". You should probably stay "
            "away to be safe.");
      goto(doneclick);
    }
    [ table 127, 88, 133, 97
    if (mouseX > 126 && mouseX < 134 && mouseY > 95 && mouseY < 106) {
      print("The corner table is old and worn.");
      work1 = rm.Lobby;
      if (obj.in.room("magazine", work1)) {
        print("There is a magazine on the table.");
      }
      goto(doneclick);
    }
    [ counter [(14, 82, 75, 120) and pri = 0 or 11]
    block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
    work1 /= 16;
    if ((work1 == 0 || work1 == 11)) {
      if (mouseX > 13 && mouseX < 76 && mouseY > 89 && mouseY < 129) {
        print("This counter is where the receptionist spends most of her time.");
        goto(doneclick);
      }
    }
    [ seats (100, 79, 152, 137) and pri = 1 or 5
    block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
    work1 /= 16;
    if ((work1 == 1 || work1 == 5)) {
      if (mouseX > 99 && mouseX < 153 && mouseY > 86 && mouseY < 146) {
        print("The benches are old and worn, but look reasonably comfortable "
              "for sitting if you need to wait for an appointment.");
        goto(doneclick);
      }
    }
    [ walls pri = 9
    block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
    work1 /= 16;
    if (work1 == 9) {
      print("The walls are painted in light blue, with a white accent below "
            "the rail line.");
      goto(doneclick);
    }
    [ hall (25, 52, 95, 94)
    if (mouseX > 24 && mouseX < 96 && mouseY > 59 && mouseY < 103) {
      print("You can see a hallway behind the lobby. That might be an area "
            "worth exploring.");
      goto(doneclick);
    }
    [ floor y>86 and y<149
    if (mouseY > 94 && mouseY < 157) {
      print("The floor looks like it has just been cleaned. You can see a "
            "few damp spots near the left exit.");
      goto(doneclick);
    }
    [ ceiling y < 36
    if (mouseY < 42) {
      print("The ceiling hangs over your head. As it should.");
      goto(doneclick);
    }
  }
  
  if (cursormode == C_TALK) {
    [ receptionist
    if (posn(oReceptionist, ON.OBJ, 1, &mouseX, &mouseY)) {
      set(checktalk);
      goto(doneclick);
    }
    if (posn(oPatient1, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("talk patient1");
    }
    if (posn(oPatient2, ON.OBJ, 1, &mouseX, &mouseY)) {
      [ determine which patient
      current.view(oPatient2, work1);
      if (work1 == vw.Patient2) {
        print("talk patient2");
      } else {
        print("talk patient4");
      }
    }
    if (posn(oPatient3, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("talk patient3");
    }
    goto(doneclick);
  }
  
  if (cursormode == C_USE) {
    if (posn(ego, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("Please don't touch yourself in public.");
      goto(doneclick);
    }
    [ receptionist
    if (posn(oReceptionist, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("You can't reach her from here.");
      goto(doneclick);
    }
    if (posn(oPatient1, ON.OBJ, 1, &mouseX, &mouseY)) {
      distance(ego, oPatient1, work1);
      if (work1 < 24) {
        block(MSGBOX.COLOR, LT_RED, RED, WHITE); [ msgbox.color(BORDER, FG, BG)
        print("\"Get your hands off me, you pervert!\"");
        block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      } else {
        print("You are not close enough.");
      }
      goto(doneclick);
    }
    if (posn(oPatient2, ON.OBJ, 1, &mouseX, &mouseY)) {
      distance(ego, oPatient2, work1);
      if (work1 < 24) {
        block(MSGBOX.COLOR, LT_CYAN, CYAN, WHITE); [ msgbox.color(BORDER, FG, BG)
        print("\"Don't touch me!\"");
        block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      } else {
        print("You are not close enough.");
      }
      goto(doneclick);
    }
    if (posn(oPatient3, ON.OBJ, 1, &mouseX, &mouseY)) {
      distance(ego, oPatient3, work1);
      if (work1 < 24) {
        block(MSGBOX.COLOR, LT_BLUE, BLUE, WHITE); [ msgbox.color(BORDER, FG, BG)
        print("\"Ooh, do that again. I like that!\"");
        block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      } else {
        print("You are not close enough.");
      }
    }
    if (posn(oPatient4, ON.OBJ, 1, &mouseX, &mouseY)) {
      distance(ego, oPatient4, work1);
      if (work1 < 24) {
        block(MSGBOX.COLOR, LT_BLUE, BLUE, WHITE); [ msgbox.color(BORDER, FG, BG)
        print("\"Ooh, do that again. I like that!\"");
        block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
      } else {
        print("You are not close enough.");
      }
    }
    [ magazine
    if (posn(oMagazine, ON.OBJ, 1, &mouseX, &mouseY)) {
      distance(ego, oMagazine, work1);
      if (work1 < 20) {
        print("You decide to pick up the old magazine.");
        get("magazine");
        erase(oMagazine);
        work1 = 3;
        call(lgc.ScoreHandler);
      } else {
        print("You are not close enough.");
      }
    }
    [ desk papers
    if (posn(oPapers, ON.OBJ, 1, &mouseX, &mouseY)) {
      distance(ego, oMagazine, work1);
      if (work1 < 20) {
        print("These papers probably contain sensitive information "
              "about the clinic and its patients. You shouldn't "
              "take them.");
      } else {
        print("You are not close enough.");
      }
      goto(doneclick);
    }
    [ floor sign 2, 125, 8, 140
    if (mouseX > 1 && mouseX < 9 && mouseY > 132 && mouseY < 149) {
      print("You are not close enough.");
    }
    goto(doneclick);
  }
  
  :doneclick
  set.key(-1, -1, cLeftClick); [ clear.controller(cLeftClick);
}

[*****
:exit              [  test for leaving the room
[*****

[ add exit checks here (or use layout editor)

if (edgeEgoHit == TOP_EDGE) {
  [ only if allowed past (or if receptionist is in hallway)
  if ((allowedPastLobby || receptionistSeq == RTNHALL1 || 
       receptionistSeq == MOVEHALL2 || receptionistSeq == MOVEHALL3 ||
       receptionistSeq == WAITHALL)) {
    [ if patient 1 visited restroom, reset first visit flag
    if (fAskToPee) {
      reset(firstLobbyVisit);
    }
    [ show wait cursor
    cursoricon = C_WAIT;
    set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
    [ fade out, then change room
    block(FADE.OUT, 0, FADECOUNT, BLACK); [ fade.out(BYVAR, DELAY, COLOR)
    new.room(rm.Hallway);  [ ##LE001##
  } else {
    work1 = LT_MAGENTA;
    work2 = MAGENTA;
    work3 = WHITE;
    block(MSGBOX.COLOR.V, &work1, &work2, &work3); [ msgbox.color.v(vBORDER, vFG, vBG)
    print.at("\"Excuse me sir, only patients are allowed past the lobby.\"", 6, 6, 35);
    block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG); [ msgbox.color.v(vBORDER, vFG, vBG)
    set.loop(ego, 2);
    work1 = 0;
    work2 = 1;
    reposition(ego, work1, work2);
    egoDir = STOPPED;
    [ cancel clicktomove action
    set.dir(ego, egoDir);
  }
}

if (edgeEgoHit == BOTTOM_EDGE) {
  [ if patient 1 visited restroom, reset first visit flag
  if (fAskToPee) {
    reset(firstLobbyVisit);
  }
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  [ fade out, then change room
  block(FADE.OUT, 0, FADECOUNT, BLACK); [ fade.out(BYVAR, DELAY, COLOR)
  new.room(rm.ParkingLot);  [ ##LE002##
}
return();

[ **************************************
[ DECLARED MESSAGES
[ **************************************
#message 1 "%g20"
#message 2 "%g21"
#message 3 "%g22"
#message 4 "%g23"
#message 5 "%g24"
#message 6 "%g25"
#message 7 "%g26"
#message 8 "%g27"
