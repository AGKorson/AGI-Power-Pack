[*********************************************************************
[
[ lgc.Death
[
[ The death handler! This logic is run when ego dies, or otherwise
[ ends the game. It handles the limited input that is allowed while
[ ego is dead.
[
[ There are eight different ways for ego to die in this game. The
[ deathType variable is used to track ego's death state:
[
[ 0: not dead
[ 1: run over by car
[ 2: trapped in basement
[ 3: stuck in coffin
[ 4: arrested for harassing nurse
[ 5: stunned by batmobile theft deterrent system
[ 6: slipped on wet spot in lobby
[ 7: car stolen
[ 8: kicked the bucket
[ 99: ego driving away (check win/lose/score)
[ 254: death sequence complete
[ 255: winning sequence complete
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
[ none

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ if message announcing death hasn't been displayed yet
if (deathType < DT_SEQ_DONE) { 
  [ re-allow input
  accept.input();
  [ clear the input line
  cancel.line();
  [ no more player control
  program.control();
  
  [ freeze game clock (re-use s5 (volumelabel)
  s5 = "%v13|2:%v12|2:%v11|2 ";
  block(STR.FORMAT, &s5, &s5, 0); [ str.format(sINPUT, sRESULT)
  
  [ change save button to restart
  set(noScript);
  load.view(vw.ButtonsUp);
  add.to.pic(vw.ButtonsUp, 0, 8, 48, 16, 15, 4);
  discard.view(vw.ButtonsUp);
  reset(noScript);
  
  [ start a timer to provide a delay after death announcement
  [ before player is shown final 'thanks for playing' message
  deathTimer = 25;

  [ check deathtype to display initial death message:
  
  [ hit by a car
  if (deathType == DT_RUNOVER) {
    print("Stepping in front of a moving vehicle turned out to be a "
          "bad idea.");
    [ other patients continue on their way
    [ (yes, they are heartless bastards!)
    #define patientCar   o3
    start.update(patientCar);
  }

  [ trapped in the secret room
  if (deathType == DT_TRAPPED) {
    print("In secret rooms, no one can hear you scream. Looks like "
          "you'll be here awhile.");
  }
  
  [ stuck in the coffin
  if (deathType == DT_COFFIN) {
    print("Look on the bright side - at least you'll save money on your "
          "funeral costs.");
  }
  
  [ escorted from the premises 
  if (deathType == DT_ARRESTED) {
    print("Looks like your trip to Oakhurst will include a tour of the "
          "city jail!");
  }
  
  [ stunned by bat-mobile security alarm
  if (deathType == DT_STUNNED) {
    print("Lesson learned - don't mess with the Dark Knight's ride.");
  }
  
  [ slip on wet floor
  if (deathType == DT_BROKE_LEG) {
    print("Looks like you broke your leg! At least you did it in a medical "
          "facility!");
  }
  
  [ car stolen (left unlocked)
  if (deathType == DT_STOLEN_CAR) {
    print("Your car has been stolen! You should have locked your door. "
          "Now you'll need to thumb a ride back home. ");
  }
  
  [ kicked the bucket (literally)
  if (deathType == DT_KICK_BUCKET) {
    print("You have (literally) kicked the bucket. Also, you have "
          "(figuratively) kicked the bucket. RIP.");
  }
  
  [ check for game over
  if (deathType == DT_DRIVE_AWAY) {
    [ set game over
    deathType = DT_GAME_OVER;
  } else {
    [ death sequence is over
    deathType = DT_SEQ_DONE;
  }
}

[ if kicking bucket, make sure it goes away
[ when it gets to edge of screen
if (objHitEdge == &oBucket) {
  erase(oBucket);
}

[ decrement timer
if (deathTimer > 0) {
  deathTimer--;
}
  
[ after a delay, show ending message to player
if (deathTimer == 1) {
  if (deathType == DT_GAME_OVER) {
    
    [ check for module resets
    work1 = 0;
    if (enableCAISOCC) {
      ++work1;
    }
    if (enableRANDOCC) {
      ++work1;
    }
    if (enableICAPOCC) {
      ++work1;
    }
    if (enableESADOCC) {
      ++work1;
    }
    if (enableOFROCC) {
      ++work1;
    }
    if (enableERIDOCC) {
      ++work1;
    }
    [ if player has floppy with source code, it's a win
    if (has(floppydisk) && (floppyfiles == 2 || floppyfiles == 3)) {
      stop.sound();
      load.sound(m.Winner);
      set(4channelsound);
      set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      [ use correct instrument
      work3 = 0;
      work2 = 73; [ flute
      set.key(&work3, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      ++work3;
      work2 = 68; [ oboe
      set.key(&work3, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      ++work3;
      work2 = 67; [ baritone sax
      set.key(&work3, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      sound(m.Winner, soundDone);
      set(playSound);
      print("Your vist to Oakhurst was a big success! You managed "
            "to find a copy of the source files for the AGI Power "
            "Pack.");
      print("You also found several other really cool souvenirs from "
            "the glory days of AGI that you'll treasure forever.");
      if (currentScore == maxScore) {
        print("CONGRATULATIONS! You managed to get a perfect score!");
      } else {
        if (work1 < 6) {
          print("Although you enabled %v46 of the six power pack control "
                "panels, you'll never know how the ones you missed were "
                "used by Sierra in developing the Power Pack.");
        } else {
          print("Perhaps you can visit again and try to score more points.");
        }
      }
      [ create the zip file on the user's drive
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C\xff\xff\xff\x0C\xff\xff\xff\x50\x57\x52\x50\x41\x43\x4B\x2E\x2E\x74";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C\xff\xff\xff\x0C\xff\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C\xff\xff\xff\x0C\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C\xff\xff\xff\x0C";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C\xff\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff\xff\x5C";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff"
            "\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08\xff\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff\xff\x08";
      s15 = "\x50\x4B\x03\x04\x14\xff\xff";
      s15 = "\x50\x4B\x03\x04\x14\xff";
      s15 = "\x50\x4B\x03\x04\x14";
      
      s16 = "\x78\x74\x0B\xC9\x48\x55\x70\x74\xF7\x54\x08\xC8\x2F\x4F\x2D\x52\x08\x48\x4C\xCE"
            "\x56\x28\xCE\x2F\x2D\x4A\x4E\x55\x48\xCB\xCC\x49\x2D\x56\x48\x2C\x4A\x55\x48\x2C";
      
      s17 = "\x4B\xCC\xCC\x49\x4C\xCA\x01\xB2\x4A\x14\x32\x4A\x4A\x0A\x8A\xAD\xF4\xF5\xD3\x33"
            "\x4B\x32\x4A\x93\xF4\x92\xF3\x73\xF5\x1D\xDD\xBD\xF3\x8B\x8A\xF3\xF3\x80\x0C\x4F";
      
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff\xff\x5C\xff\xff\xff\x0C\xff\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff\xff\x5C\xff\xff\xff\x0C\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff\xff\x5C\xff\xff\xff\x0C";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff\xff\x5C\xff\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff\xff\x5C\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff\xff\x5C";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08\xff"
            "\xA5\xB0\x78\x57\xF8\xE1\xFA\x51\x56";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff\xff\x08";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14\xff";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14\xff\x14";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8\xff\x50\x4B\x01\x02\x14";
      s18 = "\x5D\xB0\x41\xBA\x20\x83\xB8";
      
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06\xff\xff\xff\xff\x01\xff\x01\xff\x3A";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06\xff\xff\xff\xff\x01\xff\x01";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06\xff\xff\xff\xff\x01";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06\xff\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff\xff\x50\x57\x52\x50\x41\x43"
            "\x4B\x2E\x2E\x74\x78\x74\x50\x4B\x05\x06";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20\xff";
      s19 = "\xff\xff\xff\xff\x01\xff\x20";
      s19 = "\xff\xff\xff\xff\x01";
      s19 = "\xff\xff\xff";
      s19 = "\xff\xff";
      s19 = "\xff";
      s19 = "";
      
      s20 = "\xff\xff\x80\xff\xff\xff\xff\xff\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20"
            "\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20";
      s20 = "\xff\xff\x80\xff\xff\xff\xff";
      s20 = "\xff\xff\x80\xff\xff\xff";
      s20 = "\xff\xff\x80\xff\xff";
      s20 = "\xff\xff\x80\xff";
      s20 = "\xff\xff\x80";
      s20 = "\xff";
      s20 = "";
      s23 = "PWRPACK.ZIP";
      work1 = &s15;
      work2 = &s20;
      block(NEW.FILE, &s23, &work1, &work2); [ new.file(sFILENAME, vSTART, vEND)
    } else {
      load.sound(m.Loser);
      set(4channelsound);
      set.key(MIDI_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      [ use correct instrument
      work3 = 0;
      work2 = 17; [ percussive organ
      set.key(&work3, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      ++work3;
      work2 = 17; [ percussive organ
      set.key(&work3, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      ++work3;
      work2 = 115; [ woodblock
      set.key(&work3, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      sound(m.Loser, soundDone);
      set(playSound);
      [ losing msg depends on score
      if (currentScore > 100) {
        print("You leave Oakhurst with a handful of souvenirs, but you "
              "can't help but feel like you left the best things behind.");
      } else {
        if (currentScore > 50) {
          print("Even though you found a few souvenirs, there's a lot "
                "left in the old Sierra building that you didn't see.");
        } else {
          print("Your trip to Oakhurst was very disappointing. You didn't "
                "find much in the way of memorabilia. Perhaps you should "
                "return for a longer visit another time.");
        }
      }
    }
  } else {
    print("Thank you for playing this game. Better luck next time!");
  }
}

[ limited toolbar functionality
call(lgc.ToolbarFunctions);

[ looking at help screen is allowed
if ((controller(cHelp) || said("help"))) {
  [ use local variable 240 to initialize the help screen
  set(f240);
  call(lgc.GameHelp);
}

[ restoring game is allowed
if ((controller(cRestore) || said("restore", "game") || said("restore"))) {
  [ save options before restoring
  call(lgc.SaveOptions);
  restore.game();
}

[ restarting game is allowed
if ((controller(cRestart) || said("restart", "game") || said("restart"))) {
  call(lgc.CacheOptions);
  restart.game();
}

[ looking at inventory is allowed
if ((controller(cStatus) || said("inventory"))) {
  status();
}

[ quitting is allowed
if ((controller(cQuit) || said("quit"))) {
  [ update the config file
  call(lgc.SaveOptions);
  quit(0);
}

[ showing about/version message is allowed
if (controller(cAbout)) {
  print(gameAboutMsg);
}
if (controller(cVersion)) {
  print(gameVersionMsg);
  version();
}

[ toggling sound is allowed
if (controller(cToggleSound)) {
  toggle(soundOn);
}

[ run current room logic (animations only)
call.v(currentRoom);

[ if player tries to input something
if (haveInput && !haveMatch) {
  [ it's not allowed
  print("Game is over for you! You can only restore, restart, "
        "exit the game or view your inventory.");
}

[ SOUND EFFECTS CHECK
if (soundDone) {
  reset(soundDone);
  reset(playSound);
}
return();

[***************************************
[ DECLARED MESSAGES
[***************************************
