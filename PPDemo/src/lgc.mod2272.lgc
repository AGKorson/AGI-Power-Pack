[******************************************************************************[[ lgc.mod2272[[ Power Pack v1.0 source code (for AGI version 2.272)[[ These modifications are possible because AGI doesn't validate the string [ number passed to set.string command, which means using values greater than [ max (24 for most versions) will overwrite memory in the game's data section, [ including the jump table for AGI commands. This makes it possible to [ redirect commands to the string array, where custom code can be easily [ injected. Using this to create a memory copy function, we can then gain [ complete access to the entire program memory segment. Meaning it's possible [ to modify existing AGI functionality, and create new functionality.[[ The mods and patches that are included in this power pack will:[ [   - fix a bug in controller assignment function to allow all 49 [     slots to be used[ [   - fix 'set.game.id' so it does not quit the game when id gets set[[   - modify the character printing functions to allow use of[     extended characters in graphics and text modes, regardless of[     color (this patch works in conjunction with the all-color patch[     described below)[[   - modify 'clear.text.rect' and 'clear.lines' commands so that the[     color that is passed is used, instead of just using black or[     white; by passing negative values, the region is scrolled up [     instead of being cleared[[   - modify the color attributes and text printing functions so text[     will print with any combination of foreground and background[     colors on the graphics screen (this applies to all screen text[     printing, including print/display commands, input line, and all[     commands and internal functions that display text on screen [     regardless of screen mode and color choices)[[   - modify 'set.text.attributes' command to allow passing colors  [     by variable[[   - modify 'set.text.attributes' command to allow "pushing" and [     "popping" the current attributes to make it easier to manage[     color changes[[   - add a new function to allow setting message box colors [     (foreground, background and border) to any combination of [     colors[[   - modify 'graphics' and 'text.screen' commands to allow [     displaying eighty columns of text, in addition to the default [     forty column modes normally used by AGI; each mode can have [     column count set independently[[   - add a new 'auto-cycle' feature that will stop/start cycling[     an object when it stops/starts moving, whether due to changing [     its direction value, or if it hits an obstacle[[   - modify the 'get.num' command so it ignores non-numeric key [     presses[[   - modify 'set.string' command to allow setting the input line[     text programmatically[[   - modify 'set.string' command to allow changing the string [     compare function in the 'compare.strings' test command to [     binary (all characters match exactly), text (case is ignored [     but all other characters match exactly) or AGI (the default [     where case is ignored, and white space and several separator [     characters are ignored)[[   - add mouse support - if a mouse driver is loaded, cursor can be [     enabled/disabled for graphics mode (no mouse in text mode);[     the cursor can also be customized, with different cursors[     allowed in both 40 and 80 column mode; menus and save/restore[     screens are automatically supported (click to highlight, [     double-click to select); inventory selection screen is also [     automatically supported (see below)[[   - fix input processing to ignore non-printable characters (for[     example, if a control+key combo is not assigned to a[     controller, AGI normally displays a control code symbol, which [     is always ignored by the parser)[[   - convert inventory screen to use graphics display; this reduces[     the flicker that normally occurs when switching between text [     and graphics mode, and also allows the mouse to be used to[     select objects[[   - modify 'set.cursor.char' command to allow designating a logic[     to run as a custom status line; variables and flags can be [     designated as 'watch' to determine when to do an update[ [   - provide 'click-to-move' support when the mouse is active; [     modify 'step.size' command to enable use of direct-line path[     for movement, instead of agi default algorithm[[   - patch 'wander' command to correctly assign and countdown [     random movement length[ [   - automatically detect presence of Sound Blaster or compatible[     sound board to provide four-channel sound support in addition [     to the default PC speaker single channel mode [[   - modify save/restore/restart to handle all power pack [     functionality (all features will persist in saved games)[[   - patch internal cursor functions to fix bug that draws an[     unwanted blank space in certain situations (mostly when using[     background colors other than black) and also a bug that [     incorrectly resets cursor after a 'get.string' command[ [   - modify 'cycle.time' command to allow changing internal clock[     to trigger 60 times a second, instead of 20; this allows for [     more precise control over movement and cycle timing[[   - add a countdown timer feature to help create accurate time [     triggered events and actions[ [   - modify 'get.string' command to get the current input line text[     or the previously entered input line text into a string[ [   - enhance trace function to allow input and view/modify variables, [     flags and screen object information; display 'if', 'goto' and [     'return' commands, and also 'not', 'or', 'and' status (with the [     'T'/'F' result correctly reflecting 'not' status); fix formatting [     of trace window to right align logic number and to wrap commands[     and argument lists that exceed right margin; include argument[     type designators for clarity (v##, f##, c##, etc); include [     default word text in 'said' commands for clarity; fix bug in [     trace function that corrupts the current command pointer if a [     'trace.on' command is encountered while tracing is active[ [   - modify 'trace.info' function to allow full control of window [     placement (left/width in addition to built-in top/height)[ [   - modify 'get.string' command to copy the current input line or the[     previous input line to a string[[   - add string manipulation functions, including strLen, strCopy, [     strConcat, strLeft, strRight, strMid, strTrim, strInstr and [     strFormat, str2byte, hex2byte, byte2hex, strUpper, strLower[[   - add new palette functions that allow changing the current [     palette, and also fading the screen in/out[[   - add new setmessage function that allows direct manipulation of [     message text, as well as support for dynamic menus[[   - add new setitem function to allow changing text of OBJECT file[     inventory items[[   - add new itemcount function to get number of items at any location,[     including player inventory, in real time[[   - add new function that allows sending picture draw commands to  [     to the screen after the picture is displayed[[   - add new function to get the priority and visual colors for any[     coordinate location on the screen[[ Detailed explanations of each power pack feature are included in its [ respective code block below, including syntax, limitations and [ considerations. Examples of all features are provided in the AGI Power Pack [ Demo game.[[******************************************************************************[******************************************************************************[ [ confirm version number before continuing[[ s41="uit." means 2.272s1 = "uit.";if (compare.strings(s1, s41))  {  IntVersion = VERSION_2272;  }else  {  return();  }[******************************************************************************[******************************************************************************[[ SET.STRING PATCH AND MEMCOPY FUNCTION[ [ This patch is the first step in gaining access to power pack features. It [ modifies the set.string command so it can copy more than 40 characters and [ fixes the bug that adds an extra null character to the end of the string.[ [ put patch function in s1#message  1 "\xB8\x90\x90\x2E\xA3\x2F\x0C\x2E\xA3\x31\x0C\xB8\xDF\x38\x2E\xA3"            "\x44\x0C\xB0\x04\x2E\xA2\x48\x0C\x8B\xC6\xC3"s1 = m1;[ use unblock to run the patch#message  2 "\x01\x01\x61\x89"s23 = m2;unblock();[ The next step is to create a memory copy function, by putting code in s1 that[ modifies the 'said' command so it will run the custom function. (The said[ command is used because it accepts 16 bit unsigned integers, which makes it[ much easier to access memory addresses.)#message  3 "\xB8\x61\x89\xA3\xF3\x06\x8B\xC6\xC3"s1 = m3;unblock();[ Finally, put the custom memcopy function in s1, so calls to said command will[ run it. The syntax used is:[     if (said(numbytes, msgnum, tgtaddr[, 0]) {}[        - numbytes is the number of bytes will be copied[        - msgnum is the message number in this logic that the data[          will be copied from [        - tgtaddr is the target memory address where the data will be[          copied to[        if a fourth argument is used (value doesn't matter), then the target[        segment will be the data segment, otherwise it'll be the code segment#message  4 "\xAC\x8A\xD0\xAD\x50\xAD\x50\xE8\x9E\x96\x83\xC4\x02\x50\x1E\xAD"            "\x50\x80\xFA\x04\x75\x03\x1E\xEB\x01\x0E\xE8\x0F\xCA\x83\xC4\x0A"            "\x8B\xC6\xC3"s1 = m4;[ Now, move the entire data segment to make room for more code. This frees[ up approximately 24KB of space, which should be plenty of room for all the[ patches. This also checks for EGA monitor, setting v26 to correct value if [ EGA monitor is found (skipping the patch if NOT EGA)      [ MoveDataPatch#message  5 "\x56\x57\x55\x8B\xEC\x80\x3E\x2D\x01\x03\x75\x5C\x32\xFF\xB3\x1A"            "\xB0\x03\x88\x47\x09\x33\xDB\xB7\x10\xB4\x48\xCD\x21\x73\x17\x33"            "\xC0\xB0\x06\x50\xE8\xE1\x1F\x83\xC4\x02\x50\xE8\x58\x1B\x83\xC4"            "\x02\xE8\xE2\x01\xEB\x32\x1E\x59\x8E\xC0\x2E\xA3\x1B\x57\x2E\xA3"            "\x6F\x58\x2E\xA3\x57\x79\x2E\xA3\x8A\x79\x2E\xA3\xBC\x79\x2E\xA3"            "\xF2\x79\xA1\x01\x08\x50\x33\xC0\x50\x1E\x33\xC0\x50\x06\xE8\x2B"            "\x53\x83\xC4\x0A\x06\x1F\x1E\x17\x8B\x46\x08\x5D\x5F\x5E\xC3"if (said(111, 5, 1)){} [ 0001[ error message, in case memory operation fails#message  6 "Unable to allocate memory to support the power pack.\n\n"            "Press any key to quit."[ use unblock command to run the patch#message  7 "\x01" [ \x00if (said(2, 7, 1411, 0)){} [ DS:0583unblock();[ restore unblock#message  8 "\x04" [ \x00#message  9 "\x06\x71"if (said(4, 8, 1409, 0)){} [ DS:0581[ now verify this is a PC, with EGA compatible display#message 10 "This game will only run on a PC (or DOSBox), with EGA monitor."#message 11 "machine: %v20 (PC = 0)\nmonitor: %v26 (EGA = 0)"if ((machineType != PC || monitorType != EGA))  {  print(m10);  print(m11);  quit(1);  }[ memCopy patch is still in original data segment; it needs to be moved[ so that area can be reused by patch code#message  12 "\xAC\x8A\xD0\xAD\x50\xAD\x50\xE8\xFE\x1F\x83\xC4\x02\x50\x1E\xAD"            "\x50\x80\xFA\x04\x75\x03\x1E\xEB\x01\x0E\xE8\x6F\x53\x83\xC4\x0A"            "\x8B\xC6\xC3"if (said(35, 12, 1)){} [ 0001[ change said command to use the new patch locationif (said(2, 7, 1779, 0)){} [ DS:06F3[ HexToInt function, used by several other patches#message 13 "\x80\xFC\x30\x73\x04\x32\xE4\xEB\x1A\x80\xFC\x39\x77\x05\x80\xEC"            "\x30\xEB\x10\x80\xE4\xDF\x80\xFC\x41\x72\xEA\x80\xFC\x46\x77\xE5"            "\x80\xEC\x37\x3C\x30\x73\x04\x32\xC0\xEB\x14\x3C\x39\x77\x04\x2C"            "\x30\xEB\x0C\x24\xDF\x3C\x41\x72\xEE\x3C\x46\x77\xEA\x2C\x37\xC0"            "\xE0\x04\x02\xC4\x32\xE4\xC3"if (said(71, 13, 34530)){} [ 86E2[******************************************************************************[******************************************************************************[[ CONTROLLER TABLE BUGFIX[[ Although AGI allocates space to store and evaluate 49 controllers, there is a[ bug in the set.key command that limits the number of controllers that can be[ assigned to 39. This patch adjusts the controller count to allow up to 49[ assignments. This patch also fixes a bug in this version that only allocates [ space for 30 controllers in the evaluation table.[ [ SYNTAX:  n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: none - all 49 controller slots are now available[[ PATCH CODE:#message 14 "\xCB\x08"if (said(2, 14, 15816)){} [ 3DC8if (said(2, 14, 17588)){} [ 44B4if (said(2, 14, 17604)){} [ 44C4#message 15 "\xCD\x08"if (said(2, 15, 17617)){} [ 44D1[ move eval table#message 16 "\x1F\x0E"if (said(2, 16, 17512)){} [ 4468if (said(2, 16, 2137)){} [ 859if (said(2, 16, 12443)){} [ 309B[ adjust controller count to 49#message 17 "\x31"if (said(1, 17, 17577)){} [ 44A9if (said(1, 17, 17508)){} [ 4464[ temporary function to run MemSet to clear the tables#message 18 "\x56\x2B\xC0\x50\xB0\x32\x50\xB8\x1F\x0E\x50\xE8\x81\xCC\x83\xC4"            "\x06\x2B\xC0\x50\xB0\xC8\x50\xB8\xCB\x08\x50\xE8\x71\xCC\x83\xC4"            "\x06\x58\xC3"if (said(35, 18, 34601)){} [ 8729#message 19 "\x29\x87"if (said(2, 19, 1411, 0)){} [ DS:0583unblock();[ restore unblock (reuse memCopy message)if (said(4, 8, 1409, 0)){} [ DS:0581[******************************************************************************[******************************************************************************[[ SET.GAME.ID PATCH[ [ This patch skips the check against the built-in gameID, allowing changes to  [ the game ID with the 'set.game.id' command without causing AGI to quit.[[ SYNTAX: n/a - patch does not modify any command syntax[  [ LIMITATIONS/CONSIDERATIONS:  The string assigned to gameID is limited to six [ characters, but can now include formatting codes (such as '%v1', '%s1', [ '%m1', etc). If you do use formatting codes, you should make sure the [ formatted string is six or less characters. (The patch uses a buffer of ~40 [ characters when doing the conversion before truncating it to 6; if your [ formatted string exceeds that, it may result in crashing AGI.)[[ With the ID check removed, you can now change the ID multiple times during a [ game to give users access to more save game slots, because the save game [ files would have different names. So you could save by 'chapter', or allow [ users to choose an ID to sort their save game files.[[ PATCH CODE:#message 20 "\x68\x0F\x0B\x6A\x02\xC6\x06\x7B\x0B\xFF\xE8\xBD\x96\x83\xC4\x04"            "\x6A\x07\x68\x0F\x0B\x6A\x02\xE8\x16\xBE\x83\xC4\x06\xC3"if (said(30, 20, 34601)){} [ 8729#message 21 "\xE8\xA4\x79"if (said(3, 21, 3458)){} [ 0D82[******************************************************************************[******************************************************************************[[ EXTENDED CHARACTER SUPPORT PATCH[[ This version does not require a patch for extended character support.[[******************************************************************************[******************************************************************************[[ CLEAR REGION COLOR/SCROLL PATCH[[ This patch modifies clear.lines and clear.text.rect so they use the actual[ background color, instead of just black or white. By passing a negative [ value, the region is scrolled up (like the trace window) instead of being [ cleared.[ [ SYNTAX:[   clear.lines(TOP, BTM, COLOR*); [   clear.text.rect(R1, C1, R2, C2, COLOR*);[[   * COLOR argument can be any valid color (0-15), or a negative value[     255(-1) to 128(-127); no other change from normal syntax[[ LIMITATIONS/CONSIDERATIONS: This patch affects both graphics mode and [ text.screen mode. If COLOR is a valid color (0-15), the region is cleared to[ that color. If COLOR is >=16 and <128, the actual color is only the lower [ nibble (i.e. COLOR(act) = COLOR bitOR 0Fh).[[ If COLOR is negative, the region is scrolled up n text rows, where[ n = -COLOR. The exposed area of the region will be cleared to the current [ background color (set by last call to set.text.attributes). If n is greater[ than the number of text rows in the region, the entire region is cleared to[ the current background color. [[ PATCH CODE:            [ ScrollLines#message 22 "\x84\xC0\x78\x10\x83\x3E\xC1\x13\x01\x75\x06\x51\xB1\x04\xD2\xE0"            "\x59\xE9\xBA\xE5\xE8\xCE\x05\xB4\x06\xF6\xD8\x8A\x3E\xCB\x03\x83"            "\x3E\xC1\x13\x01\x75\x04\xB1\x04\xD2\xE7\x8B\xCF\x8A\xE9\x32\xC9"            "\x8A\x76\xFE\xB2\x27\x83\x3E\xC1\x13\x01\x75\x07\x80\x3E\xFA\x12"            "\x01\xEB\x05\x80\x3E\xFB\x12\x01\x75\x03\x80\xC2\x28\xCD\x10\xE8"            "\x82\x05\x8B\xC6\x8B\xE5\x5D\x5F\x5E\xC3"            [ ScrollWnd            "\x84\xC0\x78\x10\x83\x3E\xC1\x13\x01\x75\x06\x51\xB1\x04\xD2\xE0"            "\x59\xE9\xB4\xE5\xE8\x74\x05\xB4\x06\xF6\xD8\x8A\x3E\xCB\x03\x83"            "\x3E\xC1\x13\x01\x75\x04\xB1\x04\xD2\xE7\x8A\x6E\xFE\x8A\x4E\xFA"            "\x8A\x76\xFC\x8A\x56\xF8\xCD\x10\xE8\x3F\x05\x8B\xC6\x8B\xE5\x5D"            "\x5F\x5E\xC3"if (said(157, 22, 34631)){} [ 8747[ modify clear.lines command#message 23 "\xE9\x36\x1A\x90\x90\x90\x90"if (said(7, 23, 27918)){} [ 6D0E[ modify clear.text.rect command#message 24 "\xE9\x3C\x1A\x90\x90\x90\x90"if (said(7, 24, 28002)){} [ 6D62[******************************************************************************[******************************************************************************[[  FULL COLOR TEXT IN GRAPHICS MODE[[ This patch patch modifies the graphics text functions so all combinations [ of background and foreground color can be used (normal AGI functionality[ only allows black-on-white, or any-color-on-black).[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: The DOS interrupt functions necessary to make [ this patch work operate on a character-by-character basis; if you are [ printing or displaying an extremely large amount of text you may see a slight[ delay as the characters are added. With smaller text amounts, the effect[ is barely noticeable.[[ This patch allows for customization of the standard print window. That patch [ is provided below.[[ PATCH CODE:[ in SetBGcolor function, save the actual color not just black or white#message 25 "\x8B\x46\x08\x5D\x5F\x5E\xC3"if (said(7, 25, 28274)){} [ 6E72            [ DrawColorSpace#message 26 "\x50\x52\x32\xC0\x88\xDF\x8B\xCA\x80\xF9\x28\x77\x0A\x90\x90\x90"            "\xB4\x06\xCD\x10\x90\x90\x90\x5A\x32\xFF\xB4\x02\xCD\x10\x58\xC3"            [ PutCharPatch            "\x80\x3E\xC1\x13\x01\x75\x07\x32\xED\xB1\x01\xE9\xDC\x9F\x50\x32"            "\xFF\xB4\x03\xCD\x10\x58\x8B\x1E\xCB\x03\xE8\xC3\xFF\x32\xED\xB1"            "\x01\x8B\x1E\xCB\x03\x33\x1E\xC9\x03\x80\xCB\x80\xE9\xBF\x9F"            [ InputRedrawPatch            "\xA1\xCB\x03\x80\x3E\xC1\x13\x01\x75\x04\xB1\x04\xD2\xE0\x50\xE9"            "\x7D\xAA"            [ ArrowDrawPatch            "\xFF\x36\x8B\x0B\xFF\x76\x08\xE8\xCD\x9F\x83\xC4\x04\xB0\x20\x32"            "\xE4\x50\xE8\x35\x9F\xE9\x25\xF7"if (said(121, 26, 34788)){} [ 87E4[ modify PutChar function to use the patch#message 27 "\xE9\x16\x60"if (said(3, 27, 10219)){} [ 27EB[ backspace needs to use the patch too #message 28 "\x8A\x1E\xCB\x03\x80\x3E\xC1\x13\x01\x75\x03\xC0\xE3\x04\xE8\x1D"            "\x60\xEB\x01"if (said(19, 28, 10166)){} [ 27B6[ modify InputRedraw to use color patch#message 29 "\xE9\x72\x55"if (said(3, 29, 12990)){} [ 32BE[ this version used inversion to erase the arrow on save/restore[ which doesn't work after the patch, so new arrow clear function needed#message 30 "\xE9\xC6\x08"if (said(3, 30, 32636)){} [ 7F7C[******************************************************************************[******************************************************************************[[ TEXT ATTRIBUTE UPGRADE[[ 'set.text.attribute' normally takes numbers as arguments; this patch uses[ the toggle.monitor command as an 'initiator' command so the next call to [ set.text.attribute treats the arguments as variables. It automatically[ returns set.text.attribute to normal afterward. Also, passing a value of -1 [ as the foreground color will save the current colors, while passing a[ value of -1 to background color will restore previously saved colors.[[ SYNTAX: [   [ to pass colors by variable:[   toggle.monitor();                [ initiator function[   set.text.attribute(vFG*, vBG*);[[   [ to push current colors:[   set.text.attribute(-1, any);[[   [ to pop stored colors into current:[   set.text.attribute(any**, -1);[[   * The compiler expects numbers as arguments, not variables or messages, so[     use the NUMBER of the variable or message, without the 'v' or 'm' prefix.[[  ** A value of -1 for FG will take precedence over a value of -1 for BG[[ LIMITATIONS/CONSIDERATIONS:[ - colors by variable: The toggle.monitor command is used to tell AGI that the[   next call to set.text.attribute will use variables instead of numbers. [   (Since the Power Pack is only available on a PC with EGA monitor, the [   toggle.monitor command is free to re-purpose.) After setting colors by  [   variable, set.text.attribute will automatically return to normal mode (i.e.[   it will expect numbers again). This means when you wish to set colors by [   variable, you must use the toggle.monitor initiator every time.[[ - save/restore colors: The function does not use a 'stack'; only one color [   set is stored. This means multiple saves will overwrite previous saves. [   Restoring colors without saving first will get AGI default colors (BG = 0[   and FG = 15), and restoring multiple times after a single push will get the[   same colors. [[ PATCH CODE:            [ CheckSetTextPatch#message 31 "\x8B\x76\x08\xAC\x2A\xE4\x3C\xFF\x74\x12\x8B\xF8\xAC\x3C\xFF\x75"            "\x08\xA0\xF8\x12\x8B\xF8\xA0\xF9\x12\xE9\x23\xE5\xA1\xCB\x03\xA2"            "\xF9\x12\xA1\xC9\x03\xA2\xF8\x12\x8B\xC6\x40\x5D\x5F\x5E\xC3"if (said(47, 31, 34909)){} [ 885D[ modify set.text.attribute to use the patch#message 32 "\xE9\xD1\x1A"if (said(3, 32, 28041)){} [ 6D89[ patch toggle.monitor to initiate variable version of set.text.attribute#message 33 "\xB8\xF5\x6E\xA3\xCB\x05\x8B\xC6\xC3\x56\x57\x55\x32\xE4\xAC\x8A"            "\xD8\x32\xFF\x8A\x47\x09\x8B\xF8\xAC\x8A\xD8\x8A\x47\x09\x50\x57"            "\xE8\x9B\xFE\x83\xC4\x04\xB8\x84\x6D\xA3\xCB\x05\x8B\xC6\x5D\x5F"            "\x5E\xC3"if (said(50, 33, 28396)){} [ 6EEC[******************************************************************************[******************************************************************************[[ CUSTOM MESSAGE BOX COLORS [ [ This patch creates a new function to allow modifying message box colors.[    [ SYNTAX: [   block(-1 , vBORDER*, vFOREGROUND*, vBACKGROUND*);[   block(-2 , BORDER, FOREGROUND, BACKGROUND);[[   * The compiler expects numbers as arguments, not variables, so use the [     NUMBER of the variable, without the 'v' prefix.[[ LIMITATIONS/CONSIDERATIONS: You can pass colors by variable (using -1 as the[ first argument) or by number (using -2 as the first argument). [[ All message boxes will use the new colors, including print/print.at, pause,[ and any other system generated message box.[ [ PATCH CODE:            [ SetMsgBoxColors#message 34 "\x55\x8B\xEC\x8B\x46\x08\x2E\xA2\x5D\x1D\x8B\x46\x06\x8A\xE0\xB0"            "\xB0\x2E\xA3\x2F\x1C\x2E\xA3\x31\x7A\x8B\x46\x04\x2E\xA2\x2C\x1C"            "\x2E\xA2\x5C\x1D\x2E\xA2\x2E\x7A\x5D\xC3"            [ GetColors            "\x3C\x02\x74\x13\xAC\x32\xE4\xA2\xA9\x09\x50\xAC\xA2\xAA\x09\x50"            "\xAC\xA2\xAB\x09\x50\xEB\x22\xAC\x32\xE4\x32\xFF\x8A\xD8\x8A\x47"            "\x09\xA2\xA9\x09\x50\xAC\x8A\xD8\x8A\x47\x09\xA2\xAA\x09\x50\xAC"            "\x8A\xD8\x8A\x47\x09\xA2\xAB\x09\x50\xE8\x9A\xFF\x83\xC4\x06\x8B"            "\xC6\x5D\x5F\x5E\xC3"if (said(111, 34, 34956)){} [ 888C[ save default values#message 35 "\x04" [ \x00#message 36 "\x0F"if (said(3, 35, 2473, 0)){} [ DS:09A9[ adjust wrong disk string pointer (we use part of it for data)#message 37 "\xE4"if (said(1, 37, 11496)){} [ 2CE8[******************************************************************************[******************************************************************************[ [ 80 COLUMN TEXT SUPPORT[[ In both text and graphics mode, AGI uses a forty column-wide text screen to[ display text. The EGA card is capable of displaying eighty columns in both [ modes without affecting the display of graphics elements. This patch creates [ a new function that allows you to set the column count for either mode to [ eighty or forty. The function is accessed by passing a value of -1 to the [ configure.screen command. [[ SYNTAX: [   configure.screen(-1, MODE*, COL**);[   [   * if MODE is 0, the graphics mode column count will be adjusted; any other [     value will modify the text mode[[  ** if COL is 0, 40 column mode is set; any other value will set 80 column[     mode[[ LIMITATION/CONSIDERATIONS: The main benefit of using 80 columns (in both [ modes) is that it allows you to include more verbose messages and text. For [ example, the Help screen is severely limited with only 40 columns; with 80 [ columns you can include a lot more useful information. In 80 column mode, [ you can have a much larger menu system.[[ In 80 column mode, normal print messages will use the same default text [ width (30) as in 40 column mode. If you want message boxes to be wider than[ that, you have to use the print.at command.[[ If you intend to use a wider menu in 80 column mode, be sure to set the mode [ BEFORE setting up your menu. If you have a menu that extends past 40 columns,[ do not try to display it in 40 column mode; it will not display correctly.[[ Normally, you will set the column count once during startup of a game and[ leave it. But the patch fully supports swapping column count at any time [ while a game is running, if you need that functionality in your game.[ [ If you do intend to switch between modes during your game, you will need to[ manually track which column count is currently active (a flag works for [ this) and check margins as needed; using widths greater than 40 in 40 [ column mode will cause your displayed text to spill over to the next line.[ [ The function will automatically refresh the screen (by calling graphics or [ text.screen command) after setting the new column count. This will redraw [ the graphics screen or clear the text screen respectively. [[ PATCH CODE:            [ SetColumnCount#message 38 "\x8B\x76\x08\x8B\xFE\x46\x8A\x05\x2A\xE4\x3C\xFF\x0F\x85\xB4\xE5"            "\x8B\xFE\x46\x8A\x05\x8A\xE0\x8B\xFE\x46\x8A\x05\x0A\xE4\x74\x0E"            "\x0A\xC0\x74\x02\xB0\x01\xA2\xFA\x12\xE8\x78\xE3\xEB\x0C\x0A\xC0"            "\x74\x02\xB0\x01\xA2\xFB\x12\xE8\xA2\xE3\xE9\xAE\xE5"            [ AdjustTextMode            "\x1E\x0E\x80\x3E\xFA\x12\x01\x1F\x75\x12\xB0\x03\xA2\xD0\x84\xB0"            "\x4F\xA2\x95\x28\xA2\xFE\x27\xA2\xF4\x84\xEB\x10\xB0\x01\xA2\xD0"            "\x84\xB0\x27\xA2\x95\x28\xA2\xFE\x27\xA2\xF4\x84\x1F\xE9\x5D\xFB"            [ AdjustGrafMode            "\x1E\x0E\x80\x3E\xFB\x12\x01\x1F\x0F\x85\xAC" [ \x00#message 39 "\xB0\x50\xA2\x27\x86\xA2\x8A\x85\xA2\x09\x86\xA2\x0D\x1D\xA2\xEE"            "\x87\xA2\xEC\x0B\xA2\xF3\x0B\xA2\xBD\x0B\xA2\x8F\x68\xA2\x93\x0C"            "\xA2\x99\x0C\xB0\x52\xA2\x8F\x0C\xA2\xA1\x0C\xA2\xCD\x0C\xB0\xAE"            "\xA2\xAE\x0C\xA2\xB8\x0C\xA2\xC2\x0C\xA2\xE2\x0C\xA2\xF5\x0C\xA2"            "\x0E\x0D\xB0\x01\xA2\x39\x85\xA2\xAC\x85\xB0\xF0\xA2\x54\x85\xA2"            "\xD6\x85\xB0\x0F\xA2\x60\x85\xA2\xE3\x85\xB0\x4F\xA2\xFE\x27\xA2"            "\x95\x28\xA2\x65\x86\xA2\x0C\x2F\xB0\x43\xA2\xCC\x2F\xB0\x06\xA2"            "\x07\x80\xB0\xFD\xA2\x03\x80\xB8\xEB\x16\xA3\x66\x85\xB8\xEB\x18"            "\xA3\xE8\x85\xB8\x90\x90\xA3\xA8\x4D\xA3\xC0\x1C\xA3\x4D\x1D\xA3"            "\xFE\x7F\xB8\xA1\x40\xA3\x5E\x86\xB0\x24\xA2\x35\x2F\xB0\x1F\xA2"            "\xB5\x2E\xB0\x18\xA2\x4D\x2F\xB0\x0E\xE9\xAF" [ \x00#message 40 "\xB0\x28\xA2\x27\x86\xA2\x8A\x85\xA2\x09\x86\xA2\x0D\x1D\xA2\xEE"            "\x87\xA2\xEC\x0B\xA2\xF3\x0B\xA2\xBD\x0B\xA2\x8F\x68\xA2\x93\x0C"            "\xA2\x99\x0C\xB0\x2A\xA2\x8F\x0C\xA2\xA1\x0C\xA2\xCD\x0C\xB0\xD6"            "\xA2\xAE\x0C\xA2\xB8\x0C\xA2\xC2\x0C\xA2\xE2\x0C\xA2\xF5\x0C\xA2"            "\x0E\x0D\xB0\x03\xA2\x39\x85\xA2\xAC\x85\xB0\xC0\xA2\x54\x85\xA2"            "\xD6\x85\xB0\x30\xA2\x60\x85\xA2\xE3\x85\xB0\x27\xA2\xFE\x27\xA2"            "\x95\x28\xA2\x65\x86\xA2\x0C\x2F\xB0\x10\xA2\x35\x2F\xB0\x0B\xA2"            "\xB5\x2E\xB0\x04\xA2\x4D\x2F\xB0\x1B\xA2\xCC\x2F\xB0\x0A\xA2\x07"            "\x80\xB0\xFD\xA2\x03\x80\xB8\xFE\xC9\xA3\x66\x85\xB8\x26\x88\xA3"            "\xE8\x85\xB8\xD1\xEB\xA3\xA8\x4D\xB8\xD1\xE7\xA3\xC0\x1C\xB8\xD1"            "\xE0\xA3\x4D\x1D\xA3\xFE\x7F\xB8\xA1\x20\xA3\x5E\x86\xB0\x0D\x1F"            "\x32\xE4\x50\xE8\x40\xFB\x58\xCD\x10\xE8\x9F\x23\xE9\xCB\xF9"            [ FormatTextPatch            "\x32\xE4\xB0\x29\x80\x3E\xC1\x13\x01\x75\x0B\x80\x3E\xFA\x12\x01"            "\x75\x0D\xB0\x51\xEB\x09\x80\x3E\xFB\x12\x01\x75\x02\xB0\x51\xC3"            [ RestorePalettePatch            "\x33\xDB\xCD\x10\xE8\x75\x23\xE9\xD2\xF9"if (said(526, 38, 35067)){} [ 88FB[ modify configure.screen to use the patch#message 41 "\xE9\x43\x1A"if (said(3, 41, 28341)){} [ 6EB5[ modify j_EgaTextMode to adjust columns based on text80 flag#message 42 "\xE9\xA2\x04"if (said(3, 42, 33939)){} [ 8493[ modify EgaTextMode to maintain palette#message 43 "\xE9\x25\x06\x90"if (said(4, 43, 34007)){} [ 84D7[ modify EgaGrahicsMode  to adjust columns based on graf80 flag#message 44 "\xE9\xC0\x04"if (said(3, 44, 33957)){} [ 84A5[ modify InitRowTable function so it will run everytime it's called#message 45 "\x90\x90"if (said(2, 45, 34336)){} [ 8620[ in display, and display.v, need to use patch to adjust right margin[ depending on number of columns#message 46 "\xE8\x4C\x6A"if (said(3, 46, 8336)){} [ 2090#message 47 "\xE8\xE5\x69"if (said(3, 47, 8439)){} [ 20F7[******************************************************************************[******************************************************************************[[ AUTO-CYCLE PROPERTY[[ This patch creates a new property for screen objects that allows you to have [ the object (including ego) automatically stop cycling when not moving, and [ start cycling when the object begins moving. It eliminates the need for [ complicated code to check object position and then manually start/stop [ motion. The patch is accessed by the set.upper.left command.[[ SYNTAX: [   set.upper.left(oNUM*, MODE**);[[   * The compiler expects numbers as arguments, not objects, so use the [     NUMBER of the object, without the 'o' prefix.[[  ** if value of vMODE is 0, auto-cycling (normal AGI behavior) is disabled;  [     if value of vMODE is any non-zero value, auto-cycling is ENABLED[[ LIMITATIONS/CONSIDERATIONS: The set.upper.left command is a null function[ in AGI so it can be re-purposed. [[ The auto-cycle property overrides all other cycling modes. If you want a [ stationary object to cycle (by using end.of.loop or any other cycling mode) [ you must first disable the auto-cycle property.[[ This patch also fixes a minor bug with blocks; when movement is stopped due [ to hitting a block, AGI won't update the object's loop based on direction, [ like it does with hitting other objects or control lines. This patch fixes [ that.[[ PATCH CODE:            [ MoveObjPatch#message 48 "\x81\x64\x25\xFF\xFB\xF7\x44\x25\x20" [ \x00#message 49 "\x74\x35\xF7\x44\x25" [ \x00#message 50 "\x80\x74\x16\x80\x7C\x21\x01\x72\x28\x8B\x46\xFC\x3B\x44\x03\x75"            "\x08\x8B\x46\xFA\x3B\x44\x05\x74\x18\x80\x7C\x20\x01\x72\x12\xFE"            "\x4C\x20\x75\x0D\x56\xE8\xBC\xB5\x83\xC4\x02\x8A\x44\x1F\x88\x44"            "\x20\x3B\x36\x25\x07\x75\x20\x80\x3E\xF6\x12\x01\x75\x19\x8B\x46"            "\xFC\x3B\x44\x03\x75\x0C\x8B\x46\xFA\x3B\x44\x05\x75\x04\xB0\x01"            "\xEB\x02\x32\xC0\xA2\xE8\x01\xC3"            [ SetAutoCycle            "\x56\x57\x55\x8B\xEC\x8B\x76\x08\x8B\xFE\x46\x8A\x05\x2A\xE4\x6B"            "\xC0\x2B\x8B\xF8\x03\x3E\x25\x07\x8A\x04\x46\x3C\x01\x72\x07\x81"            "\x4D\x25" [ \x00#message 51 "\x80\xEB\x05\x81\x65\x25\xFF\x7F\x8B\xC6\x5D\x5F\x5E\xC3"            [ CheckBlockPatch            "\x56\x57\x55\xE9\x39\x7A\xE8\xF7\xFF\x8A\x44\x21\xE9\x6E\x88"if (said(168, 48, 35593)){} [ 8B09[ skip over current cel cycle code#message 52 "\xEB\x0B"if (said(2, 52, 1356)){} [ 054C[ modify MoveObjects function to use patch with auto-cycle flag (8000h)#message 53 "\xE8\xF5\x75\x90\x90"if (said(5, 53, 5393)){} [ 1511[ ignore CheckBlock calls in UpdateMovement#message 54 "\x43"if (said(1, 54, 1471)){} [ 05BF#message 55 "\x31"if (said(1, 55, 1489)){} [ 05D1[ call CheckBlock from MoveObjects function#message 56 "\xE9\x89\x77"if (said(3, 56, 5148)){} [ 141C[ use set.upper.left to control auto-cycle feature#message 57 "\x71\x8B"if (said(2, 57, 1667, 0)){} [ DS:0683[******************************************************************************[******************************************************************************[[ GET.NUMBER INPUT FILTER[[ This patch modifies the get.number command so it ignores any non-numeric[ keystrokes, preventing users from entering anything other than the digits [ 0-9, ENTER, ESC, or BACKSPACE. This makes it easier to control what users [ input.[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: none[[ PATCH CODE:            [ CheckForNumber#message 58 "\x83\xFF\x20\x72\x17\x80\x3E\x0A\x0F\x01\x75\x0A\x83\xFF\x30\x72"            "\x0B\x83\xFF\x39\x77\x06\x8B\xDE\x46\xE9\x5D\x81\xE9\x01\x81"            [ SetCheckNumFlag            "\xC6\x06\x0A\x0F\x01\x8B\x76\x08\xE9\xA3\xDC"            [ ResetCheckNumFlag            "\xC6\x06\x0A\x0F" [ \x00#message 59 "\x83\xC4\x04\xE9\xE2\xDC"if (said(53, 58, 35761)){} [ 8BB1[ patch the getinput function to use the flag#message 60 "\xE9\x87\x7E"if (said(3, 60, 3367)){} [ 0D27[ modify getnum to set checknumber flag before getting input#message 61 "\xE9\x52\x23"if (said(3, 61, 26747)){} [ 687B[ modify getnum to RESET checknumber flag when done#message 62 "\xE9\x13\x23"if (said(3, 62, 26821)){} [ 68C5[******************************************************************************[******************************************************************************[[ SET INPUT AND STRING COMPARE FEATURES[[ This patch modifies set.string to provide two new features - you can send [ text directly to the input line (replacing what the user has currently [ typed there), and you can adjust the compare mode used by the [ 'compare.strings' test command to binary, text or AGI (default).[[ SYNTAX: [   [ to set the input line:[   set.string(s255, mInput);[[   [ to change string compare mode:[   set.string(s254, MODE*);[[   * The compiler expects the second argument to be a message number so pass [     MODE as m0, m1 or m2.[         MODE = 0: restore normal AGI comparison[         MODE = 1: text compare (case insensitive)[         MODE = 2: binary compare (case sensitive)[[ LIMITATIONS/CONSIDERATIONS: The message used to set the input line can [ contain formatting codes such as '%v', '%s' and so on. If the formatted [ length of the message is greater than 38, it will get truncated to 38. If [ there is already text on the input line, it is completely replaced by the[ new text.[[ The default AGI string compare mode is to ignore case, and most non-[ alphanumeric characters (See the WinAGI Help file for details on normal[ AGI string comparison). Use a value of 0 for MODE to reset the default  [ AGI mode.[[ The new 'text' compare mode will ignore case, but all other characters, [ including those that the default mode ignores must match for the test to [ return true.[[ With the new 'binary' compare mode, all characters must match exactly, [ including case, for the test to return true.[[ This patch also fixes a buffer overflow bug in the compare function if either [ string exceeds forty characters. Strings longer than forty characters are [ now truncated before being compared.[[ PATCH CODE:            [ SetInput#message 63 "\x50\xE8\x1F\x94\x83\xC4\x02\x81\xEC\xE8\x03\x6A\x26\x50\x8D\x86"            "\x18\xFC\x50\xE8\xB8\x91\x83\xC4\x06\x6A\x26\x8D\x86\x18\xFC\x50"            "\xB8\x7E\x0D\x50\xE8\x4C\xB9\x81\xC4\xEE\x03\x50\xE8\xF5\xB8\x83"            "\xC4\x02\xA3\xD2\x0D\xE8\x8D\xA6\xC3"            [ SetStringPatch            "\x8A\x07\x2A\xE4\x3C\xFF\x74\x16\x3C\xFE\x0F\x85\xF8\x7F\x8B\xDE"            "\x46\x8A\x07\x3C\x02\x76\x02\x32\xC0\xA2\xDB\x01\xEB\x08\x8A\x04"            "\x46\x56\xE8\xA2\xFF\x5E\x8B\xC6\x5D\x5F\x5E\xC3"            [ AgiStrCleanPatch1            "\x56\x80\x3D\x01\x72\x0C\x2B\x76\x0A\x83\xFE\x28\x74\x04\x5E\xE9"            "\x92\x81\x5E\xE9\xB9\x81\x90"            [ AgiStrCleanPatch2            "\x80\x3E\xDB\x01\x01\x0F\x83\x97\x81\x2A\xE4\x50\xE9\x83\x81"            [ AgiStrCleanPatch3            "\x80\x3E\xDB\x01\x02\x0F\x84\x99\x81\x2A\xE4\x50\xE9\x8D\x81"if (said(154, 63, 35814)){} [ 8BE6[ modify set.string to use the mode change patch#message 64 "\xE9\xFB\x7F\x90"if (said(4, 64, 3105)){} [ 0C21[ modify string clean function to handle different compares#message 65 "\xE9\x5E\x7E"if (said(3, 65, 3562)){} [ 0DEA#message 66 "\xE9\x6E\x7E"if (said(3, 66, 3569)){} [ 0DF1#message 67 "\xE9\x64\x7E"if (said(3, 67, 3594)){} [ 0E0A[ reset bCompareMode to zero#message 68 "" [ \x00if (said(1, 68, 475, 0)){} [ DS:01DB[******************************************************************************[******************************************************************************[[ MOUSE SUPPORT[[ This patch adds support for mouse by replacing some of the joystick code. [ The patch will automatically detect a mouse driver, and if one is found, the[ mouse functions are available for use. The patch provides access to mouse[ position and button status by assigning three new reserved variables. Right [ and left button click and double-click events are supported. Mouse support [ for menus is also provided. Custom cursors can easily be loaded as needed.[[ SYNTAX: [   [ to enable (show) mouse:[   set.key(-1, 1, cANY*);[[   [ to disable (hide) mouse:[   set.key(-1, 0, cANY*);[[   [ to load a cursor:[   set.key(-1, -1, mCURSOR**);[[   [ to change mouse variables:[   block(-3, XVAR, YVAR, BVAR);[[   * This argument is ignored, so it can be any value[[  ** The compiler expects the third argument to be a controller number so pass [     mCURSOR as a number with the 'c' prefix.[[ LIMITATIONS/CONSIDERATIONS: The mouse patch uses several joystick elements,[ so the joystick is not available, even if it's connected. The init.joystick[ command is set to a null function to avoid potential conflicts.[[ The patch first checks for a mouse, and sets reserved flag f8 [ (enableDblClick) if found. If no mouse is detected, the flag is reset.[ If a mouse driver is not found, calls to 'enable mouse' are ignored, and the[ game will continue to run normally, just without mouse support. Calls to [ 'disable mouse' when the mouse is already disabled are also ignored.[ [ When enabled, variables v27, v28 and v29 are the default reserved variables  [ for mouse-X, mouse-Y and mouse-Btn respectively. You can change the [ variables that store mouse information by using the block command with -3 as[ the first argument. XVAR will be the number of the new mouse-X, YVAR the new [ mouse-Y, and BVAR the new mouse-Btn. The mouse variables are updated [ continuously. To determine current mouse position, just check mouse-X and [ mouse-Y variables. Mouse button status will be:[    0 if no button pressed[    1 if left button is pressed[    2 if right button is pressed[    3 if both buttons are pressed[[ Similar to the joystick, a left click will send an 'ENTER' key press and [ right click will send an 'ESCAPE' key press when a message box is visible. [[ Mouse click and double-click events replace joystick button events. To use [ these events, assign controllers using set.key command as follows:[   1, 1 = mouse left button click[   1, 2 = mouse right button click[   1, 3 = mouse left button double-click[   1, 4 = mouse right button double-click[[ Mouse double-click is enabled by default if a mouse is detected (reserved [ flag f8 is set). Reset flag f8 to ignore double-clicks. Double-click speed  [ can be controlled by setting reserved variable v15 (dblClickDelay). [ [ When the mouse is disabled (hidden), no mouse events will occur, and the [ mouse variables will NOT update. If text mode is set while the mouse is [ enabled the mouse is temporarily hidden. Button events will still activate[ and BVAR will updated, but mouse position (XVAR and YVAR) will not. Switching[ back to graphics mode will re-enable the mouse.[[ To change the mouse cursor, use the set.key command, passing -1 for the first[ and second arguments, and a message (using the 'c' prefix instead of 'm') as[ the third argument. The cursor string must be exactly 132 characters, [ comprised of 66 two-digit hex values. The first two digits are the [ horizontal offset of the cursor hotspot, the next two are the vertical[ offset. The remaining 128 digits are the screen and cursor masks. For details[ on how to define a cursor, see the examples in the Power Pack Demo game.[[ PATCH CODE:            [ Check4MouseDriver#message 69 "\x33\xC0\xCD\x33\x3C\xFF\xB0\x08\x75\x05\xE8\x36\xDE\xEB\x03\xE8"            "\x37\xDE\x8B\xC6\xC3"if (said(21, 69, 35968)){} [ 8C80[ use patch command to run the detection function#message 70 "\x80\x8C"if (said(2, 70, 1411, 0)){} [ DS:0583unblock();[ restore unblock#message 71 "\x06\x71"if (said(2, 71, 1411, 0)){} [ DS:0583            [ ReloadCursor#message 72 "\x83\x3E\xC1\x13\x01\x74\x2D\x33\xC0\xB0\x01\xA2\xF2\x12\xA2\xF4"            "\x12\xCD\x33\xBF\x49\x01\x80\x3E\xFB\x12\x01\x75\x03\x83\xC7\x46"            "\x80\x3D\xFF\x75\x0F\x8B\x4D\x02\x8B\x5D\x04\x83\xC7\x06\x8B\xD7"            "\xB0\x09\xCD\x33\xC3"            [ EnableMouse            "\x33\xC0\xCD\x33\x3C\xFF\x75\x03\xE8\xC0\xFF\xC3"            [ DisableMouse            "\x33\xC0\xA2\xF2\x12\xA2\xF4\x12\xB0\x02\xCD\x33\xC3"            [ GraphicsModePatch            "\x80\x3E\xF2\x12\x01\x75\x03\xE8\xA8\xFF\xB8\x03\x10\xE9\xD0\xF7"            [ PollMouse            "\x33\xC0\x80\x3E\xF2\x12\x01\x75\x33\xB0\x03\xCD\x33\x88\x1E\xD7"            "\x01\x88\xD8\x32\xFF\x8A\x1E\xDA\x01\x88\x47\x09\x80\x3E\xF4\x12"            "\x01\x75\x19\xC1\xE9\x02\x88\x0E\xD5\x01\x8A\x1E\xD8\x01\x88\x4F"            "\x09\x88\x16\xD6\x01\x8A\x1E\xD9\x01\x88\x57\x09\xC3"            [ ShowCursor            "\x80\x3E\xF4\x12\x01\x74\x01\xC3\x50\x33\xC0\xB0\x01\xCD\x33\x58"            "\xC3"            [ HideCursor            "\x80\x3E\xF4\x12\x01\x74\x01\xC3\x50\x33\xC0\xB0\x02\xCD\x33\x58"            "\xC3"            [ CopyPixPatch            "\xE8\xEC\xFF\xE8\xD2\xF7\xE8\xD5\xFF\xC3"            [ DrawBoxPatch            "\xE8\xE2\xFF\xE8\x4A\xF8\xE8\xCB\xFF\xC3"            [ PutCharPatch            "\xE8\xD8\xFF\xB4\x09\xCD\x10\xE8\xC0\xFF\xC3"            [ ClearLinePatch            "\xE8\xCD\xFF\xB4\x06\xCD\x10\xE8\xB5\xFF\xC3"            [ LoadCursor            "\xFF\x76\xFC\xE8\x9C\x92\x83\xC4\x02\x8B\xF0\x81\xC4\x06\xFF\x8D"            "\xBE\x02\xFF\x57\x56\xC6\x06\x7B\x0B\xFF\xC6\x06\x79\x0B\x01\xE8"            "\x6A\x90\x8B\xF8\x32\xC0\x88\x05\x5E\xE8\x77\xB7\x5E\x3C\x84\x74"            "\x02\xEB\x40\xBF\x49\x01\x80\x3E\xFB\x12\x01\x75\x03\x83\xC7\x46"            "\xC7\x05\xFF\xFF\x83\xC7\x02\xAD\xE8\x30\xF9\x8B\xD0\x89\x05\x83"            "\xC7\x02\xAD\xE8\x25\xF9\x8B\xD8\x89\x05\x83\xC7\x02\x33\xC9\xB1"            "\x40\xAD\xE8\x16\xF9\xAA\xE2\xF9\x8B\xCA\x8D\x55\xC0\x33\xC0\xB0"            "\x09\xCD\x33\x83\xC4\x7D\x83\xC4\x7D\xC3"            [ TextModePatch            "\x80\x3E\xF2\x12\x01\x75\x05\x33\xC0\xA2\xF4\x12\xB8\x03\x10\xE9"            "\xE4\xF6"            [ SetMouseVars            "\xAC\xA2\xD8\x01\xAC\xA2\xD9\x01\xAC\xA2\xDA\x01\x8B\xC6\x5D\x5F"            "\x5E\xC3"            [ SetKeyPatch            "\x8B\x46\xFE\x3C\xFF\x74\x05\x2B\xFF\xE9\x96\xB6\x8A\xC4\x3C\xFF"            "\x75\x07\x56\xE8\x4C\xFF\x5E\xEB\x10\x3C\x01\x73\x05\xE8\x9C\xFE"            "\xEB\x07\x3C\x01\x75\xE1\xE8\x87\xFE\xE9\xA2\xB6"if (said(433, 72, 35968)){} [ 8C80[ modify graphics mode to use patch#message 73 "\xE9\x21\x08\x90"if (said(4, 73, 33962)){} [ 84AA[ modify textmode to hide cursor#message 74 "\xE9\x0B\x09\x90"if (said(4, 74, 34003)){} [ 84D3[ graphics insertion points#message 75 "\xE9\x9E\x08"if (said(3, 75, 33948)){} [ 849C#message 76 "\xE9\xA2\x08"if (said(3, 76, 33954)){} [ 84A2#message 77 "\xE8\x5C\x65\x90"if (said(4, 77, 10226)){} [ 27F2#message 78 "\xE8\x66\x64\x90"if (said(4, 78, 10483)){} [ 28F3#message 79 "\xE8\x3B\x64\x90"if (said(4, 79, 10526)){} [ 291E#message 80 "\xE8\x38\x05"if (said(3, 80, 34801)){} [ 87F1#message 81 "\xE8\x20\x05"if (said(3, 81, 34808)){} [ 87F8[ modify GetButton to use poll values#message 82 "\xE8\xE9\x30\x8A\xD8\x32\xFF\x80\xE3\x01\x89\x1E\xCE\x12\xD0\xE8"            "\x8A\xD8\x80\xE3\x01\x89\x1E\xDA\x12\xC3"if (said(27, 82, 23538)){} [ 5BF2[ modify CheckJoystkBtns function to correctly respond to clicks/dbl clicks#message 83 "\x83\x3C\x01\x75\x28\x83\x7C\x02\x01\x73\x13\xC6\x44\x02\x01\x90"            "\x90\xFF\x74\x04\x6A\x01\xE8\x98\xE2\x83\xC4\x04\xEB\xD6\x83\x7C"            "\x02\x02\x75\xD0\xFF\x74\x06\xC6\x44\x02\x03\xEB\xE7\x8B\x44\x02"            "\x83\xF8\x03\x76\x02\xEB\xBD\xD1\xE0\x8B\xD8\x2E\xFF\xA7\x8C\x5A"            "\x98\x5A\x9A\x5A\xC5\x5A\x94\x5A\xC6\x44\x02" [ \x00#message 84 "\xEB\xA6\xB0\x08\xE8\x38\x10\x75\x02\xEB\xF1\xA0\x18" [ \x00#message 85 "\x2A\xE4\x99\x8B\xD8\x8B\xCA\xA1\x29\x01\x8B\x16\x2B\x01\x03\xC3"            "\x13\xD1\x89\x44\x08\x89\x54\x0A\xC6\x44\x02\x02\xE9\x7B\xFF\x8B"            "\x44\x08\x8B\x54\x0A\x3B\x16\x2B\x01\x7C\xC3\x0F\x8F\x6B\xFF\x3B"            "\x06\x29\x01\x0F\x87\x63\xFF\xEB\xB5"if (said(147, 83, 23116)){} [ 5A4C[ with modified button handler, don't clear joystick when waiting for a keypress#message 86 "\x90\x90\x90"if (said(3, 86, 15582)){} [ 3CDE[ don't poll joystick in EventWait functionif (said(3, 86, 15789)){} [ 3DAD[ or in main game loopif (said(3, 86, 230)){} [ 00E6[ modify set.key to check for cursor#message 87 "\xE9\x60\x49\x90"if (said(4, 87, 17570)){} [ 44A2[ point init.joystick command to null function#message 88 "\xC2\x47"if (said(2, 88, 1603, 0)){} [ DS:0643[ default mouse variables are v27, v28, v29#message 89 "\x1B\x1C\x1D"if (said(3, 89, 472, 0)){} [ DS:01D8[******************************************************************************[******************************************************************************[ [ INPUT FILTER[[ Key presses that generate control code ascii values (such as CTRL plus any[ key) are displayed on the input line as character glyphs (unless assigned to[ a controller). But they shouldn't, as there is no way for AGI to use or [ interact with them. This patch fixes that bug.[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: none[[ PATCH CODE:            [ IsPrintable#message 90 "\x3D\xFF" [ \x00#message 91 "\x77\x0C\x3C\x20\x73\x0A\x3C\x0D\x74\x06\x3C\x08\x74\x02\xF8\xC3"            "\xF9\xC3"            [ InputCharPatch            "\x8B\x76\x08\x8B\xC6\xE8\xE3\xFF\x73\x03\xE9\x6E\xA2\x5D\x5F\x5E"            "\xC3"            [ CharWaitPatch            "\xE8\xD7\xFF\x72\xF7\x3C\x1B\x74\xF3\x3C\x03\x74\xEF\xE9\xC9\xAF"if (said(54, 90, 36401)){} [ 8E31[ redirect inputchar to the patch#message 92 "\xE9\x85\x5D"if (said(3, 92, 12478)){} [ 30BE[ redirect charwait to the patch#message 93 "\xE9\x21\x50"if (said(3, 93, 15923)){} [ 3E33[******************************************************************************[******************************************************************************[[ INVENTORY SCREEN PATCH[ [ The inventory screen uses the text mode, but it doesn't have to. This patch [ changes it to use the graphics mode, which reduces flicker, and also allows [ the mouse to be used. You can highlight items by clicking them, and select [ them by double-clicking. Right-clicking will dismiss the screen, same as [ escape.[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: The graphics mode uses a slightly different font[ than the text mode, but it is barely noticeable. This is a property of DOS[ and cannot be modified. [[ This version does not support selection of inventory items, but you can still[ use the mouse buttons to dismiss the screen and return to graphics.[[ This patch also fixes a bug that misplaces the input line when switching to[ text mode. (It is rare to allow input in text mode, but if you want to, the[ input line will now be correctly positioned.)[[ PATCH CODE:            [ ClearInvScreen#message 94 "\xA1\xC1\x13\xA3\xF0\x12\x3C\x01\xB0\x0F\x75\x0D\xE8\x2F\xF6\xC6"            "\x06\xC1\x13" [ \x00#message 95 "\xB0\x8F\xA3\xCD\x03\x50\xB0\x18\x50\x33\xC0\x50\xE8\xFD\x99\x83"            "\xC4\x06\xC3"if (said(39, 94, 36455)){} [ 8E67            [ RestoreScreen#message 96 "\xA0\xF0\x12\x3C\x01\x75\x0A\xA2\xC1\x13\xE8\xBE\xE0\xE8\x01\xDE"            "\xC3\x33\xC0\xE8\xDC\xFF\xE8\x0B\xBE\xE8\xD0\xA0\xE8\xFE\xA3\xC3"if (said(32, 96, 36494)){} [ 8E8E[ modify status command to use patch#message 97 "\xE8\xC2\x5F"if (said(3, 97, 11938)){} [ 2EA2[ modify status command to return to display mode it came from#message 98 "\xE8\x1D\x5F"if (said(3, 98, 12142)){} [ 2F6E[ patch textmode function to fix bug that uses wrong background color#message 99 "\x8A\x3E\xCD\x03\xB8" [ \x00#message 100 "\x06"if (said(7, 99, 34026)){} [ 84EA[ modify text.screen command to add input line if it's in use (also streamlines[ by removing redundant code)#message 101 "\xC6\x06\xC1\x13\x01\xFF\x36\xCB\x03\xFF\x36\xC9\x03\xE8\xF3" [ \x00#message 102 "\x83\xC4\x04\xE8\xD6\x17\xE8\xEB\xC5\xEB\x0F"if (said(27, 101, 27815)){} [ 6CA7[******************************************************************************[******************************************************************************[[ CUSTOM STATUS LINE[[ This patch allows you to designate a logic that will run in place of the [ built in status line update code. The logic will run when ever variables or [ flags that you choose change their value. Use the set.cursor.char function to[ enable or disable the custom status line.[[ SYNTAX:[   [ to enable or modify custom status line parameters:[   set.cursor.char(" lNUM, vA, vB, vC, vD, vE, fA, fB, fC, fD, fE"); [   [   [ to disable the custom status line:[   set.cursor.char(" ");[[ LIMITATIONS/CONSIDERATIONS:[ To enable the custom status line, the message passed to set.cursor.char must [ begin with a space (chosen because it doesn't have any practical value as a [ real cursor character). The rest of the message indicates what logic to run [ (prefix 'l' then number), and up to five variables and/or five flags that, [ when changed, will cause the logic to run. The parameters don't need to be [ separated, but you can include spaces and punctuation to improve readability.[ Note that you cannot use define values; you must use 'v##' and 'f##' format.[[ If you don't designate a logic to run, or if you pass a single space [ character, the custom status line will be disabled instead.[[ Once enabled, you can hide/display the custom status line the same as the [ built-in line, using status.line.on and status.line.off commands.[[ During the main game cycle, if any of your designated variables or flags have[ changed value, AGI will run your designated logic. (This approach means [ your status line doesn't update in each cycle; only when there's a change [ that matters. This reduces screen flicker.) The logic can be as simple or [ as complicated as you wish. See the Power Pack Demo game for some examples [ of custom status lines. [[ When the custom status line is disabled, the built-in status line [ functionality is automatically restored. [[ PATCH CODE:            [ CheckStatus#message 103 "\x80\x3E\xEE\x12\x01\x73\x06\xA0\x0C" [ \x00#message 104 "\xE9\xA5\x72\xBE\x93\x09\x32\xE4\x33\xD2\xAC\x84\xC0\x74\x13\x8B"            "\xC8\xAC\x8B\xD8\x8A\x47\x09\x3A\x04\x74\x04\xB2\x01\x88\x04\x46"            "\xE2\xEF\xBE\x9E\x09\xAC\x84\xC0\x74\x1E\x8B\xC8\xAC\xE8\xEF\xDB"            "\x3A\x04\x74\x04\xB2\x01\x88\x04\x46\xE2\xF1\x80\x3E\xEE\x12\x02"            "\x75\x06\xFF\x0E\xEE\x12\xEB\x07\x80\xFA\x01\x0F\x85\x7B\x72\xE9"            "\x75\x72"            [ DrawCustomStatLine            "\x80\x3E\xD5\x03\x01\x75\x1A\x80\x3E\xEE\x12\x01\x74\x03\xB0\x01"            "\xC3\xA0\xEF\x12\x2A\xE4\x0B\xC0\x74\xF4\x50\xE8\x3B\x82\x83\xC4"            "\x02\x33\xC0\xC3"            [ SetCursorPatch            "\x83\xEC\x02\x56\x3C\x20\x74\x19\xA2\xD3\x03\xEB\x0D\x90\x90\xC6"            "\x06\xEE\x12" [ \x00#message 105 "\xC7\x06\x0D\x04\xFF\xFF\x58\x8B\xE5\x5D\x5F\x5E\xC3\x8B\xF7\x32"            "\xC0\xA2\xEF\x12\xA2\x93\x09\xA2\x9E\x09\xAC\x84\xC0\x74\x72\x0C"            "\x20\x3C\x6C\x74\x56\x3C\x76\x74\x2B\x3C\x66\x75\xED\x8D\x46\xFE"            "\x50\x56\xE8\xB8\x91\x83\xC4\x04\x8B\xF0\xA0\x9E\x09\x3C\x04\x77"            "\xD9\xBF\x9F\x09\x32\xE4\xD0\xE0\x03\xF8\xFF\x06\x9E\x09\x8A\x46"            "\xFE\xAA\xEB\xC6\x8D\x46\xFE\x50\x56\xE8\x91\x91\x83\xC4\x04\x8B"            "\xF0\xA0\x93\x09\x3C\x04\x77\xB2\xBF\x94\x09\x32\xE4\xD0\xE0\x03"            "\xF8\xFF\x06\x93\x09\x8A\x46\xFE\xAA\xEB\x9F\x8D\x46\xFE\x50\x56"            "\xE8\x6A\x91\x83\xC4\x04\x8B\xF0\xBF\xEF\x12\x8A\x46\xFE\xAA\xEB"            "\x89\x83\x3E\xEF\x12\x01\x0F\x82\x61\xFF\xC6\x06\xEE\x12\x02\xE9"            "\x64\xFF"if (said(310, 103, 36526)){} [ 8EAE[ adjust main loop to ignore updates if using custom status line#message 106 "\xE8\x50\x2F\x83\x3E\x3B\x01\x01\x75\x05\xA1\x3F\x01\xEB\x07\x8B"            "\x3E\x25\x07\x8A\x45\x21\xA2\x0F" [ \x00#message 107 "\x80\x3E\xEE\x12\x01\x74\x13\xA0\x0C" [ \x00if (said(35, 106, 230)){} [ 00E6[ patch gameloop to check for/use custom status line function#message 108 "\xE9\x4E\x8D"if (said(3, 108, 349)){} [ 015D[ skip extra lines that reset stored score value after new.room call#message 109 "\xEB\xD8"if (said(2, 109, 329)){} [ 0149[ modify DrawStatusLine to use the custom status line function#message 110 "\xE8\x82\x5F\x0B\xC0"if (said(5, 110, 12165)){} [ 2F85[ patch set.cursor.char command to check for status line input#message 111 "\xE8\x89\x5C"if (said(3, 111, 12962)){} [ 32A2[ reset custom check table#message 112 "" [ \x00if (said(1, 112, 2451, 0)){} [ DS:0993if (said(1, 112, 2462, 0)){} [ DS:099E[******************************************************************************[******************************************************************************[[ POINT AND CLICK MOVEMENT[[ When the mouse is enabled, point-and-click movement control for ego is [ provided automatically. Two path calculation modes are supported - the [ default AGI mode (move diagonally then horizontal/vertical) or a direct line [ mode.[[ SYNTAX: [   [ to enable point-and-click:[   set(f17);[[   [ to disable point-and-click:[   reset(f17);[[   [ to change path mode:[   step.size(ego, vMODE*);[[   [ to stop ego during point-and-click movement:[   vDIR* = 0;[   set.dir(ego, vDIR); [ [   * use a value of -1 for vMODE to set direct line mode;[     use a value of -2 for vMODE to set the default AGI mode[[   **you can use any variable for vMODE or vDIR[[ LIMITATIONS/CONSIDERATIONS: Flag f17 is designated reserved with this patch. [ You can't use that flag for anything else.[[ The AGI default path mode will move ego diagonally until it is horizontally[ or vertically aligned with the target location. You can switch to the direct [ line mode by using the step.size command on ego with a value of -1. To reset [ back to AGI default mode use a value of -2.[ [ Pressing a direction key while ego is moving will override the point-and-[ click motion. Normally, set.dir can't be used to control ego direction, but [ you can programmatically cancel point-and-click movement by using set.dir[ command on ego as indicated. [[ PATCH CODE:            [ UpdateMovementPatch#message 113 "\x50\x8B\x1E\x25\x07\x3B\xF3\x74\x06\x58\x3C\x02\xE9\xDD\x75\x3C"            "\xFF\x75\x11\xB0\x11\xE8\xDB\xDA\x22\x06\x3B\x01\x22\x06\xF6\x12"            "\x3C\x01\x74\x07\x32\xC0\xA2\xF6\x12\xEB\xDE\x58\x56\xE8\x25\x02"            "\xE9\xA4\x75"            [ ObjReachedDestPatch            "\x8B\x76\x08\x8B\x1E\x25\x07\x3B\xF3\x74\x03\xE9\x3C\x85\x80\x3E"            "\xF6\x12\x01\x75\xF6\x5D\x5F\x5E\xC3"            [ CalcDirPatch            "\x3B\x36\x25\x07\x75\x1E\x80\x3E\xF6\x12\x01\x75\x17\x80\x7C\x21"            "\x01\x73\x15\x33\xC0\xA2\xF6\x12\xA2\xDD\x01\xA2\xE6\x01\xA2\x3F"            "\x01\xA2\x3F\x01\x5D\x5F\x5E\xC3\x80\x3E\xDD\x01\x01\x75\xEF\x80"            "\x3E\xE8\x01\x01\x75\x17\xA1\xDE\x01\x2B\x06\xE0\x01\xA3\xDE\x01"            "\x03\x06\xE2\x01\x3B\x06\xE0\x01\x7F\x03\xA3\xDE\x01\x83\x3E\xDE"            "\x01\x01\x7C\x1B\x80\x3E\xE6\x01\x01\x74\x0B\xA0\xE4\x01\xD0\xE0"            "\xF6\xD8\x04\x05\xEB\x22\xA0\xE5\x01\xD0\xE0\x04\x03\xEB\x19\x8A"            "\x26\xE4\x01\xFE\xC4\xA0\xE5\x01\xFE\xC0\x32\xC4\xF6\xD8\xFE\xCC"            "\xD0\xE4\xF6\xDC\x02\xC4\x04\x06\x88\x44\x21\x50\xA1\xDE\x01\x03"            "\x06\xE0\x01\x3B\x06\xE0\x01\x7E\x04\x2B\x06\xE2\x01\xA3\xDE\x01"            "\x58\xE9\x7A\xFF"            [ SetPath            "\x33\xDB\x89\x1E\xDD\x01\x80\x3E\xF7\x12\x01\x74\x01\xC3\xB3\x01"            "\xA1\xAC\x09\x2B\x45\x03\x7F\x07\x75\x01\xC3\xF7\xD8\xF7\xDB\x88"            "\x1E\xE4\x01\x8B\xD0\x33\xDB\xB3\x01\xA1\xAE\x09\x2B\x45\x05\x7F"            "\x07\x75\x01\xC3\xF7\xD8\xF7\xDB\x88\x1E\xE5\x01\x8B\xF0\x3B\xC2"            "\x74\x70\xC6\x06\xDD\x01\x01\x77\x28\x8B\xC2\xF7\xD8\xA3\xDE\x01"            "\xF7\xD8\xD1\xE0\xA3\xE2\x01\x8B\xD0\x8B\xC6\xD1\xE0\xF7\xD8\x03"            "\xC2\xA3\xE0\x01\x33\xC0\xA2\xE6\x01\xA0\xE4\x01\x48\xF6\xD8\xEB"            "\x35\xF7\xD8\xA3\xDE\x01\xF7\xD8\xD1\xE0\xA3\xE2\x01\x8B\xF0\x8B"            "\xC2\xD1\xE0\xF7\xD8\x03\xC6\xA3\xE0\x01\x33\xC0\x40\xA2\xE6\x01"            "\xD1\xEE\x8B\xC2\xD1\xE0\x3B\xC6\x72\x08\xA0\xE4\x01\x48\xF6\xD8"            "\xEB\x04\xB0\x05\x28\xD8\xD0\xE8\xA2\xE7\x01\xA1\xE0\x01\x01\x06"            "\xDE\x01\xC3"            [ CheckMouseMove            "\x0B\xC0\x74\x50\x50\x8B\xF0\x8B\x44\x02\x3D\x01\x01\x75\x3D\xB0"            "\x11\xE8\x3C\xD9\x22\x06\x3B\x01\x3C\x01\x75\x30\xA0\xD6\x01\x32"            "\xE4\x2B\x06\x2E\x11\x83\xF8\x01\x7C\x22\x3C\xAF\x77\x1E\xA3\xAE"            "\x09\xA0\xD5\x01\x32\xE4\x8B\x3E\x25\x07\x8B\x5D\x1A\xD1\xEB\x2B"            "\xC3\xA3\xAC\x09\xB0\x01\xA2\xF6\x12\xE8\x01\xFF\x58\x50\xE8\xE2"            "\xAB\x83\xC4\x02\xC3"            [ SetDirPatch            "\x88\x45\x21\x3B\x3E\x25\x07\x75\x0D\x3C\x01\x73\x09\xA2\xF6\x12"            "\xA2\x3F\x01\xA2\x3F\x01\xC3"            [ AutoLoopPatch            "\x3B\x36\x25\x07\x75\x17\x80\x3E\xF6\x12\x01\x75\x10\x80\x3E\xDD"            "\x01\x01\x75\x09\xA0\xE7\x01\x88\x46\xFF\xE9\x21\x73\x8A\x44\x21"            "\xE9\x10\x73"            [ NewRoomPatch            "\x88\x26\xF6\x12\xE9\x7E\xD8"            [ StepSizePatch            "\x3B\x3E\x25\x07\x75\x12\x3C\xFF\x75\x04\xB0\x01\xEB\x06\x3C\xFE"            "\x75\x06\x32\xC0\xA2\xF7\x12\xC3\x88\x45\x1E\xC3"            [ MouseMoveCalc            "\x56\x57\x55\x8B\xEC\x8B\x76\x08\x8A\x44\x1E\x2A\xE4\x50\xFF\x36"            "\xAE\x09\xFF\x36\xAC\x09\xE9\xE7\x82"if (said(622, 113, 36836)){} [ 8FE4[ initialize data used by custom patch function#message 114 "\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF"if (said(12, 114, 477, 0)){} [ DS:01DD[ patch UpdateMovement to check for mousemove#message 115 "\xE9\x14\x8A"if (said(3, 115, 1485)){} [ 05CD[ second patch to UpdateMovement to use custom path loop#message 116 "\xE9\xCD\x8C"if (said(3, 116, 1315)){} [ 0523[ patch ObjReachDest to check for mousemove#message 117 "\xE9\xB6\x7A"if (said(3, 117, 5470)){} [ 155E[ patch CalcMoveDir to use custom path calculation#message 118 "\xE9\xD8\x7A"if (said(3, 118, 5461)){} [ 1555[ patch UpdateMovement to check for mousemove#message 119 "\xE8\x38\x61"if (said(3, 119, 12364)){} [ 304C[ second patch to UpdateMovement to use custom path loop#message 120 "\x32\xC0\xA2\xF6\x12\x8B\x44\x02\x3B\x06\x3F\x01\x75\x02\x2B\xC0"if (said(16, 120, 12402)){} [ 3072[ modify stepsize to enable/disable custom path#message 121 "\xE8\xF1\x2B"if (said(3, 121, 26153)){} [ 6629[ patch SetDir to stop an in-progress mousemove#message 122 "\xE8\x30\x2B"if (said(3, 122, 26281)){} [ 66A9[ patch NewRoom to cancel mousemoves#message 123 "\xE8\xDE\x7A"if (said(3, 123, 5941)){} [ 1735[******************************************************************************[******************************************************************************[[ WANDER COMMAND BUG FIX[[ The wander command appears to have a minor bug in it. When the distance [ counter reaches zero, a new direction is chosen randomly, but the counter [ gets set to 255, instead of choosing a new counter. A new counter is only [ chosen if the object stops (due to hitting an obstacle) AND the current [ counter is less than six. The effect of this bug is that objects tend to go [ in straight lines much further than the desired maximum of 51, and mostly [ change direction only when hitting an obstacle. This is usually not [ noticeable, because most rooms don't have that much space available for [ objects to wander. This patch fixes that bug, so objects will choose a new [ distance counter between 6 and 51 any time a new direction is chosen, as it [ appears that was the original intent. [[ SYNTAX: n/a - patch does not modify any command syntax[ [ LIMITATIONS/CONSIDERATIONS: If you would rather use the original algorithm [ for wandering, just comment out this patch.[[ PATCH CODE:#message 124 "\xC6\x45\x22\x01\xC6\x45\x27" [ \x00#message 125 "\xC3"if (said(9, 124, 37458)){} [ 9252[ modify wander command to call patch#message 126 "\xE8\x08\x2D\x90"if (said(4, 126, 25927)){} [ 6547[ inline patch to correctly assign random direction/distance#message 127 "\x0B\xC0\x74\x0A\xFE\x4C\x27"if (said(7, 127, 14608)){} [ 3910[******************************************************************************[******************************************************************************[[ FOUR CHANNEL SOUND[  [ The PC version of AGI will only play single channel sound through the PC [ speaker. This patch will automatically check for a Sound Blaster (or [ compatible) sound board and enable all three sound channels if one is [ present. The noise channel is also supported.[ [ SYNTAX: [   [ to enable four channel sound:[   set(f18);[   [ to disable four channel sound:[   reset(f18);[[   [ to change channel envelopes (instruments):[   set.key(-2, vCHANNEL, vINSTRUMENT*); [[   [ to set a custom envelope for a sound channel:[   set.key(-3, vCHANNEL, vENVDATA**);[[   * The compiler expects the third argument to be a controller number so pass[     INSTRUMENT variable as a number with the 'c' prefix[[  ** The compiler expects the third argument to be a controller number so pass [     vENVDATA as a number with the 'c' prefix[[ LIMITATIONS/CONSIDERATIONS: Flag f18 is reserved for use by this patch to [ control number of sound channels. It should not be used for anything else. [[ If a compatible sound board is not detected, the patch will play single [ channel sound only, regardless of the value of f18. The patch will set [ reserved variable v22 to 3 at startup and when restarting if a sound board [ is detected. You can check this variable to know if the sound board was [ detected (v22=3) or not (v22=1).[[ In addition to playing all sound channels, volume control is also supported [ (unlike the normal PC mode which ignores volume information). Individual [ notes in a sound file are limited to a four-bit (0-15) volume value, but [ since the sound card uses six bits, values for the master volume level [ (reserved variable v23) can be from 0 (no attenuation, maximum volume) to [ 63 (maximum attenuation, muted sound). This gives you much finer control [ over the volume of sounds being played.[[ The sounds are generated by the sound card's frequency modulation (FM) chip. [ You can program 'instruments' by changing a channel's envelope registers. [ The default envelope for the music channels is the one provided in the [ original AGISB hack by Anders M. Olsson (AGISB). The noise channel defaults [ (both tone and white noise) are best estimates to match original AGI sound.[[ A set of 127 additional 'instruments' that roughly correspond to standard [ MIDI instruments is also included. You can change the instrument for each [ channel independently by passing the instrument number (0-127 for standard [ MIDI instruments, 128 to restore the default) to the set.key command with[ -2 as the first argument. For the noise channels use a channel value of 3 to [ change the white noise instrument, and 4 to change the tone instrument. See [ the Power Pack demo game for a complete list of all 128 instruments that are [ available.[ [ Keep in mind that the sound is generated by an FM chip, not using sampled [ sounds such as in MIDI sound boards. So the results aren't going to sound [ much like their MIDI counterparts. But through experimentation, you can find [ instrument values that do provide for very nice playback of sounds, with [ lots of variety.[ [ You can also set the envelope data to a custom value by passing a message [ string (by variable) of 11 2-digit byte codes to the set.key command with -3 [ as the first argument. You need to have a good understanding of FM chip [ details if you plan to use this option. See the Power Pack demo game for [ additional information on how to use this option, and for links to some [ resources for working with sound card FM chips.[[ PATCH CODE:            [ WriteFM#message 128 "\x50\x51\x52\xBA\x88\x03\x86\xE0\xEE\xB1\x06\xEC\xFE\xC9\x75\xFB"            "\x42\x8A\xC4\xEE\x4A\xB1\x23\xEC\xFE\xC9\x75\xFB\x5A\x59\x58\xC3"            [ DetectFM            "\x56\x33\xC0\xB4\x01\xE8\xD8\xFF\xB8\x60\x04\xE8\xD2\xFF\xB8\x80"            "\x04\xE8\xCC\xFF\xBA\x88\x03\xEC\x80\xE0\xE0\x50\xB8\xFF\x02\xE8"            "\xBE\xFF\xB8\x21\x04\xE8\xB8\xFF\xBA\x88\x03\x33\xC9\x49\x74\x05"            "\xEC\x0A\xC0\x79\xF8\x59\x8A\xE8\x80\xE5\xE0\xB8\x60\x04\xE8\x9F"            "\xFF\xB8\x80\x04\xE8\x99\xFF\x33\xDB\x80\xF9\x01\x73\x06\x80\xFD"            "\xC0\x75\x01\x43\x88\x1E\xE6\x12\xD1\xE3\x43\x89\xD8\x33\xDB\x88"            "\x47\x1F\x3C\x03\x75\x2E\xB0\x91\x50\xE8\x22\x8D\x83\xC4\x02\x8B"            "\xF0\xBF\x55\x96\xB9\xA1\x05\x06\x0E\x07\xAD\x90\xE8\xE8\xF3\xAA"            "\xE2\xF8\x07\x33\xC0\x90\xBB\x41\x13\x89\x07\x89\x47\x02\x89\x47"            "\x04\x89\x47\x06\x58\xC3"if (said(182, 128, 37467)){} [ 925B[ use patch command to run the detection function#message 129 "\x7B\x92"if (said(2, 129, 1411, 0)){} [ DS:0583unblock();[ restore unblock#message 130 "\x06\x71"if (said(2, 130, 1411, 0)){} [ DS:0583[ now add the rest of the 3-channel patches            [ NoteOff#message 131 "\x8B\x87\x41\x13\x50\x8A\xE3\xD0\xEC\x80\xC4\xA0\xE8\xD1\xFF\x58"            "\x8A\xC4\x8A\xE3\xD0\xEC\x80\xC4\xB0\xE8\xC4\xFF\xC3"            [ SoundStopPC            "\x53\x33\xDB\x33\xC0\x89\x87\x41\x13\xE8\xD7\xFF\x80\xC3\x02\x33"            "\xC0\x89\x87\x41\x13\xE8\xCB\xFF\x80\xC3\x02\x33\xC0\x89\x87\x41"            "\x13\xE8\xBF\xFF\x80\xC3\x02\x33\xC0\x89\x87\x41\x13\xE8\xB3\xFF"            "\x5B\x33\xC0\xA3\x11\x10\xA0\x23\x10\xE8\xEF\xD7\xC3"            [ NoiseOn            "\x56\xF6\xC6\x04\x74\x1A\x80\x3E\x49\x13\x01\x74\x24\xC6\x06\x49"            "\x13\x01\xBE\x3F\x96\x1E\x0E\x1F\xB1\x03\xE8\x25\x01\x1F\xEB\x11"            "\x80\x3E\x49\x13\x02\x74\x0A\xC6\x06\x49\x13\x02\xBE\x4A\x96\xEB"            "\xE4\x5E\x80\xE6\x03\x80\xFE\x03\x75\x05\xA1\x45\x13\xEB\x0E\x8A"            "\xE6\x80\xC4\x05\xD0\xE4\xD0\xE4\x80\xC4\x01\xB0\x80\x89\x87\x41"            "\x13\xB3\xA3\x90\xC3"            [ NoteOn            "\xE8\x4E\xFF\x80\xFB\x06\x75\x05\xE8\xA0\xFF\xEB\x42\x53\x80\xE6"            "\x0F\x8A\xDE\x32\xF6\x80\xE2\x3F\xB1\x04\xD3\xE2\x03\xDA\x0B\xDB"            "\x75\x04\x33\xC0\xEB\x1F\xB1\x02\x81\xFB\x3F\x03\x7D\x09\xFE\xC1"            "\xD1\xE3\x80\xF9\x07\x75\xF1\xB8\xE5\xF2\xBA\x08" [ \x00#message 132 "\xF7\xF3\xD0\xE1\xD0\xE1\x0A\xE1\x5B\x89\x87\x41\x13\xD1\xEB\x80"            "\xC3\xA0\x80\xCC\x20\x50\x8A\xE3\xE8\xD9\xFE\x58\x8A\xC4\x80\xC3"            "\x10\x8A\xE3\xE8\xCE\xFE\xC3"            [ SoundVolume            "\x53\x8A\x87\x4A\x18\xF6\xD8\x04\x0F\x50\x33\xDB\x8A\x47\x20\x5B"            "\x3C\x3F\x73\x06\xF6\xD8\x04\x3F\xEB\x02\x33\xC0\xF6\xE3\xB3\x0F"            "\xF6\xF3\x5B\x3C\x01\x73\x0D\x8A\xE3\xD0\xEC\x80\xC4\xB0\x32\xC0"            "\xE8\x9A\xFE\xC3\x8B\xC8\x53\x8A\xE3\xD0\xEC\x50\x8A\xC4\xB3\x0B"            "\xF6\xE3\x8B\xD8\x81\xC3\x21\x96\x2E\x8A\x07\x50\x24\x3F\xF6\xD8"            "\x04\x3F\xF6\xE1\xB1\x3F\xF6\xF1\xF6\xD8\x04\x3F\x59\x80\xE1\xC0"            "\x08\xC1\x58\x80\xFC\x03\x75\x03\x80\xC4\x05\x8A\xC1\x80\xC4\x43"            "\xE8\x5A\xFE\x5B\xC3"            [ SendChannelData            "\xAC\x80\xFC\xC0\x74\x08\x80\xF9\x03\x75\x03\x80\xC4\x05\x02\xE1"            "\xE8\x45\xFE\xC3"            [ SetOneInstrument            "\xB4\x20\xE8\xE7\xFF\xB4\x23\xE8\xE2\xFF\xB4\x40\xE8\xDD\xFF\xB4"            "\x43\xE8\xD8\xFF\xB4\x60\xE8\xD3\xFF\xB4\x63\xE8\xCE\xFF\xB4\x80"            "\xE8\xC9\xFF\xB4\x83\xE8\xC4\xFF\xB4\xE0\xE8\xBF\xFF\xB4\xE3\xE8"            "\xBA\xFF\xB4\xC0\xE8\xB5\xFF\xC3"            [ SetAllInstruments            "\x80\x3E\xE6\x12\x01\x75\x1B\x56\xBE\x1E\x96\x1E\x0E\x1F\xFC\x32"            "\xC9\xE8\xB4\xFF\xFE\xC1\x80\xF9\x03\x75\xF6\x1F\xC6\x06\x49\x13"            "\xFF\x5E\xC3"            [ InitSound            "\xB1\x01\x32\xC0\x8A\xE1\xE8\xE0\xFD\xFE\xC1\x80\xF9\xF5\x76\xF2"            "\xB8\x20\x01\xE8\xD3\xFD\xB8\x20\xBD\xE8\xCD\xFD\xE8\xBE\xFF\xC3"            [ CmdSoundPatch            "\x56\x80\x3E\xE6\x12\x01\x75\x78\xB0\x12\xE8\x38\xD6\x3B\x06\xE7"            "\x12\x74\x6D\xA2\xE7\x12\x1E\x0E\x1F\x0B\xC0\x74\x34\xB8\x8A\x1C"            "\xA3\x0C\x76\xB8\xA3\x1C\xA3\xF3\x75\xB8\x4C\x1D\xA3\xDC\x75\xB8"            "\xED\x1D\xA3\x9F\x75\xB8\xC8\x1D\xA3\xC4\x75\xB8\xAC\x1D\xA3\xE0"            "\x75\xB0\x08\xA2\x54\x75\xB0\x04\xA2\x59\x75\x1F\xE8\x91\xFF\xEB"            "\x2F\xB8\x07" [ \x00#message 133 "\xA3\x0C\x76\xB8\x20" [ \x00#message 134 "\xA3\xF3\x75\xB8\x56" [ \x00#message 135 "\xA3\xDC\x75\xB8\x08\x20\xA3\x9F\x75\xB8\xE3\x1F\xA3\xC4\x75\xB8"            "\xC7\x1F\xA3\xE0\x75\xB0\x02\xA2\x54\x75\xB0\x01\xA2\x59\x75\x1F"            "\x5E\x8B\xDE\x46\xC3"            [ SetKeyPatch            "\x8B\x76\x08\x80\x3C\xFD\x74\x3C\x80\x3C\xFE\x0F\x85\x5A\xAF\xAC"            "\xAD\x32\xFF\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x3C\x05\x73"            "\x5D\x80\xFC\x82\x77\x58\x6A\x0B\x8A\xD8\xB0\x0B\xF6\xE4\x05\x55"            "\x96\x50\x0E\xB0\x0B\xF6\xE3\x05\x1E\x96\x50\x0E\xE8\x37\xBE\x83"            "\xC4\x0A\xEB\x37\xAC\xAD\x32\xFF\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A"            "\x67\x09\x3C\x05\x73\x28\x56\x50\x8A\xC4\x32\xE4\x50\xE8\x92\x8A"            "\x83\xC4\x02\x8B\xF0\x58\xB1\x0B\xF6\xE1\x05\x1E\x96\x8B\xF8\x06"            "\x0E\x07\xAD\xE8\x55\xF1\xAA\xE2\xF9\x07\x5E\xE8\xBA\xFE\x8B\xC6"            "\x8B\xE5\x5D\x5F\x5E\xC3"            [ SndVectSetFlag            "\x33\xC0\xA3\x11\x10\xA0\x23\x10\xE8\x1B\xD5\xC3"            [ 1ChannelVolPatch            "\x80\xBF\x4A\x18\x0F\x75\x06\xE4\x61\x24\xFC\xE6\x61\x8A\x87\x4A"            "\x18\x3C\x0F\x74\x46\x8B\xBF\x5A\x18\x83\xFF\xFF\x74\x3D\x53\x8B"            "\x9F\x52\x18\x8A\x21\x5B\x80\xFC\x80\x75\x10\xC7\x87\x4A\x18\xFF"            "\xFF\x8A\x87\x4B\x18\x88\x87\x4A\x18\xEB\x20\xFF\x87\x5A\x18\x02"            "\xC4\x79\x02\x32\xC0\x3C\x0F\x7E\x02\xB0\x0F\x88\x87\x4B\x18\x24"            "\x0F\x02\x06\x20" [ \x00#message 136 "\x3C\x0F\x7E\x02\xB0\x0F\xB4\xF0\x22\xA7\x14\x14\x0A\xC4\xE6\xC0"            "\xC3"            [ SetChannelCount            "\xB0\x01\x80\x3E\xE6\x12\x01\x74\x02\x04\x02\xA2\x1F" [ \x00#message 137 "\xC3"if (said(931, 131, 37499)){} [ 927B[ modify sound command to use the patch#message 138 "\xE8\x3E\x4B"if (said(3, 138, 18769)){} [ 4951[ modify setkey command to accept instrument changes#message 139 "\xE9\x97\x50"if (said(3, 139, 17533)){} [ 447D[ modify InitNewGame to use channelcount patch#message 140 "\xE8\x9B\x86\x90\x90"if (said(5, 140, 3953)){} [ 0F71[ patch SoundNew to reset attenuation and dissolve#message 141 "\xB8\x62\x18\xBF\x52\x18\xB1\x04\xF3\xAB\xB8\xFF\xFF\xBF\x5A\x18"            "\xB1\x04\xF3\xAB\xBF\x02\x14\xB1\x04\xF3\xAB\xC6\x06\x12\x14\x02"            "\xC6\x06\x14\x14\x01\x90\x90"if (said(39, 141, 30005)){} [ 7535[ modify SoundVector to include volume calls#message 142 "\x53\x51\x52\x56\x57\xB0\x09\xE8\x57\xF5\x0B\xC0\x74\x6E\x33\xDB"            "\x83\xBF\x02\x14\x01\x73\x0B\x83\xC3\x02\x3B\x1E\x12\x14\x7C\xF0"            "\xEB\x53\xFF\x8F\xFA\x13\x74\x05\xE8\x08\x20\xEB\x3F\x33\xC0\x89"            "\x87\x5A\x18\x8B\xB7\xF2\x13\xAD\x3D\xFF\xFF\x75\x15\xFE\x0E\x14"            "\x14\x33\xC0\x89\x87\x02\x14\xB0\x0F\x89\x87\x4A\x18\xE8\xE3\x1F"            "\xEB\xC5\x89\x87\xFA\x13\xAD\x8B\xD0\xAC\x24\x0F\x88\x87\x4A\x18"            "\x89\xB7\xF2\x13\x53\xE8\x56" [ \x00#message 143 "\x5B\xE8\xC7\x1F\x83\xC3\x02\x3B\x1E\x12\x14\x7C\x9B\x80\x3E\x14"            "\x14\x01\x73\x06\xE8\x20" [ \x00#message 144 "\xE8\xA5\x1F\x5F\x5E\x5A\x59\x5B\xC3"if (said(136, 142, 30070)){} [ 7576[ set default instrument dataset.key(-2, 0, c128);set.key(-2, 1, c128);set.key(-2, 2, c128);set.key(-2, 3, c129);set.key(-2, 4, c130);[ instrument data#message 145 "02023000F1F5840400000082040500F1A40C3500020242040805F1F401C4010002"            "04420106A1F4214301010082442000F3F3030300010004042003A1A20102010100"            "02C410087162E1E203030008080707F7F7070703030688842007F1F10303000000"            "0C640707F7FE072303010002043F0100F50016000002C2C22000A1A12525000006"            "8C040D0087F5812D03000402042100F1A715160200088C44200323438F1E000004"            "8202030388411C110003048C440F0087A4871800010662C41F0016A5142502030E"            "84421C00FF8124830003000442070385A5872201000604C4070387878734030306"            "04821A034742878300000604420F03FB41011700030004C2000347438783010000"            "02821000F4F5F10401020202020D00F3F4410300020284CC1100F26525D5020102"            "02C21003F4F4F1F1000002C2042000F1F5F17400010208822F00F1F47474020308"            "0282030075A1A15300030882821002A3F3F3F3000004E2620000F1F2F1A1000000"            "C2420000F973F19300020002C22000F1F3F1F30002002222050681F11111000000"            "42021700F5F3030301000402C2200051FF5112000200C8022000F4F104B6010108"            "4C020305F5F5D30501010404420D038C530B5302030EA2101700AE8F190501010E"            "04440505F5F5051501010408140505F5F5050501010408440500F5F50517000100"            "08440503F5F24C0503010CA4A41700F5F503030000060202100013A31103000000"            "02C2200051A50102000200024209093151011100000002422008F1F20102000000"            "82440808F1F1010201000084C4200811A101220000000844200811A10152000000"            "0244200811A101A20000000282000055D4040400000204C21C0055FF0505000200"            "0242200345F105050002000244000324280424020106C44211085A712424010200"            "02480E005454212302020602480E0A5451211402000A02440006F6F40704010004"            "0444100CF4FE030200000C02040800AAF51A0300020A04021004F4F40404000004"            "02020404F4F4040400000402020400F4F80404000204C2C21705FFFF0105010004"            "0202040454A804110001040204130BF1F1116102010844481703F1311122000100"            "02423F0300F1000500020444C4200355F1F10500000202423F01FFFF0507000000"            "42442103A133211302000044C4200333F1F12500000204020108F1F10101010100"            "02C43F0500A1005400000002040101F122080102010004020808F1F11101020102"            "0402080AE2F1010400000002021703F1F301810000000202000381F38101000000"            "82021000F1F103010003000442200011A101A20000000202000081818181000000"            "0202080881F101010000000844200811A101A20000000202200081818181000000"            "02020800448183830000000844200811A101A200000002021000F18141C1000000"            "44A83200D2E2D2B2020202E2041000F491F5F102000082C410001181F2F2010002"            "02020010F1FF010100030E0C680200FDF1C411000002C8441C0392825292020000"            "C4040000225183620101004242200355F1F1F1010000C2C23000F1F1F1F1000000"            "E2E83000F1F1F1F10001002CA83000F1D1F1F6000306E2EC3000F172F174000000"            "E4E83C007B553315030102F02C05002AF54F05010004183C3100336C0378010004"            "C2C432047443159501020E04421003743105130003047CF03B041A7C9E7C02020A"            "38481B0545F59F0503010A14140505F5F1050401000414140505F5F50505010104"            "1414050345F5430501010414B00F057CF5DD050301040802110BF5F10401000000"            "02020003F1F1010500000002023F0061F1010601000002020000F12F0107020204"            "02020E08F1F1010300000802020010F1F1010200000E02020010F1FF010100030E"            "02083F00003F001A00000002883F00F1550131000200828200081111010100000E"            "828200081111010100000E02020000FFF5150700000E22215909FFFF030F020000"            "2F200000FFFF0F0F00030E22242100C0C00C0C000000"[ 68 bytes for dissolve data#message 146 "\xFE\xFD\xFE\xFF" [ \x00#message 147 "" [ \x00#message 148 "\x01\x01\x01\x01\x02\x02\x02\x02\x02\x02\x02\x02\x03\x03\x03\x03"            "\x03\x03\x03\x04\x04\x04\x04\x05\x05\x05\x05\x06\x06\x06\x06\x06"            "\x07\x07\x07\x07\x08\x08\x08\x08\x09\x09\x09\x09\x0A\x0A\x0A\x0A"            "\x0B\x0B\x0B\x0B\x0B\x0B\x0C\x0C\x0C\x0C\x0C\x0C\x0D\x80"if (said(68, 146, 6242, 0)){} [ DS:1862[******************************************************************************[******************************************************************************[[ SAVE/RESTORE/RESTART SUPPORT[[ This patch provides support for save/restore/restart functions for all of [ the patches in this power pack. [[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: Games that are saved by the power pack include a [ version marker that ensures restored games are compatible with the AGI [ version and power pack version they were saved from. If you try to restore a[ game from the wrong version, AGI will raise an error and quit. [[ The patch restores the status bar state (normal AGI doesn't). It also fixes [ a bug that didn't correctly reload a trace logic, if one was loaded when the [ game was saved.[[ After a restart, the interpreter version (as an index value, i.e. 1 = v2.089,[ 2 = 2.272, etc.) is returned in v19 (errorParameter) in case your code needs[ to know. For this interpreter version, the index value is:[[   version 2.272 --> index == 2[[ PATCH CODE:            [ SavePatch#message 149 "\xB8\x02" [ \x00#message 150 "\x50\xC7\x46\xFE\x10\x11\x8D\x46\xFE\x50\xFF\xB6\x34\xFF\xE8\x57"            "\x8A\x83\xC4\x06\x0B\xC0\x74\x7A\xA0\xD5\x03\xA2\xEC\x12\xA0\x3A"            "\x18\xA2\xED\x12\xA0\x30\x18\x8A\x26\x32\x18\xA3\xE8\x12\xA0\x3E"            "\x18\x8A\x26\x42\x18\xA3\xEA\x12\x32\xE4\xB0\x15\x50\xB8\xE7\x12"            "\x50\xFF\xB6\x34\xFF\xE8\x20\x8A\x83\xC4\x06\x0B\xC0\x74\x43\xB0"            "\xA0\x50\xB8\x49\x01\x50\xFF\xB6\x34\xFF\xE8\x0B\x8A\x83\xC4\x06"            "\x0B\xC0\x74\x2E\xB0\x22\x50\xB8\x93\x09\x50\xFF\xB6\x34\xFF\xE8"            "\xF6\x89\x83\xC4\x06\x0B\xC0\x74\x19\x1E\x0E\x1F\xB0\xC0\x50\xB8"            "\xA9\xAE\x50\xFF\xB6\x34\xFF\xE8\x1B\xB9\x83\xC4\x06\x1F\x0B\xC0"            "\x75\x03\xE9\x96\x89\xFF\xB6\x34\xFF\xE9\xAD\x89"            [ RestorePatch            "\x8D\x46\xFE\x50\xFF\xB6\x34\xFF\xE8\xE0\x87\x83\xC4\x04\x0B\xC0"            "\x74\x5C\x81\x7E\xFE\x10\x11\x75\x55\xB8\xE7\x12\x50\xFF\xB6\x34"            "\xFF\xE8\xC7\x87\x83\xC4\x04\x0B\xC0\x74\x43\xA0\xEC\x12\xA2\xD5"            "\x03\xB8\x49\x01\x50\xFF\xB6\x34\xFF\xE8\xAF\x87\x83\xC4\x04\x0B"            "\xC0\x74\x2B\xB8\x93\x09\x50\xFF\xB6\x34\xFF\xE8\x9D\x87\x83\xC4"            "\x04\x0B\xC0\x74\x19\x1E\x0E\x1F\xB0\xC0\x50\xB8\xA9\xAE\x50\xFF"            "\xB6\x34\xFF\xE8\x80\xB8\x83\xC4\x06\x1F\x0B\xC0\x75\x03\xE9\x26"            "\x87\xE8\x87\xE7\x33\xC0\xE8\xB9\xAC\x83\x3E\xF2\x12\x01\x75\x03"            "\xE8\x68\xEF\x33\xC0\xA3\x3A\x18\xA0\xA9\x09\x50\xA0\xAA\x09\x50"            "\xA0\xAB\x09\x50\xE8\x60\xEB\x83\xC4\x06\xA0\xDC\x01\x2E\xA2\x75"            "\x79\x2C\x04\xF6\xD8\xB4\x14\xF6\xE4\x2E\xA2\xA0\x74\xA1\xE8\x12"            "\xA2\x30\x18\x88\x26\x32\x18\xA1\xEA\x12\xA2\x3E\x18\x88\x26\x42"            "\x18\xFF\xB6\x34\xFF\xE9\xEA\x86"            [ RestartPatch            "\x2B\xC0\x50\xB0\x15\x50\xB8\xE7\x12\x50\xE8\x4E\xB6\x83\xC4\x04"            "\x2B\xC0\xB0\xA0\x50\xB8\x49\x01\x50\xE8\x3F\xB6\x83\xC4\x04\x2B"            "\xC0\xB0\x22\x50\xB8\x93\x09\x50\xE8\x30\xB6\x83\xC4\x06\xB0\x0D"            "\x32\xE4\xCD\x10\xE8\x02\x11\xE8\xF9\xE6\x33\xC0\xA3\xC1\x13\xA3"            "\xD5\x03\xE8\x25\xAC\xB0\x04\xA2\xA9\x09\x50\x33\xC0\x50\xB0\x0F"            "\xA2\xAB\x09\x50\xE8\xD8\xEA\x83\xC4\x06\x33\xC0\xB0\x03\xA2\xDC"            "\x01\x2E\xA2\x75\x79\xB0\x14\x2E\xA2\xA0\x74\x33\xC0\xA2\xB0\x09"            "\xA3\x38\x18\xA3\x3A\x18\xC6\x06\x3E\x18\x02\xC6\x06\x42\x18\x25"            "\xC6\x06\x30\x18\x01\xC6\x06\x32\x18\x0F\xC3"            [ IntVersionPatch            "\x32\xFF\xB3\x12\xB0\x02\x88\x47\x09\x32\xE4\xB0\x06\xC3"            [ SlotMouseHandler            "\x3D\x01\x02\x74\x03\x3D\x01\x04\x0F\x84\x1B\xE0\x3D\x01\x03\x74"            "\x08\x3D\x01\x01\x74\x03\xE9\xC4\xDF\x8B\xC8\x33\xFF\xA0\xD5\x01"            "\x32\xE4\xD1\xE8\x80\x3E\xFB\x12\x01\x74\x02\xD1\xE8\x3B\x06\x8B"            "\x0B\x72\xE3\x3B\x06\x8F\x0B\x77\xDD\xA0\xD6\x01\xC1\xE8\x03\x2B"            "\x86\x06\xFE\x3C\xFF\x7E\xCF\x8B\x9E\x0C\xFE\x4B\x39\xD8\x7F\xC6"            "\x81\xF9\x01\x03\x0F\x84\x9B\xDF\x50\x8B\x86\x0E\xFE\x03\x86\x06"            "\xFE\x50\xE8\x1C\xE1\x83\xC4\x02\x58\xE9\x62\xDF"            [ StateReloadPatch            "\xE8\xD5\x74\xA0\xED\x12\x3C\x01\x72\x0C\xA2\x3A\x18\x30\xE4\x50"            "\xE8\xDA\x71\x83\xC4\x02\xC3"if (said(643, 149, 39926)){} [ 9BF6[ patch savegame to use the patch#message 151 "\xE9\xB5\x75"if (said(3, 151, 9790)){} [ 263E[ patch restoregame to use the patch#message 152 "\xE9\x4F\x78"if (said(3, 152, 9283)){} [ 2443[ patch resartegame to use the patch#message 153 "\xE8\xB0\x7A"if (said(3, 153, 8874)){} [ 22AA[ patch StateReload to use the patch#message 154 "\xE8\x33\x3F"if (said(3, 154, 24364)){} [ 5F2C[ pass interpreter version during reset#message 155 "\xE8\x1D\x7B"if (said(3, 155, 8904)){} [ 22C8[ remove unnecessary call to DrawCursor in restart.game command#message 156 "\x90\x90\x90"if (said(3, 156, 8959)){} [ 22FF[ patch GetGameNumber to call the mouse handler#message 157 "\x3C\x0D\x74\xC2\x3C\x1B\x74\xF2\xE9\xC8\x1F\x90"if (said(12, 157, 32291)){} [ 7E23[ skip the joystick button check#message 158 "\x8B\x04\xE9\xB5" [ \x00if (said(5, 158, 32216)){} [ 7DD8[******************************************************************************[******************************************************************************[[ ERASE CURSOR BUG FIX[ [ There are several locations in AGI code where the cursor needs to be erased,[ but due to a bug, a blank character with the current background color is [ drawn. There is also a bug in the get.string command that misplaces the [ cursor when the command is done. This patch fixes these bugs.[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: none[[ PATCH CODE:            [ HideCursor patch#message 159 "\x50\x33\xC0\xA3\x7C\x0D\x58\xC3"            [ FixCursorPos patch            "\x4A\xB4\x02\xCD\x10\xE8\x6C\x93\xC3"if (said(17, 159, 40569)){} [ 9E79[ change EraseCursor calls to HideCursor calls in InputRedraw#message 160 "\xE8\xBB\x6B"if (said(3, 160, 12987)){} [ 32BB[ and StateReload#message 161 "\xE8\xEB\x3D"if (said(3, 161, 24715)){} [ 608B[ and graphics command#message 162 "\xE8\x9A\x31"if (said(3, 162, 27868)){} [ 6CDC[ and prevent.input command#message 163 "\xE8\x1A\x6C"if (said(3, 163, 12892)){} [ 325C[ and status command#message 164 "\xE8\xE7\x6F"if (said(3, 164, 11919)){} [ 2E8F[ patch get.string command to fix cursor pos on return#message 165 "\xE8\x73\x92"if (said(3, 165, 3083)){} [ 0C0B[******************************************************************************[******************************************************************************[[ MAIN CYCLE TIMING TURBO MODE & TIMER FUNCTIONS[[ AGI uses a custom timing interrupt to manage the internal game clock that [ controls sound timing as well as the main interpreter loop timing. The timer[ interrupt runs 60 times a second (which is why sound resources use a 'tick' [ length of 1/60 sec). The main loop timer uses three of the main timer ticks[ for each game cycle (which is why animation intervals are measured in 1/20  [ sec ticks). This patch changes the game timer to fire at the same frequency [ as the main timer (60 times per second). The patch also adds a delay function[ that can be used to create accurate delay times during logic execution, and [ a countdown timer function to easily add highly accurate timer features.[[ SYNTAX:[   [ to change game loop speed[   cycle.time(o255, vMODE*);[[   [ to set a delay time[   cycle.time(o254, vDELAY**);[[   [ to create a countdown timer[   block(-27, vMINUTES***, vSECONDS***, fDONE***);[[   [ to pause a running timer[   block(-28, 0, ANY****, ANY****);[[   [ to restart a paused timer[   block(-28, 1, ANY****, ANY****);[[    * set value of vMODE to 1 to set game cycle speed to 'turbo' mode;[      set value of vMODE to 0 to restore normal game cycle speed[[   ** value of vDELAY is number of milliseconds to delay before processing the [      next command[[  *** The compiler expects numbers for all arguments so pass variables and [      flags as numbers, without the 'v' or 'f' prefix[[ **** This argument is ignored, so it can be any value[[ LIMITATIONS/CONSIDERATIONS: The turbo mode runs game cycles three times [ faster than normal. So if animationInterval (v10) is 1 in normal mode, [ setting it to 3 in turbo mode will give the same game speed. [[ With the faster cycle time, you can have much finer control over animation and[ movement timing. See the Power Pack Demo game for a demonstration of this.[[ To create a delay time, set vDELAY to the desired number of milliseconds. [ (For delays longer than 255 ms, use multiple calls to the delay function.)  [ This function is very accurate, within a few microseconds on most PCs [ (including DOSBox). Besides being more accurate, it is much simpler to [ program in AGI; one command can now take the place of complicated loop  [ structures that try to create delays by counting down variables or comparing[ time against the game clock.[[ Use the block command, with -25 for the first argument to start a countdown[ timer. The variables, vMINUTES and vSECONDS should be set to the desired[ countdown value. Once the countdown starts, these variables will be updated in[ real time by the main timer interrupt. Once the timer hits zero, fDONE will be[ set to TRUE. If you alter the input variables, the timer will continue the[ countdown with the newly revised values.[[ PATCH CODE:#message 166 "\x81\xF9\xD5\x2A\x74\x25\x81\xF9\xAA\x2A\x74\x03\xE9\xA9\xC4\x2A"            "\xE4\x8B\xD8\x8A\x47\x09\x3C\x01\x72\x31\xB9\xE8\x03\xF7\xE1\x8B"            "\xCA\x8B\xD0\xB4\x86\x32\xC0\xCD\x15\xEB\x20\x2A\xE4\x8B\xD8\x8A"            "\x47\x09\x3C\x01\x74\x02\xB0\x03\xA2\xDC\x01\x2E\xA2\x75\x79\x2C"            "\x04\xF6\xD8\xB4\x14\xF6\xE4\x2E\xA2\xA0\x74\x8B\xC6\x8B\xE5\x5D"            "\x5F\x5E\xC3"            [ TimerPatch            "\x80\x3E\x0F\x04\x01\x73\x52\x80\x3E\xB0\x09\x01\x72\x4B\xFE\x06"            "\xB1\x09\x80\x3E\xB1\x09\x3C\x72\x40\x53\x32\xFF\x8A\x1E\xB2\x09"            "\xFE\x4F\x09\x80\x7F\x09\x01\x73\x1A\x8A\x1E\xB3\x09\x80\x7F\x09"            "\x01\x73\x21\x88\x3E\xB0\x09\xA0\xB4\x09\x51\xE8\xA8\xCB\x59\x32"            "\xFF\xEB\x11\x80\x7F\x09\xFF\x75\x0B\x80\x6F\x09\xC4\x8A\x1E\xB3"            "\x09\xFE\x4F\x09\x88\x3E\xB1\x09\x5B\x1F\x58\xCF"            [ StartTimer            "\xAC\x32\xFF\x8A\xD8\x8A\x4F\x09\xA2\xB3\x09\xAC\x8A\xD8\x8A\x6F"            "\x09\xA2\xB2\x09\xAC\x83\xF9\x01\x73\x05\xE8\x6D\xCB\xEB\x0F\xA2"            "\xB4\x09\xC6\x06\xB0\x09\x01\x88\x3E\xB1\x09\xE8\x62\xCB\x8B\xC6"            "\x5D\x5F\x5E\xC3"            [ PauseRestartTimer            "\xAC\x3C\x01\x72\x02\xB0\x01\xA2\xB0\x09\xAD\x8B\xC6\x5D\x5F\x5E"            "\xC3"if (said(246, 166, 40586)){} [ 9E8A[ modify cycle.time to use the patch#message 167 "\xE9\x48\x3B"if (said(3, 167, 25407)){} [ 633F[ set data flag to match current speed#message 168 "\x03"if (said(1, 168, 476, 0)){} [ DS:01DC[ adjust timer check to handle changes in speed#message 169 "\x72"if (said(1, 169, 29858)){} [ 74A2[ patch timer interrupt to check for countdown timer#message 170 "\xE9\x5F\x25"if (said(3, 170, 31099)){} [ 797B[ clear timer fields#message 171 "" [ \x00if (said(1, 171, 2480, 0)){} [ DS:09B0if (said(1, 171, 2481, 0)){} [ DS:09B1[******************************************************************************[******************************************************************************[[ TRACE FUNCTION ENHANCEMENTS[[ AGI's trace mode let's you step through logic commands, but the display is [ rudimentary, and there are no debugging options while trace mode is active.[ This patch significantly enhances the the trace mode, including:[[ - changes the trace mode toggle key from ScrollLock to CTRL+BACKSPACE[ - enables text input, ego direction changes and controller activations[ - view and change variable and flag values while trace window is active[ - 'return', 'goto' and 'if' statements are displayed as commands[ - test commands include 'not' (!), 'or' (||) and 'and' (&&) symbols[ - the result column shows correct value if the test is 'not'ed[ - false results are displayed in red[ - arguments include prefixes ('v', 'f', 'm', etc)[ - said commands use default word text instead of numbers[ - commands/arguments that extend past right margin are word-wrapped[ - the window left and width properties can be set[[ SYNTAX:[   [ to change trace window left/width[   trace.info(0, LEFT, WIDTH);[[ LIMITATIONS/CONSIDERATIONS: This patch changes the key press to toggle the [ trace mode from the ScrollLock button to CTRL+BACKSPACE, since many modern [ keyboards no longer include the ScrollLock button. [ [ When the trace window is active, you can press the INSERT key to temporarily[ enable input. Press INSERT again to return to normal trace mode. When this [ feature is activated, key presses are put on the input line (if it is [ active). If the key press is a controller, then the controller is activated. [ Ego direction keys are also processed (unless ego is in program control [ mode). Each time you enable input, reserved flag f2 (haveInput) is reset in [ order to allow subsequent said commands to match. You do have to press the[ ENTER key to have AGI parse the input and set f2 to TRUE. If you activate[ the input mode again, it will reset f2 again, so your previously entered [ input will now be ignored. (TIP: if you are going to do multiple inputs [ (controllers and ego direction), do those before entering text input.)[[ You can also view flags and variables while tracing by pressing CTRL+F and [ CTRL+V. After entering the flag/variable number, the value is then displayed.[ You can edit the value, pressing ENTER to save the new value. Pressing ENTER[ without editing the value (or pressing ESCAPE) will leave the value [ unchanged. For flags, a value of 'T' or 't' or any non-zero number will set [ the flag, all other values will reset the flag.[[ Pressing CTRL+O will allow you to view screen object parameters (the same as [ the obj.status.v command). [[ Making the trace window too small will crowd the display. The 80 column mode[ works best for tracing, because you can move the window to keep areas of [ interest uncovered.[[ Just as with print.at settings, don't use a LEFT value less than 2 or a [ WIDTH value that results in a right margin (LEFT + WIDTH - 1) greater than [ 37 (or 77 in 80 column mode), or the trace window will not draw correctly. [[ This patch also fixes a bug in the trace function that corrupts the running [ logic if a trace.on command is encountered while trace function is active.[[ PATCH CODE:            [ LogicExecPatch1#message 172 "\x83\x3E\x38\x18\x01\x75\x14\x3C\xFE\x73\x04\x84\xC0\x75\x0C\x50"            "\x32\xE4\x56\x50\xE8\x77\xE0\x83\xC4\x04\x58\x84\xC0\x0F\x84\xCB"            "\x86\xE9\xB4\x86"            [ TraceAddPatch1            "\x8B\x3E\x3B\x07\x89\x7E\xFE\x8A\x45\x02\x2A\xE4\x50\x8B\xD8\xB8"            "\x57\x13\x80\xFB\x0A\x72\x07\x40\x80\xFB\x64\x72\x01\x40\x50\xE8"            "\x51\x81\x83\xC4\x04\x83\x7E\x10\xFF\x74\x44\x80\x3E\x4A\x13\xFF"            "\x74\x18\x80\x3E\x4C\x13\x01\x74\x05\xB8\x5D\x13\xEB\x03\xB8\x61"            "\x13\x50\xE8\x2E\x81\x83\xC4\x02\xEB\x15\x32\xC0\xA2\x4A\x13\xA1"            "\x3E\x18\x04\x07\x50\xFF\x36\x40\x18\xE8\x8C\x87\x83\xC4\x04\x80"            "\x3E\x4B\x13\x01\x75\x09\xB0\x21\x50\xE8\xEF\x86\x83\xC4\x02\x80"            "\x7E\x08\xFE\x72\x15\x74\x0D\xB0\xFF\xA2\x4A\x13\xA2\x4B\x13\xB8"            "\x4D\x13\xEB\x03\xB8\x51\x13\xE9\xD2\xE0\xA1\x3B\x07\xE9\x8A\xE0"            [ TraceAddPatch2            "\xFF\x76\x0A\x80\x7E\x08\xFE\x0F\x82\xE1\xE0\x74\x02\xEB\x19\x8B"            "\x7E\x0C\x8B\x05\x50\xB8\x29\x18\x50\xE8\xC7\x80\x83\xC4\x04\xB0"            "\x29\x50\xE8\xA6\x86\x83\xC4\x02\xE9\xC4\xE0"            [ TraceAddPatch3            "\x2A\xE4\xB0\x3A\x50\xE8\x98\x86\x83\xC4\x02\x8A\x46\x10\x80\x3E"            "\x4B\x13\x01\x75\x02\x34\x01\x3C\x01\x74\x10\x6A\x0F\x6A\x04\xE8"            "\x99\xCC\x83\xC4\x04\xB0\x46\x2A\xE4\xEB\x02\xB0\x54\x50\xE8\x6F"            "\x86\x83\xC4\x02\xC3"            [ TraceAddPatch4            "\x80\x7E\x08\xFF\x0F\x84\xEC\xE0\x83\x7E\x10\xFF\xE9\x87\xE0"            [ TraceAddPatch5            "\x80\x3E\x4A\x13\xFF\x74\x04\xE8\x32\xE2\xC3\x8A\x36\x40\x18\x8A"            "\x16\x3E\x18\x32\xFF\xB4\x02\xCD\x10\xC3"            [ LogicExecPatch2            "\x89\x1E\x4B\x13\xE9\xB0\x65"            [ TraceInfoPatch            "\x3C\x01\x72\x06\xA3\x3A\x18\xE9\xEC\xDE\xAC\xA2\x3E\x18\x8A\xD8"            "\xAC\x02\xC3\x48\xA2\x42\x18\xE9" [ \x00#message 173 "\xDF"            [ AddArgPrefix            "\xE8\xC1\xE1\x83\x3E\x36\x18\x01\x74\x4D\x50\x8B\xF5\x8B\x1C\x8B"            "\x47\x08\xB4\x07\xF6\xE4\x80\x7F\x0E\x01\x72\x05\xBB\x53\xA9\xEB"            "\x03\xBB\xEC\xA4\x03\xD8\x03\x5E\xF8\x2E\x8A\x07\x3C\x01\x74\x07"            "\x50\xE8\xED\x85\x83\xC4\x02\x58\xE9\xCB\xE0"            [ Check4Scroll            "\x3A\x16\x42\x18\x7C\x15\xE8\xBD\xE1\xE8\xA9\x86\xE8\x7F\x86\xFE"            "\xC2\x8A\xC6\x52\x50\xE8\x5B\x86\x83\xC4\x04\xC3"            [ FindSaidWords            "\x8B\x36\x0D\x0B\x83\xC6\x35\x8B\xCE\x8B\xD1\x3B\x36\x2B\x07\x73"            "\xEC\xF6\x04\x80\x75\x03\x46\xEB\xF2\x8A\x7C\x01\x8A\x5C\x02\x39"            "\xD8\x74\x12\x83\xC6\x03\x8B\xCE\xFF\xC1\x83\x3C\x01\x73\xDC\x8B"            "\xD6\xFF\xC2\xEB\xD6\x83\xEC\x28\x8D\x7E\xCA\x8B\xF2\xAC\x24\x7F"            "\x34\x7F\x88\x05\xFF\xC7\xF6\x44\xFF\x80\x74\xF1\x83\xC6\x03\x39"            "\xCE\x77\x0C\x8D\x7E\xCA\x33\xD2\x8A\x54\xFF\x01\xD7\xEB\xDE\x33"            "\xC0\x88\x05\x8D\x7E\xCA\x57\x32\xFF\xB4\x03\xCD\x10\xE8\xD5\xA2"            "\x02\xD0\x80\xC2\x01\xE8\x6C\xFF\xE8\x67\x7F\x83\xC4\x2E\xE9\x3F"            "\xE0"            [ ArgLineFeed            "\x83\xC4\x02\x80\xC2\x05\xE8\x5A\xFF\xE9\x13\xE0"            [ GetInput            "\x55\x8B\xEC\x6A\x0F\x6A\x02\xE8\x4E\xCB\x83\xC4\x04\xE8\x0D\xE1"            "\xFF\x76\x04\xE8\x3F\x7F\x83\xC4\x02\x33\xC0\x8A\x46\x08\xA2\x0A"            "\x0F\x8A\x46\x0A\x50\xFF\x76\x06\xE8\x0B\x6A\x83\xC4\x04\xC6\x06"            "\x0A\x0F" [ \x00#message 174 "\x3C\x0D\x74\x05\xB8\xFF\xFF\xEB\x0B\xFF\x76\x06\xE8\x6A\xA3\x83"            "\xC4\x02\x2A\xE4\x8B\xE5\x5D\xC3"            [ prompt offsets            "\xDD\x0D\xE8\x0D\xEF\x0D"            [ CheckIt            "\x55\x8B\xEC\x83\xEC\x0F\xBE\x84\xC0\x2E\x89\x36\x55\x53\xE8\xC5"            "\xFB\xD1\xE0\x8B\xF0\x05\x9B\xA2\x8B\xD8\x6A\x04\x6A\x01\x33\xC0"            "\x89\x46\xFC\x8D\x46\xFC\x50\x2E\xFF\x37\xE8\x82\xFF\x83\xC4\x08"            "\x3D\xFF\xFF\x74\x50\x81\xC6\xDD\xA2\x2E\xFF\x24\xE5\xA2\x2A\xA3"            "\x84\xA3\x8B\xD8\x89\x46\xF1\x8A\x47\x09\x50\x68\x29\x18\x8D\x46"            "\xFC\x50\xE8\x93\x7E\x83\xC4\x06\x6A\x04\x6A\x01\x8D\x46\xFC\x50"            "\xFF\x76\xF1\x68\xF8\x0D\x8D\x46\xF3\x50\xE8\x7B\x7E\x83\xC4\x06"            "\x8D\x46\xF3\x50\xE8\x38\xFF\x83\xC4\x08\x8B\x5E\xF1\x3D\xFF\xFF"            "\x74\x55\x88\x47\x09\xEB\x50\x89\x46\xF1\xE8\xA7\xC7\x3C\x01\x74"            "\x04\xB0\x46\xEB\x02\xB0\x54\x32\xE4\x89\x46\xFC\x6A\x02\x33\xC0"            "\x50\x8D\x46\xFC\x50\xFF\x76\xF1\x68" [ \x00#message 175 "\x0E\x8D\x46\xF3\x50\xE8"            "\x36\x7E\x83\xC4\x06\x8D\x46\xF3\x50\xE8\xF3\xFE\x83\xC4\x08\x3D"            "\xFF\xFF\x74\x56\x3C\x01\x73\x11\x8A\x46\xFC\x0C\x20\x3C\x74\x74"            "\x08\x8B\x46\xF1\xE8\x4F\xC7\xEB\x41\x8B\x46\xF1\xE8\x41\xC7\xEB"            "\x39\x8B\x1E\x2B\x07\x3A\x47\xFF\x76\x0F\xE8\xDF\xDF\xB8\x08\x0E"            "\x50\xE8\x10\x7E\x83\xC4\x02\xEB\x21\xFF\x36\x08\x01\xA2\x08\x01"            "\xC6\x06\x34\x18\xFF\x68\x34\x18\xE8\x42\xC5\x83\xC4\x02\x8F\x06"            "\x08\x01\x33\xC0\xA3\x38\x18\xE8\xEC\xDB\xE8\xAF\xDF\xB8\xAE\x18"            "\x50\xE8\xE0\x7D\x83\xC4\x02\xBE\xEB\xC8\x2E\x89\x36\x55\x53\xC6"            "\x06\x7C\x0D\x01\x8B\xE5\x5D\xC3"            [ TraceInput            "\x8B\x45\x02\x80\xFC\x52\x74\x1F\x3C\x16\x74\x0B\x3C\x06\x74\x0F"            "\x3C\x0F\x74\x0F\xE9\x1B\xDE\xB0\x01\xE8\xAC\xFE\xE9\xEC\xDD\xB0"            "\x02\xEB\xF6\xB0\x03\xEB\xF2\x50\xB0\x02\xE8\xC1\xC6\x58\x6A\x0F"            "\x6A\x01\xE8\x9A\xC9\x83\xC4\x04\xE8\x59\xDF\xB8\xA6\x18\x50\xE8"            "\x8A\x7D\x83\xC4\x02\xE8\x2A\x99\x83\x3E\x38\x18\x01\x72\xC5\x50"            "\xE8\x8C\x99\x83\xC4\x02\x8B\xF0\x0B\xC0\x74\xE9\x8B\x04\x3C\x01"            "\x74\x0A\x3C\x02\x74\x67\x3C\x03\x74\x61\xEB\xD9\x8B\x44\x02\xA2"            "\x1C" [ \x00#message 176 "\x83\x3E\xCF\x03\x01\x72\xCC\xE8\x07\x84\xE8\xFF\xCA\xFF\x74\x02"            "\xE8\x59\x8C\x83\xC4\x02\xE8\xD1\x83\xE8\xB6\xCA\xFF\x36\x3E\x18"            "\xFF\x36\x40\x18\xE8\xA8\x83\x83\xC4\x04\x6A\x0F\x6A\x01\xE8\x2C"            "\xC9\x83\xC4\x04\x80\x7C\x02\x0D\x74\x08\x80\x7C\x03\x52\x74\x07"            "\xEB\x91\xB0\x04\xE8\x35\xC6\xE8\xD8\xDE\xB8\xAE\x18\x50\xE8\x09"            "\x7D\x83\xC4\x02\x33\xC0\xE9\x40\xDD\xEB\x2B\x83\x3E\x3B\x01\x01"            "\x72\xDE\x8B\x44\x02\x2A\xE4\x3B\x06\x3F\x01\x75\x02\x2B\xC0\xA3"            "\x3F\x01\xA3\x3F\x01\x50\xE8\xA9\xDE\xB8\xE7\x0F\x50\xE8\xDA\x7C"            "\x83\xC4\x04\xE9\x4D\xFF\x8B\x7C\x02\xC6\x85\x1F\x0E\x01\xE8\x91"            "\xDE\x57\xB8\xF3\x0F\x50\xE8\xC1\x7C\x83\xC4\x04\xE9\x34\xFF"if (said(1244, 172, 40976)){} [ A010[ change enable/disable trace keystroke to CTRL+BACKSPACE#message 177 "\xEB\x28\x3D\x7F\x0E\x74\x06\x84\xC0\x74\x33\xEB\x2F\x83\x3E\x38"            "\x18\x01\x74\x05\xE8\x75\x2C\xEB\x17\xE8\x3B\x2D\xEB\x12"if (said(30, 177, 21277)){} [ 531D#message 178 "\xEB\xC8"if (said(2, 178, 21333)){} [ 5355[ modify traceon to check for input key#message 179 "\xE9\xCE\x21"if (said(3, 179, 33290)){} [ 820A[ modify LogicExecute to add if and goto statements#message 180 "\xE9\x29\x79"if (said(3, 180, 9956)){} [ 26E4[ modify TraceAdd to check for 'if', 'goto'#message 181 "\xE9\xE9\x1E"if (said(3, 181, 33096)){} [ 8148#message 182 "\xE9\x14\x1F"if (said(3, 182, 33197)){} [ 81AD#message 183 "\xE9\x6B\x1F"if (said(3, 183, 33206)){} [ 81B6#message 184 "\xE8\x05\x20"if (said(3, 184, 33067)){} [ 812B[ save 'not' status in LogicEval#message 185 "\xE8\x21\x7A"if (said(3, 185, 10025)){} [ 2729[ modify TraceAdd to show false result in red#message 186 "\xE8\x1F\x1F\xEB\x14"if (said(5, 186, 33229)){} [ 81CD[ check for arguments that extend past right edge#message 187 "\xE9\xAA\x1F"if (said(5, 187, 33433)){} [ 8299[ modify main line printing to skip logic number#message 188 "\x90"if (said(1, 188, 33138)){} [ 8172if (said(1, 188, 33177)){} [ 8199#message 189 "\x04"if (said(1, 189, 33187)){} [ 81A3#message 190 "\x13"if (said(1, 190, 33140)){} [ 8174#message 191 "\x1A"if (said(1, 191, 33179)){} [ 819B[ modify window placement to use custom placement parameters#message 192 "\x2B\x06\xD9\x03\x8B\xF8\x47\xA1\x42\x18\x40\x2B\x06\x3E\x18\x8A"            "\xE0\x90\x90"if (said(19, 192, 32737)){} [ 7FE1#message 193 "\xA0\x3E\x18\xD1\xE0\xD1\xE0\x04\xFB\x86\xC4\x04\x0A\x8A\xE8\x32"            "\xC0\x0B\xC7\xA3\x44\x18\xA1\x32\x18\xB1\x03\xD3\xE0\x04\x0A\x86"            "\xC4\x8A\xC5\x90"if (said(36, 193, 32763)){} [ 7FFB[ modify TraceInfo to allow setting left/width of trace window#message 194 "\xE9\x0A\x21"if (said(3, 194, 32839)){} [ 8047[ modify TraceArgPrint to add prefixes#message 195 "\xE9\xFA\x1E"if (said(3, 195, 33393)){} [ 8271[ set default trace window position #message 196 "\x02"if (said(1, 196, 6206, 0)){} [ DS:183E#message 197 "\x25"if (said(1, 197, 6210, 0)){} [ DS:1842[ fix bug in trace.on, if it is called while tracing is active#message 198 "" [ \x00if (said(1, 198, 32669)){} [ 7F9D[ adjust right margin for result character, to be closer to edge#message 199 "\xFF"if (said(1, 199, 33216)){} [ 81C0[ strings used by new trace functions#message 200 "\x02\x02\x02\x69\x66\x20" [ \x00#message 201 "\x67\x6F\x74\x6F\x28" [ \x00#message 202 "\x20\x20\x25\x64\x3A" [ \x00#message 203 "\x26\x26\x20" [ \x00#message 204 "\xB3\xB3\x20" [ \x00if (said(27, 200, 4938, 0)){} [ DS:134A[ strings used by trace input mode#message 205 "<input>"if (said(8, 205, 6310, 0)){} [ DS:18A6#message 206 "<resume tracing>"if (said(17, 206, 6318, 0)){} [ DS:18AE#message 207 "ego dir: %d"if (said(12, 207, 4071, 0)){} [ DS:0FE7#message 208 "controller: c%d"if (said(16, 208, 4083, 0)){} [ DS:0FF3#message 209 "variable: "if (said(11, 209, 3549, 0)){} [ DS:0DDD#message 210 "flag: "if (said(7, 210, 3560, 0)){} [ DS:0DE8#message 211 "object: "if (said(9, 211, 3567, 0)){} [ DS:0DEF#message 212 "  v%d: "if (said(8, 212, 3576, 0)){} [ DS:0DF8#message 213 "  f%d: "if (said(8, 213, 3584, 0)){} [ DS:0E00#message 214 "invalid object number"if (said(22, 214, 3592, 0)){} [ DS:0E08[ Action command argument prefixes#message 215 "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x76\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x66\x01\x01\x01\x01\x01\x01\x66\x01\x01\x01\x01\x01\x01"            "\x66\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x76\x76\x01\x01\x01\x01\x6F\x76\x76\x01\x01\x01\x01"            "\x6F\x76\x76\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x6F\x76\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x66\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x66\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x66\x01\x01"            "\x6F\x76\x76\x76\x66\x01\x01\x6F\x01\x66\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x76\x01\x01\x01\x01\x01\x6F\x76\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x69\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x69\x01\x01\x01\x01\x01\x01\x69\x76\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x76\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x66\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01"            "\x76\x76\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x6D\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x73\x6D\x01\x01\x01\x01\x01\x73\x6D\x01\x01\x01\x01\x01"            "\x73\x77\x01\x01\x01\x01\x01\x73\x01\x01\x01\x01\x01\x01"            "\x6D\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x63\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x76\x76\x76\x76\x76\x76"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01\x01\x01"            "\x6D\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x76\x76\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x6D\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x6D\x01\x01\x01\x01\x01\x01\x6D\x63\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x63\x01\x01\x01\x01\x01\x01"            "\x63\x01\x01\x01\x01\x01\x01"[ Test command argument prefixes            "\x01\x01\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x76\x01\x01\x01\x01\x01\x01"            "\x76\x76\x01\x01\x01\x01\x01\x66\x01\x01\x01\x01\x01\x01"            "\x76\x01\x01\x01\x01\x01\x01\x69\x01\x01\x01\x01\x01\x01"            "\x69\x76\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x63\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"            "\x01\x01\x01\x01\x01\x01\x01\x73\x73\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x6F\x01\x01\x01\x01\x01\x01"            "\x6F\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01\x01"if (said(1267, 215, 42220)){} [ A4EC[******************************************************************************[******************************************************************************[[ GET INPUT LINE[ [ This patch modifies the get.string command to allow retrieval of the current [ input line, as well as the most recently entered input.[[ SYNTAX:[   [ to get current input line[   get.string(sA, mANY*, -1, ANY*, ANY*);[[   [ to get previous input line[   get.string(sA, mANY*, -2, ANY*, ANY*);[[   * These arguments are ignored, so they can be any value[[ LIMITATIONS/CONSIDERATIONS: String sA is replaced with the current or [ previous input line. If sA is not valid (i.e.greater than the maximum [ allowed string value), the command is ignored.[[ The current input line means everything the player has currently typed for [ input, exactly as it is, no cleaning up like what parsing does. The previous [ input line means what was on the input line the last time the player pressed [ ENTER (also as-is, no clean up).[[ PATCH CODE:#message 216 "\x8B\x76\x08\x80\x7C\x02\xFE\x73\x03\xE9\x86\x61\xB8\x7E\x0D\x75"            "\x03\xB8\xA8\x0D\x50\x8A\x04\x83\xC6\x05\x3C\x0B\x77\x0B\xB4\x28"            "\xF6\xEC\x05\xE9\x01\x50\xE8\x1D\x9B\xE9\x03\x62"if (said(44, 216, 43487)){} [ A9DF#message 217 "\xE9\x6E\x9E"if (said(3, 217, 2926)){} [ 0B6E[******************************************************************************[******************************************************************************[ [ STRING FUNCTIONS[[ Strings aren't very useful in AGI because there are no commands that let you[ manipulate them. This patch provides 14 basic string functions.[[ SYNTAX*:[   [ strLen[   block(-4, sINPUT, vRESULT, ANY**); [[   [ strCopy[   block(-5, sINPUT, sRESULT, ANY**);[[   [ strConcat[   block(-6, sINPUT, sADD, ANY**);[[   [ sLeft[   block(-7, sINPUT, sRESULT, vLEN);[[   [ sRight[   block(-8, sINPUT, sRESULT, vLEN);[[   [ sMid[   block(-9, sINPUT, vPOS, vLEN);[[   [ strTrim[   block(-10, sINPUT, sRESULT, MODE);[[   [ sInstr[   block(-11, sINPUT, vCHAR, vPOS);[[   [ sFormat[   block(-12, sINPUT, sRESULT, ANY**);[[   [ str2byte[   block(-13, sINPUT, vRESULT, ANY**);[[   [ hex2byte[   block(-14, sINPUT, vRESULT, ANY**);[[   [ byte2Hex[   block(-15, sRESULT, vINPUT, ANY**); [[   [ strUpper[   block(-16, sINPUT, sRESULT, ANY**);[[   [ strLower[   block(-17, sINPUT, sRESULT, ANY**);[[   [ Byte2Char[   block(-18, sRESULT, vCHAR, ANY**); [[    * The compiler expects numbers for all arguments so pass strings and [      variables as numbers, without the 's' or 'v' prefix[[   ** This argument is ignored, so it can be any value[[ LIMITATIONS/CONSIDERATIONS: These functions all use the block command. To[ access them, use the correct function identifier for the first argument.[ If you pass an invalid string value to any of these functions, the function [ will exit without making any changes.[[ Details on usage of each function are provided below:[[   strLen - The length of sINPUT is returned in variable vRESULT.[[   strCopy - sINPUT is copied to sRESULT. No change is made to sINPUT.[[   strConCat - sADD is added to the end of sINPUT. sADD is not affected.  [   sADD can be the same as sINPUT, in which case sINPUT will be doubled [   up.[[   sLeft - n characters (where n = value of vLEN) are copied from the left[   of sINPUT into sRESULT. If vLEN is greater than the length of sINPUT[   all of sINPUT is copied.[[   sRight - n characters (where n = value of vLEN) are copied from the [   right of sINPUT into sRESULT. If vLEN is greater than the length of [   sINPUT all of sINPUT is copied.[[   sMid - **This function modifies sINPUT, instead of putting the result[   in a different string.**[   n characters (where n = value of vLEN) are copied from sINPUT,[   starting at character p (where p = value of vPOS). Position values [   are zero-based (meaning first character is 0, last character is[   length-1). If vPOS is >= length of sINPUT, a null string is returned.[   [   strTrim - sINPUT is copied to sRESULT, with leading and/or trailing [   spaces removed. Four modes are supported:[   mode = 0: full trim, both right and left[   mode = 1: only leading spaces are removed (ltrim)[   mode = 2: only trailing spaces are removed (rtrim)[   mode = 3: the string is 'cleaned' using the same function AGI uses [             when parsing the input line (see WinAGI Help file for[             details on how input is 'cleaned')[[  strInstr - Starting at character p (where p = value of vPOS) variable[  vPOS is set to the position of the next instance of character c[  (where c = value of vCHAR) in sINPUT. Position values are zero-based [  (meaning first character is 0, last character is length-1). If the[  character is not found, the returned value is 255. If vPOS is >=[  length of sINPUT, the returned value is 255. [[  strFormat - sINPUT is formatted and then copied to sRESULT. Formatting [  means print format codes (%v, %s, %m, etc) are replaced with their [  respective values. sRESULT can be the same as sINPUT.[[  str2byte: sINPUT is converted to a numerical value, and returned in [  vRESULT. Numerical digits are processed until the end of the string is [  reached, or a non-numerical character is encountered. If the value is [  greater than 255, the result is value MOD 256.[[  hex2byte: the first two bytes of sINPUT are converted from hexadecimal[  to a numerical value; the result is stored in vRESULT. If any characters[  in sINPUT are not valid hex numbers (0-9, a-f or A-F), they are treated[  as zeros. [[  byte2hex: vINPUT is converted to a two-digit hex string and stored in[  sRESULT.[[  strUpper: sINPUT is copied to sRESULT and then converted to upper case.[  sRESULT can be the same as sINPUT.[[  strLower: sINPUT is copied to sRESULT and then converted to lower case.[  sRESULT can be the same as sINPUT.[ [  byte2char: sRESULT is set to the ascii character of vCHAR.[[  This version doesn't include the '%o' format option for messages (to [  show the text of inventory items). This patch makes that code available.[[ This patch also fixes a bug that limits the number of strings that can be[ parsed. Now all strings can be parsed.[[ PATCH CODE:            [ FunctionHandler#message 218 "\xAC\x56\x3C\x0C\x73\x2B\xB4\x28\xF6\xE4\x05\xE9\x01\x80\xEB\x08"            "\x2E\xFF\xA7\x20\xAA\x45\xAA\x58\xAA\x58\xAA\x7C\xAA\x9D\xAA\xCE"            "\xAA\x04\xAB\x70\xAB\xB5\xAB\xF5\xAB\x08\xAC\x1B\xAC\x6F\xAC\x8D"            "\xAC\xAB\xAC\x58\x40\x40\x5D\x5F\x5E\xC3"            [ strLen            "\x50\xE8\xC1\x9A\x83\xC4\x02\x8A\xC8\xAC\x8A\xD8\x32\xFF\x88\x4F"            "\x09\xEB\xE6"            [ strCopyConcat            "\x8B\xF8\xAC\x3C\x0C\x73\xDF\xB4\x28\xF6\xE4\x05\xE9\x01\x80\xFB"            "\x04\x74\x07\x57\x50\xE8\xB5\x9A\xEB\x05\x50\x57\xE8\x21\x9B\x83"            "\xC4\x04\xEB\xC2"            [ strLeft            "\x8B\xF8\xAD\x8A\xDC\x32\xFF\x8A\x5F\x09\x43\x53\x3C\x0C\x73\xB2"            "\xB4\x28\xF6\xE4\x05\xE9\x01\x57\x50\xE8\xC1\x9A\x83\xC4\x06\xEB"            "\xA1"            [ strRight            "\x8B\xF8\xAD\x8A\xDC\x32\xFF\x8A\x4F\x09\x3C\x0C\x73\x93\xB4\x28"            "\xF6\xE4\x05\xE9\x01\x8B\xF0\x57\xE8\x52\x9A\x83\xC4\x02\x3A\xC1"            "\x76\x04\x2A\xC1\x03\xF8\x57\x56\xE8\x5D\x9A\x83\xC4\x04\xE9\x70"            "\xFF"            [ strMid            "\x8B\xF8\xAD\x8B\xF7\x8A\xD8\x8A\x4F\x09\x8A\xDC\x8A\x6F\x09\x57"            "\xE8\x29\x9A\x83\xC4\x02\x3A\xC1\x76\x15\x8A\xC1\x03\xF8\x8A\xCD"            "\x32\xED\x41\x51\x57\x56\xE8\x62\x9A\x83\xC4\x06\xE9\x41\xFF\x33"            "\xC0\x88\x05\xE9\x3A\xFF"            [ strTrim            "\x8B\xF8\xAC\x3C\x0C\x73\xF6\xB4\x28\xF6\xE4\x05\xE9\x01\x50\xAC"            "\x5E\x8A\xD8\x8A\x57\x09\x80\xFA\x03\x73\x3D\x80\xFA\x01\x77\x0D"            "\x80\x3D\x20\x75\x08\x80\x3D\x01\x72\x03\x47\xEB\xF3\x57\x56\xE8"            "\xEF\x99\x83\xC4\x04\x8B\xF8\x80\xFA\x01\x74\xC1\x80\x3C\x01\x72"            "\xBC\x46\x80\x3C\x01\x73\xFA\x4E\x3B\xF7\x74\x06\x80\x3C\x20\x74"            "\xF6\x46\xC6\x04" [ \x00#message 219 "\xE9\xE2\xFE\x57\xE8\xDC\x6C\x83\xC4\x02\x68\x0F\x0B\x56\xE8\xBB"            "\x99\x83\xC4\x04\xE9\xCE\xFE"            [ strInstr            "\x8B\xF8\xAD\x8B\xF7\x50\x8A\xD8\x8A\x6F\x09\x8A\xDC\x80\xFD\x01"            "\x72\x26\x8A\x4F\x09\x57\xE8\x81\x99\x83\xC4\x02\x3A\xC1\x76\x18"            "\x33\xC0\x8A\xC5\x32\xED\x03\xF9\x50\x57\xE8\x31\x9C\x83\xC4\x04"            "\x3C\x01\x72\x04\x2B\xC6\xEB\x02\xB0\xFF\x5B\x8A\xDF\x32\xFF\x88"            "\x47\x09\xE9\x89\xFE"            [ strFormat            "\x8B\xF8\xAC\x3C\x0C\x73\x36\xB4\x28\xF6\xE4\x05\xE9\x01\x81\xEC"            "\x01\x01\x8B\xF0\x8D\x86\xFD\xFE\x50\x57\xC6\x06\x7B\x0B\xFF\xC6"            "\x06\x79\x0B\x01\xE8\x17\x72\x83\xC4\x04\x8B\xF8\x33\xC0\x88\x05"            "\x8D\x86\xFD\xFE\x50\x56\xE8\x37\x99\x81\xC4\x05\x01\xE9\x49\xFE"            [ Str2Byte            "\x50\xE8\x05\x9A\x83\xC4\x02\x8A\xC8\xAC\x8A\xD8\x32\xFF\x88\x4F"            "\x09\xEB\xEA"            [ Hex2Byte            "\x8B\xF8\x8B\x05\xE8\xD3\xDA\x8A\xC8\xAC\x8A\xD8\x32\xFF\x88\x4F"            "\x09\xEB\xD7"            [ Byte2Hex            "\x8B\xF8\xAC\x32\xE4\x8B\xD8\x8A\x47\x09\x50\xE8\xA1\x9A\x83\xC4"            "\x02\x6A\x02\x50\xE8\x45\x9A\x83\xC4\x04\x50\x57\xE8\xEB\x98\x83"            "\xC4\x04\xEB\xB3"            [ ToUpper            "\x56\x80\x3C\x01\x72\x10\x80\x3C\x61\x72\x08\x80\x3C\x7A\x77\x03"            "\x80\x2C\x20\x46\xEB\xEB\x5E\xC3"            [ ToLower            "\x56\x80\x3C\x01\x72\x10\x80\x3C\x41\x72\x08\x80\x3C\x5A\x77\x03"            "\x80\x04\x20\x46\xEB\xEB\x5E\xC3"            [ strUpper            "\x8B\xF8\xAC\x3C\x0C\x73\x14\xB4\x28\xF6\xE4\x05\xE9\x01\x57\x50"            "\xE8\xA3\x98\x83\xC4\x04\x8B\xF0\xE8\xB5\xFF\xE9\xB1\xFD"            [ strLower            "\x8B\xF8\xAC\x3C\x0C\x73\x14\xB4\x28\xF6\xE4\x05\xE9\x01\x57\x50"            "\xE8\x85\x98\x83\xC4\x04\x8B\xF0\xE8\xAF\xFF\xE9\x93\xFD"            [ Byte2Char            "\x8B\xF8\xAC\x32\xE4\x8B\xD8\x8A\x47\x09\x89\x05\xE9\x84\xFD"            [ FmtObjPatch            "\x3C\x6F\x0F\x85\x74\x71\x8D\x46\xF8\x50\x56\xE8\x85\x74\x83\xC4"            "\x04\x8B\xF0\x8B\x5E\xF8\x8A\x47\x09\xB4\x03\xF6\xE4\x8B\xC8\x8B"            "\x1E\x2B\x07\x03\xD9\xA1\x2B\x07\x03\x07\x57\x50\xE9\xA1\x71"if (said(734, 218, 43531)){} [ AA0B[ ConcatPatch#message 220 "\x56\x80\x3C\x01\x72\x03\x46\xEB\xF8\x8B\xC6\x8B\xCF\xF7\xD9\x80"            "\x3D\x01\x72\x03\x47\xEB\xF8\x03\xCF\x41\x8B\x76\x0A\x8B\xF8\xF3"            "\xA4\x32\xC0\x88\x45\xFF\x58\x90"if (said(40, 220, 17830)){} [ 45A6[ patch parse command to accept all strings#message 221 "\x0C"if (said(1, 221, 6177)){} [ 1821[ patch format function to check for invobjs#message 222 "\xE9\x43\x8D"if (said(3, 222, 8022)){} [ 1F56[******************************************************************************[******************************************************************************[ [ PALETTE FUNCTIONS[[ This patch creates custom functions that allow you to change the display [ color palette. It also includes functions that will fade the screen to/from [ fully black or fully white that are useful for creating transitions when [ changing rooms.[[ SYNTAX: [   [ to change the palette[   block(-19, BYVAR, PALETTE, LOADONLY);[[   [ to fade screen in from blank [   block(-20, BYVAR, DELAY, COLOR); [[   [ to fade screen out to blank[   block(-21, BYVAR, DELAY, COLOR);[[ LIMITATIONS/CONSIDERATIONS: To change the current display palette, use the [ block command with -19 as the first argument. PALETTE is a message that [ contains hexadecimal values of the new colors. Format characters (%s, %v, [ %m, etc) are allowed. The formatted string must be exactly 96 characters, [ representing 48 two-digit hex values - three hex values (in the form of [ RRGGBB) for each of the sixteen colors. Do not use spaces or any other [ characters. If non-hex characters are passed, they will be treated as zeros. [ Passing a string that is not exactly 96 characters long will be ignored (the [ function will not change the palette). [[ The LOADONLY argument should normally be set to 0. If you want to change [ palettes between fade actions (fade out with one palette, then fade in with [ a different palette), you can use a value of 1 for LOADONLY to load the [ palette without forcing an immediate change.[[ The fade commands do not change the stored palette information. They will [ use the current palette settings, and gradually darken the screen to black [ (if COLOR is 0) or gradually brighten the screen to full white (if COLOR is [ 1). The function uses 64 steps to go from normal to fully faded. You can [ control the speed of the fade by passing a non-zero value for DELAY. Each [ step is paused by DELAY milliseconds. Passing a value of zero for DELAY will[ immediately blank the screen to the desired color, with no delay.[[ Take care when using fade functions. You should make sure that for each fade [ out command, there is a matching fade in command to restore the screen. [[ By default, arguments are passed as numbers. If you want to pass them by [ variable, use a numeric value of 1 for BYVAR; the other two arguments in all [ commands will then be passed by variable.[[ The Power Pack Demo game contains many examples and more detailed [ explanations on how the palette functions work.[[ PATCH CODE:            [ SetDAC#message 223 "\x50\x51\x52\x53\x8D\x96\x40\xFF\xB8\x12\x10\x33\xDB\x8B\xCB\xB1"            "\x40\xCD\x10\x5B\x5A\x59\x58\xC3"            [ CopyPaletteData            "\xB0\xC0\x50\x8D\x96\x40\xFF\x52\x1E\x68\xA9\xAE\x0E\xE8\x7C\xA6"            "\x83\xC4\x0A\xC3"            [ Delay            "\x50\x51\x52\x32\xE4\x8A\xC7\xB9\xE8\x03\xF7\xE1\x8B\xCA\x8B\xD0"            "\xB4\x86\x32\xC0\xCD\x15\x5A\x59\x58\xC3"            [ LoadPalette            "\x32\xE4\x50\xE8\xD4\x72\x83\xC4\x02\x8B\xF0\x8D\xBE\x10\xFF\x57"            "\x56\xC6\x06\x7B\x0B\xFF\xC6\x06\x79\x0B\x01\xE8\xA6\x70\x8B\xF8"            "\x32\xC0\x88\x05\x5E\xE8\xB3\x97\x5F\x3C\x60\x74\x03\x33\xF6\xC3"            "\x8B\xF7\x8B\xDF\x33\xC9\xB1\x30\xAD\xE8\x77\xD9\xAA\xE2\xF9\x8D"            "\x96\x40\xFF\x32\xE4\xB0\x18\x50\x8B\xC3\x8B\xF8\x33\xDB\x50\x1E"            "\x52\x1E\xE8\x09\xA6\x83\xC4\x04\x83\xC2\x18\x52\x1E\xE8\xFE\xA5"            "\x83\xC4\x08\x8B\xC7\x83\xC0\x18\x83\xC2\x18\x43\x80\xFB\x02\x75"            "\xDD\x83\xC4\x02\x6A\x60\x8B\xC2\x83\xE8\x60\x50\x1E\x52\x1E\xE8"            "\xDC\xA5\x83\xC4\x0A\xE8\x4A\xFF\xC3"            [ SetPalette            "\xAC\x3C\x01\xAD\x72\x0A\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09"            "\x81\xC4\x10\xFF\x56\x3C\x01\x72\x12\x50\xE8\x5A\xFF\x58\x83\xFE"            "\x01\x72\x08\x80\xFC\x01\x73\x03\xE8\x06\xFF\x58\x8B\xE5\x5D\x5F"            "\x5E\xC3"            [ FadePalette            "\x3C\x28\x74\x04\xB5\x01\xEB\x02\x32\xED\xAC\x3C\x01\xAD\x72\x0A"            "\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x81\xC4\x10\xFF\x56\x8A"            "\xCC\x8A\xF8\x80\xFD\x01\x72\x0E\x3C\x01\x73\x06\x32\xD2\xB7\x05"            "\xEB\x10\xB2\x3F\xEB\x0C\x3C\x01\x73\x06\xB2\x3F\xB7\x05\xEB\x02"            "\x32\xD2\xB6\x3F\x32\xDB\x8D\xBE\x40\xFF\xBE\xA9\xAE\x2E\x8A\x04"            "\x24\x3F\x46\x80\xF9\x01\x72\x0E\xF6\xD8\x04\x3F\xF6\xE2\xF6\xF6"            "\xF6\xD8\x04\x3F\xEB\x04\xF6\xE2\xF6\xF6\xAA\x43\x80\xFB\xC0\x75"            "\xDC\xE8\x8B\xFE\xE8\xB4\xFE\x80\xFD\x01\x72\x08\x4A\x80\xFA\xFF"            "\x75\xC2\xEB\x06\x42\x80\xFA\x40\x75\xBA\x58\x8B\xE5\x5D\x5F\x5E"            "\xC3"            [ RestorePalette            "\x50\x53\x51\x52\x06\x0E\x07\xBA\xA9\xAE\x33\xC9\xB1\x40\x33\xDB"            "\xB8\x12\x10\xCD\x10\x07\x5A\x59\x5B\x58\xC3"            [ SavePalette            "\x06\x0E\x07\xBA\xA9\xAE\x33\xDB\x8B\xCB\xB1\x40\xB8\x17\x10\xCD"            "\x10\x07\xC3"            [ default palette data            "\x80\x80\x80\x80\x80\x2A\x80\x2A\x80\x80\x2A\x2A\x2A\x80\x80\x2A"            "\x80\x2A\x2A\x15\x80\x2A\x2A\x2A\x80\x80\x80\x80\x80\x2A\x80\x2A"            "\x80\x80\x2A\x2A\x2A\x80\x80\x2A\x80\x2A\x2A\x15\x80\x2A\x2A\x2A"            "\x15\x15\x15\x15\x15\x3F\x80\x3F\x15\x15\x3F\x3F\x3F\x15\x15\x3F"            "\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F\x15\x15\x15\x15\x15\x3F\x80\x3F"            "\x15\x15\x3F\x3F\x3F\x15\x15\x3F\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F"            "\x80\x80\x80\x80\x80\x2A\x80\x2A\x80\x80\x2A\x2A\x2A\x80\x80\x2A"            "\x80\x2A\x2A\x15\x80\x2A\x2A\x2A\x80\x80\x80\x80\x80\x2A\x80\x2A"            "\x80\x80\x2A\x2A\x2A\x80\x80\x2A\x80\x2A\x2A\x15\x80\x2A\x2A\x2A"            "\x15\x15\x15\x15\x15\x3F\x80\x3F\x15\x15\x3F\x3F\x3F\x15\x15\x3F"            "\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F\x15\x15\x15\x15\x15\x3F\x80\x3F"            "\x15\x15\x3F\x3F\x3F\x15\x15\x3F\x15\x3F\x3F\x3F\x15\x3F\x3F\x3F"if (said(640, 223, 44265)){} [ ACE9[******************************************************************************[******************************************************************************[[ SETMESSAGE FUNCTION[[ This function allows you to change the text of a message, setting it to a[ string value. It also modifies the MenuInput function to update menu text[ when the assigned messages changes.[[ SYNTAX:[   block(-22, BYVAR, MSGOLD*, STRNEW*);[[    * The compiler expects numbers for all arguments so pass messages, strings[      and variables as numbers, without the 'm', 's' or 'v' prefix[[ LIMITATIONS/CONSIDERATIONS: Changing message values is an advanced technique[ that should only be done with extreme care. It is critical that the new value[ assigned to a message (string STRNEW) is not longer than the original message[ (MSGOLD) text, or it will over-write the message that follows.[[ You should reference messages that you intend to modify by the message number[ in code, not the text string when writing code, because your compiled code[ will still think the message is its original value, not the updated value. [ This can lead to unexpected results. The Power Pack demo game includes [ detailed examples and explanations on how to manage message changes.[[ By default, MSGOLD and STRNEW are passed as numbers, i.e. 'm1', 's2'. To pass[ by variable, use a numeric value of 1 for BYVAR; the other two arguments will [ will then be passed by variable.[[ PATCH CODE:#message 224 "\xAC\x3C\x01\xAD\x72\x0A\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09"            "\x50\x32\xE4\x50\xE8\x89\x70\x83\xC4\x02\x8B\xC8\x5B\x8A\xC7\x3C"            "\x0C\x73\x0F\xB4\x28\xF6\xE4\x05\xE9\x01\x50\x51\xE8\x8D\x95\x83"            "\xC4\x04\x8B\xC6\x8B\xE5\x5D\x5F\x5E\xC3"if (said(58, 224, 44905)){} [ AF69[******************************************************************************[******************************************************************************[[ SETITEM FUNCTION[[ This function allows you to change the text of an inventory item, setting it [ to a string value.[[ SYNTAX:[   block(-23, BYVAR, ITEM*, STRNEW*);[[    * The compiler expects numbers for all arguments so pass messages, strings[      and variables as numbers, without the 'i', 's' or 'v' prefix[[ LIMITATIONS/CONSIDERATIONS: Changing item text values is an advanced technique[ that should only be done with extreme care. It is critical that the new text [ (STRNEW) assigned to an item (ITEM) is not longer than its original text, or [ it will overwrite the item that follows. STRNEW can contain format codes[ allowing you greater flexibility in managing item names. The Power Pack Demo[ includes detailed examples and explanations on how to manage item changes.[[ By default, ITEM and STRNEW are passed as numbers, i.e. 'i1', 's2'. To pass [ by variable, use a numeric value of 1 for BYVAR; the other two arguments will [ then be passed by variable.[[ PATCH CODE:#message 225 "\xAC\x3C\x01\xAD\x72\x0A\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09"            "\x50\xB4\x03\xF6\xE4\x03\x06\x2B\x07\x8B\xD8\x8B\x07\x03\x06\x2B"            "\x07\x8B\xC8\x5B\x8A\xC7\x3C\x0C\x73\x2F\xB4\x28\xF6\xE4\x05\xE9"            "\x01\x83\xEC\x7F\x51\x8D\x7E\x81\x57\x50\xC6\x06\x7B\x0B\xFF\xC6"            "\x06\x79\x0B\x01\xE8\x09\x6E\x8B\xF8\x32\xC0\x88\x05\x83\xC4\x04"            "\x59\x54\x51\xE8\x2C\x95\x83\xC4\x04\x8B\xC6\x8B\xE5\x5D\x5F\x5E"            "\xC3"if (said(97, 225, 44963)){} [ AFA3[******************************************************************************[******************************************************************************[[ ITEMCOUNT FUNCTION[[ This function returns the number of inventory items that are currently marked[ as being in a given location in a variable.[[ SYNTAX:[   block(-24, vLOCATION*, vRESULT*, ANY**);[[    * The compiler expects numbers for all arguments so pass variables as[      numbers, without the 'v' prefix[[   ** This argument is ignored, so it can be any value[[ LIMITATIONS/CONSIDERATIONS: If the value of vLOCATION is zero, this function[ returns the total number of inventory objects in the OBJECT file. If the [ value of vLOCATION is 255, it will return the count of items currently in the[ player's inventory. Any other value will return the number of items that[ are currently assigned to that room. [#message 226 "\xAD\x46\x33\xDB\x8A\xD8\x8A\x47\x09\x8B\xD0\x8B\x1E\x2B\x07\x33"            "\xC9\x80\xFA\x01\x72\x07\x3A\x57\x02\x74\x02\xEB\x01\x41\x43\x43"            "\x43\x3B\x1E\x2D\x07\x72\xEA\x33\xDB\x8A\xDE\x88\x4F\x09\x8B\xC6"            "\x8B\xE5\x5D\x5F\x5E\xC3"if (said(54, 226, 45060)){} [ B004[******************************************************************************[******************************************************************************[[ PICDRAW FUNCTION[[ This function adds the ability to send picture draw commands to the current [ picture. The fill function can be changed to use current pixel color as the [ target color instead of the default white/red for visual/priority.[[ SYNTAX:[   block(-25, sCMDS*, FILLSTYLE, **ANY);[[    * The compiler expects numbers for all arguments so pass the string as a [      number without the 's' prefix[[   ** This argument is ignored, so it can be any value[[ LIMITATIONS/CONSIDERATIONS: This function is basically the same as the [ overlay.pic function, except you can pass draw commands in a string instead[ of a picture resource. Draw commands are passed as a string of two-digit hex[ values. The string can include formatting codes, but the resulting formatted[ string must not exceed 126 characters. Use multiple calls to this function if[ longer drawing operations are needed.[ [ You must include an end of drawing command (hex value FF). [[ If FILLSTYLE is 0, fill operations work as normal, filling only pixels that [ are white on the visual screen or red on the priority screen. If FILLSTYLE is[ non-zero, then fill operations will use colors at the starting fill pixel as [ the target color. This lets you fill over areas that are not the default [ colors of white/red.[[ The Power Pack Demo game includes some detailed examples of how to use the[ picdraw function to manipulate pictures.[[ PATCH CODE:            [ JmpOverlay#message 227 "\x56\x57\x55\x8B\xEC\xE9\x71\x93"            [ DrawPicPatch            "\xAC\x8B\xC8\xAD\xA2\x0B\x0F\x56\x3C\x0C\x73\x53\xFF\x36\xE5\x0F"            "\x8B\xC1\xB4\x28\xF6\xE4\x05\xE9\x01\x83\xEC\x7F\x8D\x7E\x81\x57"            "\x50\xC6\x06\x7B\x0B\xFF\xC6\x06\x79\x0B\x01\xE8\x83\x6D\x8B\xF8"            "\x32\xC0\x88\x05\x83\xC4\x02\xE8\x8E\x94\x5F\x8B\xF7\xD1\xE8\x8B"            "\xC8\xAD\xE8\x5B\xD6\xAA\xE2\xF9\x8D\x46\x81\xE8\xAA\xFF\x83\xC4"            "\x7F\x8F\x06\xE5\x0F\x83\x3E\xE5\x0F\x01\x75\x03\xE8\x11\x9C\x32"            "\xC0\xA2\x0B\x0F\x58\x5D\x5F\x5E\xC3"            [ GetBkgdCol            "\x80\x3E\x0B\x0F\x01\x72\x05\x26\x8A\x0D\xEB\x02\xB1\x4F\x8A\xD9"            "\x8A\xE9\x81\xE1\x0F\xF0\xC3"if (said(136, 227, 45114)){} [ B03A[ modify SBuffPicFill to use the patch#message 228 "\xE8\xF4\x65\xF6\xC7\x0F\x74\x0A\xB2\x0F\x38\x0E\x24\x11\x74\x10"            "\xEB\x11\xF6\xC7\xF0\x74\x09\xB2\xF0\x38\x2E\x25\x11\x75\x04\x90"if (said(32, 228, 19124)){} [ 4AB4[ clear the fillstyle flag#message 229 "" [ \x00if (said(1, 229, 3851, 0)){} [ DS:0F0B[******************************************************************************[******************************************************************************[[ GETPIXEL FUNCTION[[ This function returns the current pixel data for a point on the graphics [ screen.[[ SYNTAX:[   block(-26, vX*, vY*, vRESULT);[[    * The compiler expects numbers for all arguments so pass variables as[      numbers, without the 'v' prefix[[ LIMITATIONS/CONSIDERATIONS: The visual and priority values for the screen[ pixel located at (x,y) on the graphics screen is returned in vRESULT. The[ visual color is in the lower nibble, and priority value is in the upper [ nibble. If either coordinate value is invalid returned results are [ meaningless. This function is most often used with the mouse to determine the[ screen color under the mouse pointer.[[ To easily extract either value, use the following math operations:[    priority = vRESULT / 16;[    tmp = vRESULT * 16;[    visual = tmp / 16;[[ PATCH CODE:#message 230 "\xAD\x33\xDB\x8A\xD8\x8A\x47\x09\x8A\xDC\x8A\x67\x09\x2A\x26\x2E"            "\x11\x86\xC4\xE8\xD5\x9C\xAC\x33\xDB\x8A\xD8\x06\x8E\x06\x28\x11"            "\x26\x8A\x05\x88\x47\x09\x07\x8B\xC6\x5D\x5F\x5E\xC3"if (said(45, 230, 45250)){} [ B0C2[******************************************************************************[******************************************************************************[ [ BIT-MATH FUNCTIONS[[ ths patch adds a set of bitwise functions that can be used to make it easier [ to manipulate variables.[[ SYNTAX*:[   [ BIT_AND[   block(-29, BYVAR, vNUM*, AMOUNT); [[   [ BIT_OR[   block(-30, BYVAR, vNUM*, AMOUNT);[[   [ BIT_XOR[   block(-31, BYVAR, vNUM*, AMOUNT);[[   [ BIT_NOT[   block(-32, ANY**, vNUM*, ANY**);[[   [ BIT_SHL[   block(-33, BYVAR, vNUM*, AMOUNT);[[   [ BIT_SHR[   block(-34, BYVAR, vNUM*, AMOUNT);[[    * The compiler expects numbers for all arguments so pass variables as[      numbers, without the 'v' prefix[[   ** This argument is ignored, so it can be any value[[ LIMITATIONS/CONSIDERATIONS: The value passed as AMOUNT is bit-operated into[ variable vNUM. If the BYVAR argument is non-zero, then AMOUNT is treated as[ a variable, and its value is used in the bit-operations on vNUM.[[ PATCH CODE:            [ FunctionHandler#message 231 "\xAC\x8B\xD0\x8B\xCB\xAD\x80\xFA\x01\x72\x05\x8A\xDC\x8A\x67\x09"            "\x8B\xD9\x80\xEB\x3A\x2E\xFF\xA7\x04\xB1\x29\xB1\x3C\xB1\x60\xB1"            "\x81\xB1\xB2\xB1\xE8\xB1\x8B\xC6\x5D\x5F\x5E\xC3"            [ bitand            "\x8A\xD8\x20\x67\x09\xEB\xF3"            [ bitor            "\x8A\xD8\x08\x67\x09\xEB\xEC"            [ bitxor            "\x8A\xD8\x30\x67\x09\xEB\xE5"            [ bitnot            "\x8A\xD8\x8A\x47\x09\xF6\xD0\x88\x47\x09\xEB\xD9"            [ bitshl            "\x8A\xD8\x8A\xCC\xD2\x67\x09\xEB\xD0"            [ bitshr            "\x8A\xD8\x8A\xCC\xD2\x6F\x09\xEB\xC7"if (said(95, 231, 45295)){} [ B0EF[******************************************************************************[******************************************************************************[[ BLOCK FUNCTION HANDLER[ [ This patch modifies the block command to be a launch point for custom [ functions used by other patches in this power pack. The block command is [ extremely useful, because there are three extra arguments available to be  [ used by custom functions and the first argument is only valid to AGI when [ it is <= 159; passing values above that (as negative values to make syntax [ easier) means there are as many as 95 different functions that could be [ assigned.[[ SYNTAX:[   block(FN, ARG1, ARG2, ARG3);[[ LIMITATIONS/CONSIDERATIONS: Function number (FN) is always passed as a [ negative value. Argument values are defined by each custom function. Refer[ to the appropriate power pack patch notes for details on argument syntax.[ [ PATCH CODE:#message 232 "\x8B\x76\x08\x80\x3C\xDE\x0F\x82\x7A\xBF\xAC\xF6\xD8\xD0\xE0\x32"            "\xE4\x8B\xD8\x2E\xFF\xA7\x64\xB1\xB6\x88\xB6\x88\xF3\x8D\x0B\xAA"            "\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA"            "\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\x0B\xAA\xB8\xAD\xEA\xAD"            "\xEA\xAD\x69\xAF\xA3\xAF\x04\xB0\x42\xB0\xC2\xB0\x39\x9F\x6D\x9F"            "\xEF\xB0\xEF\xB0\xEF\xB0\xEF\xB0\xEF\xB0\xEF\xB0"if (said(92, 232, 45390)){} [ B14E[ modify block command to use the patch#message 233 "\xE9\x7C\x40"if (said(3, 233, 28879)){} [ 70CF[******************************************************************************[******************************************************************************[ when done with memCopy, restore said command pointer#message 255 "\x7D\x08"if (said(2, 255, 1779, 0)){} [ DS:06F3[******************************************************************************return();[ **************************************[ MESSAGES[ **************************************[ for easier reference, messages are declared as they are used