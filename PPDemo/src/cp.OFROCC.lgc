[*********************************************************************
[
[ cp.OFROCC
[
[ Overall Frame Rate Options Control Console
[ 
[ This console lets the user try different settings of Turbo mode and
[ game speed settings. The Power Pack Demo game uses Turbo mode for 
[ all rooms and logics, so changes here will not affect the game's 
[ speed settings. But it gives the user an idea of how speed can
[ be controlled with/without the turbo option.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define oCursorB       o1  [ need four objects for cursor otherwise
#define oCursorT       o2  [ text gets erased
#define oCursorL       o3
#define oCursorR       o4
#define optCursor      o5
#define oSlider        o6
#define oCheck         o7
#define oTest          o8

[ loop values assigned to cursor objects
#define LP_OPT      0 [ option button states
#define LP_CF_OPT   1 [ cursor frame for mouse/keyb option buttons
#define LP_CF_CMD   2 [    "     "    "  OK, Cancel, and preset command buttons
#define LP_CF_CHK   3 [    "     "    "  checkbox button
#define LP_SLIDER   4 [ speed control slider button
#define LP_CHECK    5 [ turbo mode checkbox button
#define LP_TESTVIEW 6 [ test view to show effect of speed setting

#define tmpInterval   v220
#define cursorpos     v221
#define    CP_MOUSE   1
#define    CP_KEYB    2
#define    CP_TURBO   3
#define    CP_OK      4
#define    CP_CANCEL  5
#define    CP_SLIDER  6
#define    CP_SLOW    7
#define    CP_NORMAL  8
#define    CP_FAST    9
#define    CP_FASTEST 10
#define newpos       v222
#define cursorX      v223
#define cursorY      v224
#define btnAction    v225
#define    B_TURBO    1
#define    B_OK       2
#define    B_CANCEL   3
#define    B_SLIDER   4
#define    B_SLOW     5
#define    B_NORMAL   6
#define    B_FAST     7
#define    B_FASTEST  8
#define slideoffset  v226
#define egoPrevX     v227
#define egoPrevY     v228
#define egoPrevDir   v229

#define update       f220
#define tmpTurbo     f221
#define cursormode   f222
#define sliding      f223

[***************************************
[ ERROR CHECK
[***************************************
[ if this control panel is not enabled show error screen
if (!enableOFROCC) {
  if (newRoom) {
    work1 = pic.cp.Error;
    load.pic(work1);
    draw.pic(work1);
    discard.pic(work1);
    show.pic();
    set.text.attribute(PUSH.ATTRIBUTES, 0); [ push.attributes()
    set.text.attribute(GREEN, BLACK);
    display(1, 1, "> subsystem error");
    set.text.attribute(0, POP.ATTRIBUTES); [ pop.attributes()
    block(FADE.IN, BYNUM, FADECOUNT, BLACK); [ fade.in(FN_MODE, DELAY, COLOR)
    lastChar = 0;
  }
  [ any key, or any mouse-click to exit
  if ((have.key() || controller(cLeftClick) || controller(cRightClick))) {
    [ fade out 
    block(FADE.OUT, BYNUM, FADECOUNT, BLACK);  [ fade.out(FN_MODE, DELAY, COLOR)
    new.room(rm.ControlRoom); [ ##LE001##
  }
  return();
}

[***************************************
[ FIRST CYCLE ONLY
[***************************************
if (newRoom) {
  [ this is the first cycle through this room
  [ do basic room initialization

  [ if first time, score it
  work1 = cpusage;
  block(BIT.AND, BYNUM, &work1, 16); [ bit.and(FN_MODE, VAR, MASK)
  if (work1 == 0) {
    work1 = 5;
    call(lgc.ScoreHandler);
    block(BIT.OR, BYNUM, &cpusage, 16); [ bit.or(FN_MODE, VAR, MASK)
  }
  
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  
  [ this view has all the art for cursors and buttons
  load.view(vw.cp.OFROCC);
  
  [ option button that determines input mode; mouse or keyboard
  animate.obj(optCursor);
  set.view(optCursor, vw.cp.OFROCC);
  set.loop(optCursor, LP_OPT);
  set.cel(optCursor, 0);
  stop.cycling(optCursor);
  position(optCursor, 8, 65);
  draw(optCursor);
  
  [ cursor, in four parts, default to keyboard option position
  animate.obj(oCursorB);
  ignore.objs(oCursorB);
  set.view(oCursorB, vw.cp.OFROCC);
  set.loop(oCursorB, LP_CF_OPT);
  set.cel(oCursorB, 0);
  stop.cycling(oCursorB);
  
  animate.obj(oCursorL);
  ignore.objs(oCursorL);
  set.view(oCursorL, vw.cp.OFROCC);
  set.loop(oCursorL, LP_CF_OPT);
  set.cel(oCursorL, 1);
  stop.cycling(oCursorL);
  
  animate.obj(oCursorT);
  ignore.objs(oCursorT);
  set.view(oCursorT, vw.cp.OFROCC);
  set.loop(oCursorT, LP_CF_OPT);
  set.cel(oCursorT, 0);
  stop.cycling(oCursorT);
  
  animate.obj(oCursorR);
  ignore.objs(oCursorR);
  set.view(oCursorR, vw.cp.OFROCC);
  set.loop(oCursorR, LP_CF_OPT);
  set.cel(oCursorR, 1);
  stop.cycling(oCursorR);
  
  [ cursor starts on keyboard option button
  cursorpos = CP_KEYB;
  newpos = CP_KEYB;
  [ don't draw it yet though
  
  [ speed slider
  animate.obj(oSlider);
  ignore.objs(oSlider);
  set.view(oSlider, vw.cp.OFROCC);
  set.loop(oSlider, LP_SLIDER);
  set.cel(oSlider, 0);
  [ position depends on turbo mode and animation interval
  [ (turbo mode is always set)
  set(tmpTurbo);
  cursorX = animationInterval;
  if (tmpTurbo) {
    cursorX *= 2;
  } else {
    cursorX *= 6;
  }
  cursorX += 20;
  cursorY = 156;
  position.v(oSlider, cursorX, cursorY);
  stop.cycling(oSlider);
  draw(oSlider);
  [ cache current animationInterval in case user cancels
  tmpInterval = animationInterval;
  
  [ turbo checkbox
  animate.obj(oCheck);
  ignore.objs(oCheck);
  set.view(oCheck, vw.cp.OFROCC);
  set.loop(oCheck, LP_CHECK);
  position(oCheck, 5, 88);
  [ cel starts enabled
  set.cel(oCheck, 1);
  stop.cycling(oCheck);
  draw(oCheck);
  
  [ test object to show speed effect
  animate.obj(oTest);
  set.view(oTest, vw.cp.OFROCC);
  set.loop(oTest, LP_TESTVIEW);
  work1 = 1;
  cycle.time(oTest, work1);
  position(oTest, 122, 84);  
  draw(oTest);
  
  [ cache ego movement parameters (to be restored
  [ when returning to the control room)
  egoPrevX = egoX;
  egoPrevY = egoY;
  egoPrevDir = egoDir;
  
  [ no text input in this room
  prevent.input();
  lastChar = 0;
  [ arrow keys control cursor here
  egoDir = 0;
  
  [ mouse is enabled, not cursor; no button active
  enable.item(mouse);
  reset(cursormode);
  btnAction = 0;

  [ display the picture on screen
  show.pic();
  
  [ push display colors
  set.text.attribute(PUSH.ATTRIBUTES, 0); [ push.attributes()
  
  [ add button text (AFTER showing pic)
  set.text.attribute(BLACK, WHITE);
  display(14, 1, "  OK  ");
  display(16, 1, "Cancel");
  display(6, 16, " Slow");
  display(8, 16, "Normal");
  display(10, 16, " Fast");
  display(12, 16, "Fastest");
  [ current interval value
  if (animationInterval > 9) {
    display(16, 32, "%v10");
  } else {
    display(16, 32, " %v10");
  }
  [ other controls
  set.text.attribute(BLACK, LT_GRAY);
  display(6, 2, "  Cursor");
  display(8, 4, "Ms");
  display(8, 10, "Kb");
  
  display(11, 3, "Turbo");
  display(16, 12, "Animation Interval:");
  
  [ pop display colors
  set.text.attribute(0, POP.ATTRIBUTES); [ pop.attributes()
  
  [ remember to fade in to be able to see the screen again
  block(FADE.IN, BYNUM, FADECOUNT, BLACK); [ fade.in(FN_MODE, DELAY, COLOR)
  
  return();
}

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ is cursor in text mode?
if (cursormode) {
  [ check for direction arrow keypress
  if (egoDir != STOPPED) {
    [ cursor up
    if (egoDir == UP) {
      if (cursorpos == CP_TURBO) {
        newpos = CP_MOUSE;
      }
      if (cursorpos == CP_OK) {
        newpos = CP_TURBO;
      }
      if ((cursorpos == CP_CANCEL || cursorpos == CP_SLIDER || cursorpos > CP_SLOW)) {
        --newpos;
      } 
    }
    
    [ cursor right
    if (egoDir == RIGHT) {
      if (cursorpos == CP_MOUSE) {
        newpos = CP_KEYB;
      }
      if (cursorpos == CP_KEYB) {
        newpos = CP_NORMAL;
      }
      if (cursorpos == CP_TURBO) {
        newpos = CP_FAST;
      }
      if (cursorpos == CP_SLIDER) {
        [ adjust interval up one (max depends on turbo mode)
        if (tmpTurbo) {
          work1 = 60;
        } else {
          work1 = 20;
        }
        if (animationInterval < work1) {
          ++animationInterval;
          [ set button action to update the slider and value
          btnAction = B_SLIDER;
        }
      }
    }
    
    [ cursor down
    if (egoDir == DOWN) {
      if (cursorpos < CP_TURBO) {
        newpos = CP_TURBO;
      }
      if ((cursorpos == CP_TURBO || cursorpos == CP_OK || cursorpos == CP_CANCEL)) {
        ++newpos;
      }
      if (cursorpos > CP_SLIDER && cursorpos < CP_FASTEST) {
        ++newpos;
      }
      if (cursorpos == CP_FASTEST) {
        newpos = CP_SLIDER;
      }
    }
    
    [ cursor left
    if (egoDir == LEFT) {
      if (cursorpos == CP_KEYB) {
        newpos = CP_MOUSE;
      }
      if ((cursorpos == CP_SLOW || cursorpos == CP_NORMAL)) {
        newpos = CP_KEYB;
      }
      if ((cursorpos == CP_FAST || cursorpos == CP_FASTEST)) {
        newpos = CP_TURBO;
      }
      if (cursorpos == CP_SLIDER) {
        [ adjust interval down one
        if (animationInterval > 0) {
          --animationInterval;
          [ set button action to update the slider and value
          btnAction = B_SLIDER;
        }
      }
    }
    
    [ always reset dir so another keypress can be detected
    egoDir = 0;
    
    [ check for new cursor position
    if (cursorpos != newpos) {
      [ update the position
      cursorpos = newpos;
      [ depending on where cursor is, set the position and size/shape
      if ((cursorpos == CP_MOUSE || cursorpos == CP_KEYB)) {
        [ option buttons
        set.loop(oCursorB, LP_CF_OPT);
        set.loop(oCursorT, LP_CF_OPT);
        set.loop(oCursorL, LP_CF_OPT);
        set.loop(oCursorR, LP_CF_OPT);
        cursorY = 65;
        if (cursorpos == 1) {
          cursorX = 7;
        }
        if (cursorpos == 2) {
          cursorX = 31;
        }
      }
      [ OK, Cancel, and speed choice buttons
      if ((cursorpos == CP_OK || cursorpos == CP_CANCEL ||
           cursorpos == CP_SLOW || cursorpos == CP_NORMAL ||
           cursorpos == CP_FAST || cursorpos == CP_FASTEST)) {
        set.loop(oCursorB, LP_CF_CMD);
        set.loop(oCursorT, LP_CF_CMD);
        set.loop(oCursorL, LP_CF_CMD);
        set.loop(oCursorR, LP_CF_CMD);
        
        [ convert cursorpos into desired y value
        cursorY = cursorpos;
        if ((cursorpos == CP_OK || cursorpos == CP_CANCEL)) {
          cursorX = 3;
          cursorY -= 4;
          cursorY *= 16;
          cursorY += 112;
        } else {
          [ convert cursorpos into desired y value
          cursorX = 63;
          cursorY -= 7;
          cursorY *= 16;
          cursorY += 48;
        }
      }
      
      [ checkbox
      if (cursorpos == CP_TURBO) {
        set.loop(oCursorB, LP_CF_CHK);
        set.loop(oCursorT, LP_CF_CHK);
        set.loop(oCursorL, LP_CF_CHK);
        set.loop(oCursorR, LP_CF_CHK);
        cursorX = 4;
        cursorY = 89;
      }
      
      [ to move cursor, erase it first, otherwise, it will
      [ clear any text that is present anywhere between the
      [ new position and the old position
      erase(oCursorB);
      erase(oCursorL);
      erase(oCursorT);
      erase(oCursorR);

      [ if slider is selected
      if (cursorpos == CP_SLIDER) {
        [ no cursor; just change slider cel
        set.cel(oSlider, 1);
      } else {
        [ anything else- reset slider
        set.cel(oSlider, 0);
      
        [ and draw the cursor
        position.v(oCursorB, cursorX, cursorY);
        draw(oCursorB);
        --cursorY;
        position.v(oCursorL, cursorX, cursorY);
        draw(oCursorL);
        if (cursorpos < CP_OK) {
          cursorY -= 10;
        } else {
          cursorY -= 8;
        }
        position.v(oCursorT, cursorX, cursorY);
        draw(oCursorT);
        if (cursorpos < CP_TURBO) {
          cursorX += 17;
          cursorY += 10;
        } else {
          if (cursorpos == CP_TURBO) {
            cursorX += 6;
            cursorY += 10;
          } else {
            cursorX += 29;
            cursorY += 8;
          }
        }
        position.v(oCursorR, cursorX, cursorY);
        draw(oCursorR);
      }
    }
  }
  
  [ check for selection (space/enter for buttons)
  if (have.key()) {
    [ space/enter
    if ((lastChar == 32 || lastChar == 13 || lastChar == 10)) {
      if (cursorpos  == CP_MOUSE) {
        [ switch to mouse control
        reset(cursormode);
        enable.item(mouse);
        erase(optCursor);
        position(optCursor, 8, 65);
        draw(optCursor);
        [ erase the cursor objects
        erase(oCursorB);
        erase(oCursorT);
        erase(oCursorL);
        erase(oCursorR);
      }
      if (cursorpos > 2 && cursorpos != CP_SLIDER) {
        btnAction = cursorpos;
        btnAction -= 2;
      }
    }  
  }
} else {
  [ mouse is active: check for mouse actions
  
  [ check for mouse click
  if (controller(cLeftClick)) {
    [ over cursor type keyboard option [31, 53 - 49, 66]
    if (mouseX > 32 && mouseX < 38 && mouseY > 51 && mouseY < 64) {
      [ switch to keyboard cursor
      set(cursormode);
      disable.item(mouse);
      erase(optCursor);
      position(optCursor, 32, 65);
      draw(optCursor);
      [ start cursor on keyboard option button
      cursorpos = CP_KEYB;
      newpos = CP_KEYB;
      position(oCursorB, 31, 65);
      draw(oCursorB);
      position(oCursorL, 31, 64);
      draw(oCursorL);
      position(oCursorT, 31, 54);
      draw(oCursorT);
      position(oCursorR, 48, 64);
      draw(oCursorR);
    }
    
    [ over OK button [3, 103 - 32, 112]
    if (mouseX > 2 && mouseX < 33 && mouseY > 102 && mouseY < 113) {
      btnAction = B_OK;
    }
      
    [ over Cancel button [3, 119 - 32, 128]
    if (mouseX > 2 && mouseX < 33 && mouseY > 118 && mouseY < 129) {
      btnAction = B_CANCEL;
    }
    
    [ over Turbo button [5, 79 - 9, 88]
    if (mouseX > 4 && mouseX < 10 && mouseY > 78 && mouseY < 89) {
      btnAction = B_TURBO;
    }
    
    [ over Slow button [63, 39 - 92, 48]
    if (mouseX > 62 && mouseX < 93 && mouseY > 38 && mouseY < 49) {
      btnAction = B_SLOW;
    }
    [ over Normal button [63, 55 - 92, 64]
    if (mouseX > 62 && mouseX < 93 && mouseY > 54 && mouseY < 65) {
      btnAction = B_NORMAL;
    }
    [ over Fast button [63, 71 - 92, 80]
    if (mouseX > 62 && mouseX < 93 && mouseY > 70 && mouseY < 81) {
      btnAction = B_FAST;
    }
    [ over Fast button [63, 87 - 92, 96]
    if (mouseX > 62 && mouseX < 93 && mouseY > 88 && mouseY < 97) {
      btnAction = B_FASTEST;
    }
    
    [ over slider zone
    if (mouseY > 142 && mouseY < 157) {
      get.posn(oSlider, cursorX, cursorY);
      [ adjust for button width
      cursorY = cursorX;
      cursorY += 3;
      [ is mouse on the slider?
      if (mouseX >= cursorX && mouseX < cursorY) {
        [ start slide action
        set(sliding);
        [ calculate offset from object position to mouse position
        slideoffset = cursorX;
        slideoffset -= mouseX;
      }
    }
  }
  
  [ check for mouse up, to clear slider movement
  if (mouseBtn != 1) {
    [ cancel slide operation
    reset(sliding);
  }
  
  if (sliding) {
    [ convert mousepos to a slider position
    [ (slideX = mouseX + offset)
    work1 = mouseX;
    work1 += slideoffset;
    [ limit to valid range (20-140)
    if (work1 > 140) {
      work1 = 140;
    }
    if (work1 < 20) {
      work1 = 20;
    }
    [ limit to factors of 2 for turbo, 6 for normal
    if (tmpTurbo) {
      work1 /= 2;
      work1 *= 2;
    } else {
      work1 /= 6;
      work1 *= 6;
      work1 += 2;
    }
    [ reposition the slider
    cursorY = 156;
    reposition.to.v(oSlider, work1, cursorY);
    [ convert position to speed value
    work1 -= 20;
    if (tmpTurbo) {
      [ speed = (pos - 20)/2
      work1 /= 2;
    } else {
      [ speed = (pos - 20)/6
      work1 /= 6;
    }
    [ if it changed, update speed
    if (work1 != animationInterval) {
      animationInterval = work1;
      set.text.attribute(PUSH.ATTRIBUTES, 0); [ push.attributes()
      set.text.attribute(BLACK, WHITE);
      if (animationInterval > 9) {
        display(16, 32, "%v10");
      } else {
        display(16, 32, " %v10");
      }
      set.text.attribute(0, POP.ATTRIBUTES); [ pop.attributes()
    }
  }
}

[ check for button action
if (btnAction == 0) {
  return();
}

if ((btnAction == B_OK || btnAction == B_CANCEL)) {
  if (btnAction == B_OK) {
    [ save animation interval (but always stay in turbomode)
    if (!tmpTurbo) {
      work1 = TURBO_SPEED;
      cycle.time(TOGGLE.TURBO, work1); [ toggle.turbo(vMODE)
      animationInterval *= 3;
    }
    call(lgc.SaveOptions);
    print.at("Speed setting updated.", 3, 6, 31);
  } else {
    [ restore animation interval 
    animationInterval = tmpInterval;
    [ always stay in turbo mode
    if (!tmpTurbo) {
      work1 = TURBO_SPEED;
      cycle.time(TOGGLE.TURBO, work1); [ toggle.turbo(vMODE)
    }
  }
  
  [ restore ego movement parameters
  egoX = egoPrevX;
  egoY = egoPrevY;
  egoDir = egoPrevDir;
  
  [ fade out 
  block(FADE.OUT, BYNUM, FADECOUNT, BLACK);  [ fade.out(FN_MODE, DELAY, COLOR)
  
  [ go back to previous room
  new.room(rm.ControlRoom); [ ##LE002##
}

[ changing turbo mode
if (btnAction == B_TURBO) {
  toggle(tmpTurbo);
  if (tmpTurbo) {
    work1 = TURBO_SPEED;
    cycle.time(TOGGLE.TURBO, work1); [ toggle.turbo(vMODE)
    set.cel(oCheck, 1);
    animationInterval *= 3;
  } else {
    work1 = NORMAL_SPEED;
    cycle.time(TOGGLE.TURBO, work1); [ toggle.turbo(vMODE)
    set.cel(oCheck, 0);
    animationInterval /= 3;
  }
  [ force slider/text update by using slider button
  btnAction = B_SLIDER;
  return();
}

[ push colors
set.text.attribute(PUSH.ATTRIBUTES, 0); [ push.attributes()
set.text.attribute(BLACK, WHITE);

[ slider update
if (btnAction == B_SLIDER) {
  if (animationInterval > 9) {
    display(16, 32, "%v10");
  } else {
    display(16, 32, " %v10");
  }
  [ reposition the slider
  cursorX = animationInterval;
  if (tmpTurbo) {
    cursorX *= 2;
  } else {
    cursorX *= 6;
  }
  cursorX += 20;
  cursorY = 156;
  reposition.to.v(oSlider, cursorX, cursorY);
}

[ speed by button
if (btnAction == B_SLOW) {
  if (tmpTurbo) {
    animationInterval = 12;
    display(16, 32, "%v10");
  } else {
    animationInterval = 4;
    display(16, 32, " %v10");
  }
  reposition.to(oSlider, 44, 156);
}

if (btnAction == B_NORMAL) {
  if (tmpTurbo) {
    animationInterval = 6;
  } else {
    animationInterval = 2;
  }
  display(16, 32, " %v10");
  reposition.to(oSlider, 32, 156);
}

if (btnAction == B_FAST) {
  if (tmpTurbo) {
    animationInterval = 3;
  } else {
    animationInterval = 1;
  }
  display(16, 32, " %v10");
  reposition.to(oSlider, 26, 156);
}

if (btnAction == B_FASTEST) {
  animationInterval = 0;
  display(16, 32, " %v10");
  reposition.to(oSlider, 20, 156);
}

[ restore colors
set.text.attribute(0, POP.ATTRIBUTES); [ pop.attributes()

[ always reset button action
btnaction = 0;

return();


[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "  OK  "
#message 2 "Cancel"
#message 3 " Slow"
#message 4 "Normal"
#message 5 " Fast"
#message 6 "Fastest"
#message 7 "%v10"
#message 8 " %v10"
#message 9 "  Cursor"
#message 10 "Ms"
#message 11 "Kb"
#message 12 "Turbo"
#message 13 "Animation Interval:"
#message 14 "speed changed "