[ ********************************************************************[ [ cp.MsgBox[[ the Rectangular Alpha-Numeric Display Options Control Console[[ ********************************************************************#define oCursorB       o1  [ need four objects for cursor otherwise#define oCursorT       o2  [ text gets erased#define oCursorL       o3#define oCursorR       o4#define optRightBtn    o5#define optCursor      o6#define tmpBG        v220#define tmpFG        v221#define tmpBorder    v222#define cRow         v223#define cCol         v224#define cInit        v225#define palFG        v226#define palBG        v227#define colorindex   v228#define cursorpos    v229#define newpos       v230#define cursorX      v231#define cursorY      v232#define btnAction    v233#define    B_OK     1#define    B_CANCEL 2#define    B_RESET  3#define    B_PAL_FG 4#define    B_PAL_BG 5#define    B_PAL_BD 6#define    B_OP_BG  7#define    B_OP_BD  8#define update       f220#define rightmode    f221   [ when true, rightclick sets border                            [ when false, rightclick sets bg#define cursormode   f222                            [ **************************************[ FIRST CYCLE ONLY[ **************************************if (newRoom) {  [ load, draw and discard the picture resource for the current room  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);    [ do basic room initialization  call(lgc.RoomInit);  [ this view has all the art for cursors and buttons  load.view(vw.rmMsgBoxArt);    [ option button that determines action on palette right-click  animate.obj(optRightBtn);  set.view(optRightBtn, vw.rmMsgBoxArt);  set.loop(optRightBtn, 0);  set.cel(optRightBtn, 0);  stop.cycling(optRightBtn);  position(optRightBtn, 104, 97);  draw(optRightBtn);    [ option button that determines input mode; mouse or keyboard  animate.obj(optCursor);  set.view(optCursor, vw.rmMsgBoxArt);  set.loop(optCursor, 0);  set.cel(optCursor, 0);  stop.cycling(optCursor);  position(optCursor, 8, 97);  draw(optCursor);    animate.obj(oCursorB);  ignore.objs(oCursorB);  set.view(oCursorB, vw.rmMsgBoxArt);  set.loop(oCursorB, 3);  set.cel(oCursorB, 1);  stop.cycling(oCursorB);  position(oCursorB, 30, 97);    animate.obj(oCursorT);  ignore.objs(oCursorT);  set.view(oCursorT, vw.rmMsgBoxArt);  set.loop(oCursorT, 3);  set.cel(oCursorT, 1);  stop.cycling(oCursorT);  position(oCursorT, 30, 86);    animate.obj(oCursorL);  ignore.objs(oCursorL);  set.view(oCursorL, vw.rmMsgBoxArt);  set.loop(oCursorL, 3);  set.cel(oCursorL, 3);  stop.cycling(oCursorL);  position(oCursorL, 30, 96);    animate.obj(oCursorR);  ignore.objs(oCursorR);  set.view(oCursorR, vw.rmMsgBoxArt);  set.loop(oCursorR, 3);  set.cel(oCursorR, 3);  stop.cycling(oCursorR);  position(oCursorR, 47, 97);    cursorpos = 2;  newpos = 2;  [ don't draw it yet though    [ no text input in this room  prevent.input();  lastChar = 0;  [ arrow keys control cursor here  egoDir = 0;    [ mouse is enabled, not cursor  enable.item(mouse);  reset(cursormode);    btnAction = 0;  [ update the sample messagebox and palette  tmpBG = msgBoxBG;  tmpFG = msgBoxFG;  tmpBorder = msgBoxBorder;  set(update);  goto(checkupdate);}[ **************************************[ EVERY CYCLE[ **************************************[ is cursor in text mode?if (cursormode) {  [ check for direction arrow keypress  if (egoDir != STOPPED) {    [ cursor up    if (egoDir == UP) {      if (cursorpos == 5) {        newpos = 1;      }      if ((cursorpos == 6 || cursorpos == 7)) {        newpos -= 1;      }       if (cursorpos >= 16) {        newpos -= 8;      }    }        [ cursor right    if (egoDir == RIGHT) {      if (cursorpos < 2) {        newpos += 1;      }      if ((cursorpos == 5 || cursorpos == 6)) {        newpos = 8;      }      if (cursorpos == 7) {        newpos = 16;      }      if (cursorpos > 7 && cursorpos < 15) {        newpos += 1;      }      if (cursorpos > 15 && cursorpos < 23) {        newpos += 1;      }    }        [ cursor down    if (egoDir == DOWN) {      if (cursorpos < 3) {        newpos = 5;      }      if (cursorpos == 3) {        newpos = 12;      }      if (cursorpos == 4) {        newpos = 14;      }      if ((cursorpos == 5 || cursorpos == 6)) {        newpos += 1;      }      if (cursorpos > 7 && cursorpos < 16) {        newpos += 8;      }    }        [ cursor left    if (egoDir == LEFT) {      if (cursorpos > 1 && cursorpos < 5) {        newpos -= 1;      }      if (cursorpos == 8) {        newpos = 5;      }      if (cursorpos > 8 && cursorpos < 16) {        newpos -= 1;      }      if (cursorpos == 16) {        newpos = 7;      }      if (cursorpos > 16) {        newpos -= 1;      }    }        [ always reset dir so another keypress can be detected    egoDir = 0;        [ check for new cursor position    if (cursorpos != newpos) {      [ update the position      cursorpos = newpos;      [ depending on where cursor is, set the position and size/shape      if (cursorpos < 5) {        [ option buttons (note that only the input types are         [ allowed; the right-button option button is disabled        [ in keyboard mode)        set.loop(oCursorB, 3);        stop.cycling(oCursorB);        set.cel(oCursorB, 1);        set.loop(oCursorT, 3);        stop.cycling(oCursorT);        set.cel(oCursorT, 1);        set.loop(oCursorL, 3);        stop.cycling(oCursorL);        set.cel(oCursorL, 3);        set.loop(oCursorR, 3);        stop.cycling(oCursorR);        set.cel(oCursorR, 3);                cursorY = 97;        if (cursorpos == 1) {          cursorX = 7;        }        if (cursorpos == 2) {          cursorX = 31;        }      }      [ OK, Cancel, and Restore buttons      if (cursorpos > 4 && cursorpos < 8) {        set.loop(oCursorB, 3);        stop.cycling(oCursorB);        set.cel(oCursorB, 0);        set.loop(oCursorT, 3);        stop.cycling(oCursorT);        set.cel(oCursorT, 0);        set.loop(oCursorL, 3);        stop.cycling(oCursorL);        set.cel(oCursorL, 2);        set.loop(oCursorR, 3);        stop.cycling(oCursorR);        set.cel(oCursorR, 2);                cursorX = 3;        [ convert cursorpos into desired y value        cursorY = cursorpos;        cursorY -= 5;        cursorY *= 16;        cursorY += 128;      }            [ palette 'buttons' (color squares)      if (cursorpos > 7) {        cursorX = cursorpos;        cursorX -= 8;        cursorX *= 12;        cursorX += 55;        if (cursorpos > 15) {          set.loop(oCursorB, 2);          cursorY = 162;          cursorX -= 96;          set.loop(oCursorB, 2);          set.loop(oCursorT, 2);          set.loop(oCursorL, 5);          set.loop(oCursorR, 5);        } else {          cursorY = 138;          set.loop(oCursorB, 1);          set.loop(oCursorT, 1);          set.loop(oCursorL, 4);          set.loop(oCursorR, 4);        }        set.cel(oCursorB, 0);        start.cycling(oCursorB);        set.cel(oCursorT, 1);        start.cycling(oCursorT);        set.cel(oCursorL, 2);        start.cycling(oCursorL);        set.cel(oCursorR, 3);        start.cycling(oCursorR);      }      [ to move cursor, erase it first, otherwise, it will      [ clear any text that is present anywhere between the      [ new position and the old position      erase(oCursorB);      position.v(oCursorB, cursorX, cursorY);      draw(oCursorB);            erase(oCursorL);      --cursorY;      position.v(oCursorL, cursorX, cursorY);      draw(oCursorL);            erase(oCursorT);      if (cursorpos < 5) {        cursorY -= 10;      } else {        if (cursorpos < 8) {          cursorY -= 8;        } else {          cursorY -= 21;        }      }      position.v(oCursorT, cursorX, cursorY);      draw(oCursorT);            erase(oCursorR);      if (cursorpos < 5) {        cursorX += 17;        cursorY += 10;      } else {        if (cursorpos < 8) {          cursorX += 25;          cursorY += 8;        } else {          cursorX += 10;          cursorY += 21;        }      }      position.v(oCursorR, cursorX, cursorY);      draw(oCursorR);    }  }    [ check for selection (space/enter for button, 'B/F/D' for colors)  if (have.key()) {    [ space/enter    if ((lastChar == 32 || lastChar == 13 || lastChar == 10)) {      if (cursorpos  == 1) {        [ switch to mouse control        reset(cursormode);        enable.item(mouse);        erase(optCursor);        position(optCursor, 8, 97);        draw(optCursor);        [ erase the cursor objects        erase(oCursorB);        erase(oCursorT);        erase(oCursorL);        erase(oCursorR);        [ re-enable right button option        set.cel(optRightBtn, 0);      }      if (cursorpos  == 5) {        btnAction = B_OK;      }      if (cursorpos  == 6) {        btnAction = B_CANCEL;      }      if (cursorpos  == 7) {        btnAction = B_RESET;      }    }        colorindex = cursorpos;    colorindex -= 8;    [ B    if ((lastChar == 66 || lastChar == 98)) {      if (cursorpos > 7) {        btnAction = B_PAL_BG;      }    }        [ F    if ((lastChar == 70 || lastChar == 102)) {      if (cursorpos > 7) {        btnAction = B_PAL_FG;      }    }        [ D    if ((lastChar == 68 || lastChar == 100)) {      if (cursorpos > 7) {        btnAction = B_PAL_BD;      }    }  }} else {  [ mouse is active: check for mouse actions    [ is cursor over the palette? [54, 115 - 150, 163]  if (mouseX > 54 && mouseX < 150 && mouseY > 123 && mouseY < 171) {    [ calculate color index    colorindex = mousex;    colorindex -= 54;    colorindex /= 12;    if (mousey > 147) {      colorindex += 8;    }  } else {    colorindex = -1;  }  [ [ if on a line, exit? ?add fn to check pixel color?  [ check for mouse clicks  if (controller(cLeftClick)) {    [ over OK button [2,118 - 29,129] (need to add 8 to y due to pic offset)    if (mouseX > 2 && mouseX < 29 && mouseY > 126 && mouseY < 137) {      btnAction = B_OK;    }          [ over Cancel button [2, 134 - 29, 145]    if (mouseX > 2 && mouseX < 29 && mouseY > 142 && mouseY < 153) {      btnAction = B_CANCEL;    }        [ over Reset button [2, 150 - 29, 161]    if (mouseX > 2 && mouseX < 29 && mouseY > 158 && mouseY < 169) {      btnAction = B_RESET;    }        [ over palette (color index != -1)    if (colorindex != -1) {      btnAction = B_PAL_FG;    }         [ over right button bg option    if (mouseX > 104 && mouseX < 110 && mouseY > 95 && mouseY < 104) {      btnAction = B_OP_BG;    }      [ over right button border option     if (mouseX > 128 && mouseX < 134 && mouseY > 95 && mouseY < 104) {      btnAction = B_OP_BD;    }      [ over cursor type keyboard option     if (mouseX > 30 && mouseX < 38 && mouseY > 95 && mouseY < 104) {      [ switch to keyboard cursor      set(cursormode);      disable.item(mouse);      erase(optCursor);      position(optCursor, 32, 97);      draw(optCursor);      [ show the cursor object      cursorpos = 2;      newpos = 2;      position(oCursorB, 31, 97);      draw(oCursorB);      position(oCursorT, 31, 86);      draw(oCursorT);      position(oCursorL, 31, 96);      draw(oCursorL);      position(oCursorR, 48, 96);      draw(oCursorR);            set.cel(optRightBtn, 2);    }  }  [ check for right-click  if (controller(cRightClick)) {    [ over palette (color index != -1)    if (colorindex != -1) {      if (rightmode) {        btnAction = B_PAL_BD;      } else {        btnAction = B_PAL_BG;      }    }    }}[ check for button actionif (btnAction == B_OK) {  [ save the colors  msgBoxBG = tmpBG;  msgBoxFG = tmpFG;  msgBoxBorder = tmpBorder;  [ make the change  block(MSGBOX.COL.V, 45, 44, 43);  print.at("Message box colors have been changed.", 5, 6, 31);  [ go back to previous room  new.room.v(previousRoom); }if (btnAction == B_CANCEL) {  [ just go back to previous room  new.room.v(previousRoom);}if (btnAction == B_RESET) {  [ change to default colors  tmpBG = WHITE;  tmpFG = BLACK;  tmpBorder = RED;  [ and update them  set(update);}if (btnAction == B_PAL_FG) {  [ change FG IF it doesn't match current FG/BG  if (tmpFG != colorindex && tmpBG != colorindex) {    [ change FG    tmpFG = colorindex;    set(update);  }}if (btnAction ==  B_PAL_BG) {  [ change BG, IF it doesn't match current FG/BG  if (tmpFG != colorindex && tmpBG != colorindex) {    tmpBG = colorindex;    set(update);  }}if (btnAction ==  B_PAL_BD) {  [ change border  tmpBorder = colorindex;  set(update);}if (btnAction ==  B_OP_BG) {  [ right-click will control background  reset(rightmode);  erase(optRightBtn);  position(optRightBtn, 104, 97);  draw(optRightBtn);}if (btnAction ==  B_OP_BD) {  [ right-click will control border  set(rightmode);  erase(optRightBtn);  position(optRightBtn, 128, 97);  draw(optRightBtn);}[ always reset button actionbtnaction = 0;  :checkupdate[ if colors have changed, update the palette and sampleif (update) {  reset(update);    [ this string draws a blank msgbox with correct bkgd color and border  s2 = "F0%s4F41B233480231CF81E28F0%s5F41C24337F241DFF";  [ convert bkgd and border colors to hex strings  block(BYTE2HEX, 4, 220, 0);   block(BYTE2HEX, 5, 222, 0);  [ now execute the picdraw function (enable paintover)  block(PIC.DRAW, 2, 1, 0);  [ if picture is not visible yet, show it now   if (newroom) {    show.pic();  }    [ push display colors  set.text.attribute(-1, 0);    [ add test message text  toggle.monitor();  set.text.attribute(221, 220);  display(6, 8, "This is a test message.");    [ update palette to show current color selections  cInit = 1; [ BG  cRow = 16;  cCol = tmpBG;  cCol *= 3;  palBG = tmpBG;  if (tmpBG > 7) {    cRow += 3;    cCol -= 10;    palFG = BLACK;  } else {    cCol += 14;    palFG = WHITE;  }  toggle.monitor();  set.text.attribute(226, 227);  display.v(cRow, cCol, cInit);    cInit = 2; [ FG  cRow = 16;  cCol = tmpFG;  cCol *= 3;  palBG = tmpFG;  if (tmpFG > 7) {    cRow += 3;    cCol -= 10;    palFG = BLACK;  } else {    cCol += 14;    palFG = WHITE;  }  toggle.monitor();  set.text.attribute(226, 227);  display.v(cRow, cCol, cInit);    cInit = 3; [ Border  cRow = 17;  cCol = tmpBorder;  cCol *= 3;  palBG = tmpBorder;  if (tmpBorder > 7) {    cRow += 3;    cCol -= 10;    palFG = BLACK;  } else {    cCol += 14;    palFG = WHITE;  }  toggle.monitor();  set.text.attribute(226, 227);  display.v(cRow, cCol, cInit);    [ add button text  set.text.attribute(BLACK, WHITE);  display(16, 1, "  OK  ");  display(18, 1, "Cancel");  display(20, 1, "Reset ");    set.text.attribute(BLACK, LT_GRAY);  display(10, 2, "  Cursor   ");  display(12, 4, "Ms");  display(12, 10, "Kb");    display(10, 26, "Right Click");  display(12, 28, "BG");  display(12, 34, "Bd");      [ pop display colors  set.text.attribute(0, -1);  }:donereturn();[ **************************************[ DECLARED MESSAGES[ **************************************#message 1 "BG"#message 2 "FG"#message 3 "Bd"#message 4 "  "