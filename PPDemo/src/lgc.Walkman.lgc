[*********************************************************************
[ 
[ lgc.Walkman
[ 
[ Close up of the Sony Walkman. Player can load/unload the cassette, 
[ pause/play/rewind/fast forward sound tracks.
[
[ There are 82 tracks on the cassette, 41 on each side.
[ SIDE A: 1 - 41, 42 means at end of side A
[ SIDE B: 43 - 83, 84 means at end of side B
[
[ The main game loop is not activated while the walkman is displayed
[ so a custom loop, using add.to.pic(), is used to cycle the spindles
[ when playing a sound.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define helpText                   v240
  #define H_BLANK                4
  #define H_EXIT                 7
  #define H_FASTFWD              8
  #define H_REWIND               9
  #define H_STOP_EJ             10
  #define H_PLAY                11
  #define H_COVER               12
  #define H_INSIDE              13
#define tmpCursor                  v241
#define counter1                   v242
#define counter2                   v243
#define spindleCel                 v244
#define spinDelay                  v245

#define coverClosed                f240
#define mouseDown                  f241
#define flipCassette               f242

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ stop the game clock while examining items
block(PAUSE.CLOCK, PAUSE_CLOCK, 0, 0); [ pause.clock(MODE)

[ no script entries for this sequence
set(noScript);
[ no regular input either
prevent.input();
status.line.off();

[ fade out until done loading
block(FADE.OUT, BYNUM, 5, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)

set.text.attribute(PUSH.ATTRIBUTES, 0); [ push.attributes()
set.text.attribute(DK_GRAY, BLACK);

[ use default mouse cursor
cursoricon = C_DEFAULT;
tmpCursor = C_DEFAULT;
set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)

[ hide objects while showing walkman
block(HIDE.OBJS, HIDE_OBJS, 0, 0); [ hide.objs(MODE)

[ display correct walkman picture
work1 = pic.Walkman;
load.pic(work1);
draw.pic(work1);
discard.pic(work1);
if (cassetteLoaded) {
  work1 = ovl.Walkman2;
} else {
  work1 = ovl.Walkman1;
}
load.pic(work1);
overlay.pic(work1);
discard.pic(work1);
show.pic();

[ spindles
load.view(vw.WalkmanArt);
spindleCel = 0;
spinDelay = 0;

[ cover always starts closed
set(coverClosed);

[ if currently playing 
if (playWalkman) {
  [ reload and restart music
  block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
  work1 = &musicDone;
  block(SND.V.FN, SOUND.V, &currentTrack, &work1); [ sound.v(vSNDNUM, vDONEFLAG)
}

[ fade back in
block(FADE.IN, BYNUM, 5, BLACK); [ fade.in(FN_MODE, DELAY, COLOR)

reset(mouseDown);

[ main input loop; wait until a key is pressed or mouse
[ button pressed
:waitforit
  lastChar = 0;
  
  [ spindle
  if (playWalkman) {
    ++spinDelay;
    if (spinDelay == 255) {
      spinDelay = 0;
      ++spindleCel;
      if (spindleCel == 4) {
        spindleCel = 0;
      }
      if (spindleCel == 0) {
        add.to.pic(vw.WalkmanArt, 0, 0, 86, 123, 12, 4);
      }
      if (spindleCel == 1) {
        add.to.pic(vw.WalkmanArt, 0, 1, 86, 123, 12, 4);
      }
      if (spindleCel == 2) {
        add.to.pic(vw.WalkmanArt, 0, 2, 86, 123, 12, 4);
      }
      if (spindleCel == 3) {
        add.to.pic(vw.WalkmanArt, 0, 3, 86, 123, 12, 4);
      }
    }
  }
        
  [ do nothing if flipping cassette
  if (flipCassette) {
    --counter2;
    if (counter2 == 0) {
      counter2 = 4;
      --counter1;
    }
    
    if (counter1 == 0) {
      reset(flipCassette);
      set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
    } else {
      goto(waitforit);
    }
  }
  
  [ get button by priority color
  if (mouseY < 168) {
    block(GET.PIXEL, &mouseX, &mouseY, &work1); [ get.pixel(vX, vY, vRESULT)
    work1 /= 16;
    if (work1 != helpText) {
      [ show button help if over a button
      helpText = work1;
      if (work1 == H_BLANK) {
        clear.lines(23, 23, BLACK);
        tmpCursor = C_DEFAULT;
      }
      if (work1 == H_EXIT) {
        display(23, 32, "return to game");
        tmpCursor = C_DEFAULT;
      }
      if (work1 == H_FASTFWD) {
        display(23, 33, "fast forward");
        tmpCursor = C_USE;
      }
      if (work1 == H_REWIND) {
        display(23, 36, "rewind");
        tmpCursor = C_USE;
      }
      if (work1 == H_STOP_EJ) {
        display(23, 34, "stop/eject");
        tmpCursor = C_USE;
      }
      if (work1 == H_PLAY) {
        display(23, 37, "play");
        tmpCursor = C_USE;
      }
      if (work1 == H_COVER) {
        clear.lines(23, 23, BLACK);
        if (coverClosed) {
          tmpCursor = C_DEFAULT;
        } else {
          tmpCursor = C_USE;
        }
      }
      if (work1 == H_INSIDE) {
        clear.lines(23, 23, BLACK);
        if (has("cassette tape")) {
          tmpCursor = C_TAPE;
          if (cassetteSideB) {
            display(23, 25, "Side B: %m11");
          } else {
            display(23, 25, "Side A: %m11");
          }
        } else {
          if (cassetteLoaded) {
            tmpCursor = C_USE;
          } else {
            tmpCursor = C_DEFAULT;
          }
        }
      }
    }
  }
  [ adjust cursor if applicable
  if (tmpCursor != cursoricon) {
    cursoricon = tmpCursor;
    set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  }

  [ check for track end
  if (musicDone) {
    reset(musicDone);
    [ discard current track
    block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
    [ next track
    [ SIDE A: 1 - 41, 42 means at end of side A
    [ SIDE B: 43 - 83, 84 means at end of side B
    ++currentTrack;
    if ((currentTrack == 42 || currentTrack == 84)) {
      reset(playWalkman);
    } else {
      [ load and play the next track
      block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
      work2 = &musicDone;
      block(SND.V.FN, SOUND.V, &currentTrack, &work2); [ sound.v(vSNDNUM, vDONEFLAG)
    }
  }
  
[ loop until button clicked or key pressed
if (mouseBtn == 0 && !have.key()) {
  goto(waitforit);
}

if (lastChar == 27) {
  goto(exit);
}

[ space to flip cassette
if (lastChar == 32 && cursoricon == C_TAPE) {
  toggle(cassetteSideB);
  helpText = -1;
  [ adjust position
  [ SIDE A: 1 - 41, 42 means at end of side A
  [ SIDE B: 43 - 83, 84 means at end of side B
  [ to flip: new = 85 - old
  currentTrack *= -1;
  currentTrack += 85;
  [ show a wait cursor for a bit
  set(flipCassette);
  counter1 = 255;
  counter2 = 3;
  cursoricon = C_WAIT;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  goto(waitforit);
}

[ clear mouse flag when button is up
if (mouseBtn == 0) {
  reset(mouseDown);
}

[ check for mouse click (mouse press, since events aren't 
[ triggered unless main loop is used)
if (mouseBtn == 1 && !mouseDown) {
  set(mouseDown);
  
  [ exit
  if (work1 == 7) {
    goto(exit);
  }
  
  [ fast forward
  if (work1 == 8) {
    [ if cassette is loaded and cover closed
    if (cassetteLoaded && coverClosed) {
      [ advance to next track
      
      [ currently playing?
      if (playWalkman) {
        [ stop current track
        stop.sound();
        block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
      }
      [ move to next track
      [ SIDE A: 1 - 41, 42 means at end of side A
      [ SIDE B: 43 - 83, 84 means at end of side B
      if (currentTrack != 42 && currentTrack != 84) {
        ++currentTrack;
      }
      if ((currentTrack == 42 || currentTrack == 84)) {
        [ end of this side; stop playing
        reset(playWalkman);
        reset(musicDone);
      }
      [ if another track is now active, play it
      if (playWalkman) {
        block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
        work2 = &musicDone;
        block(SND.V.FN, SOUND.V, &currentTrack, &work2); [ sound.v(vSNDNUM, vDONEFLAG)
      }
    }
  }
  
  [ rewind
  if (work1 == 9) {
    [ if cassette is loaded and cover closed
    if (cassetteLoaded && coverClosed) {
      [ go back to previous track
      [ SIDE A: 1 - 41, 42 means at end of side A
      [ SIDE B: 43 - 83, 84 means at end of side B
      
      [ currently playing?
      if (playWalkman) {
        [ stop current track
        stop.sound();
        block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
      }
      [ move to previous track
      --currentTrack;
      if (currentTrack == 0) {
        [ stay on first track of side A
        currentTrack = 1;
      }
      if (currentTrack == 42) {
        [ stay on first track of side B
        currentTrack = 43;
      }
      if (playWalkman) {
        [ play active track
        block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
        work2 = &musicDone;
        block(SND.V.FN, SOUND.V, &currentTrack, &work2); [ sound.v(vSNDNUM, vDONEFLAG)
      }
    }
  }
  
  [ stop/eject
  if (work1 == 10) {
    if (playWalkman) {
      [ stop the sound, and discard the resource
      reset(playWalkman); 
      stop.sound();
      reset(musicDone);
      block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
    } else {
      if (coverClosed) {
        reset(coverClosed);
        if (cassetteLoaded) {
          work2 = ovl.Walkman4;
        } else {
          work2 = ovl.Walkman3;
        }
        load.pic(work2);
        overlay.pic(work2);
        discard.pic(work2);
        [ if loaded, add correct side marker
        if (cassetteLoaded && !coverClosed) {
          if (cassetteSideB) {
            [ add a 'B'
            s20 = "F000F3F75379B90A19111002FF";
          } else {
            [ add an 'A'
            s20 = "F000F3F7537CBC3AF7527802FF";
          }
          block(PIC.DRAW, AGI_FILL, &s20, 0); [ pic.draw(FILLSTYLE, sCMDS)
        }
        show.pic();
      }
    }
  }
  
  [ play
  if (work1 == 11) {
    [ cassette loaded, cover closed and currently paused/stopped
    if (cassetteLoaded && coverClosed && !playWalkman) {
      if (!scoreWalkman) {
        set(scoreWalkman);
        work1 = 4;
        call(lgc.ScoreHandler);
      }
      [ if not at end of track
      [ SIDE A: 1 - 41, 42 means at end of side A
      [ SIDE B: 43 - 83, 84 means at end of side B
      if (currentTrack != 42 && currentTrack != 84) {
        [ always turn sound on if walkman is in use
        if (!soundOn) {
          set(soundOn);
        }
        [ set parameters
        call(lgc.SetSound);
        [ now begin playing current track
        set(playWalkman);
        block(SND.V.FN, LOAD.SOUND.V, &currentTrack, 0); [ load.sound.v(vSNDNUM)
        work2 = &musicDone;
        block(SND.V.FN, SOUND.V, &currentTrack, &work2); [ sound.v(vSNDNUM, vDONEFLAG)
      }
    }
  }
  
  [ cover
  if (work1 == 12) {
    if (!coverClosed) {
      set(coverClosed);
      if (cassetteLoaded) {
        work2 = ovl.Walkman2;
      } else {
        work2 = ovl.Walkman1;
      }
      load.pic(work2);
      overlay.pic(work2);
      discard.pic(work2);
      show.pic();
    }
  }
  
  [ tape/cavity - cover must be open
  if (work1 == 13) {
    if (cassetteLoaded) {
      work2 = ovl.Walkman3;
      get("cassette tape");
      reset(cassetteLoaded);
      load.pic(work2);
      overlay.pic(work2);
      discard.pic(work2);
      show.pic();
      tmpCursor = C_TAPE;
      if (cassetteSideB) {
        display(23, 25, "Side B: %m11");
      } else {
        display(23, 25, "Side A: %m11");
      }
    } else {
      if (has("cassette tape")) {
        work2 = ovl.Walkman4;
        drop("cassette tape");
        set(cassetteLoaded);
        load.pic(work2);
        overlay.pic(work2);
        discard.pic(work2);
        if (cassetteSideB) {
          [ add a 'B'
          s20 = "F000F3F75379B90A19111002FF";
        } else {
          [ add an 'A'
          s20 = "F000F3F7537CBC3AF7527802FF";
        }
        block(PIC.DRAW, AGI_FILL, &s20, 0); [ pic.draw(FILLSTYLE, sCMDS)
        show.pic();
        tmpCursor = C_USE;
        clear.lines(23, 23, BLACK);
      }
    }
  }
}

[ go back to the input loop
goto(waitforit);

:exit
[ if playing, stop before going back
if (playWalkman) {
  stop.sound();
  reset(musicDone);
  block(SND.V.FN, DISCARD.SOUND.V, &currentTrack, 0); [ discard.sound.v(vSNDNUM)
}

discard.view(vw.WalkmanArt);

[ restore script entries
reset(noScript);

[ fade out during the switch
block(FADE.OUT, BYNUM, 5, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)

[ clear the help text
clear.lines(23, 24, BLACK);

[ restore attributes
set.text.attribute(0, POP.ATTRIBUTES); [ pop.attributes()

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "%g30"
#message 2 "%g31"
#message 3 "%g32"
#message 4 "%g33"
#message 5 "%g34"
#message 6 "%g35"
#message 7 "%g36"
#message 8 "%g37"
#message 9 "Side A: %m11"
#message 10 "Side B: %m11"
#message 11 " (press SPACE to flip)"