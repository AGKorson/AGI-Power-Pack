[*********************************************************************
[
[ rm.Closet
[
[ Full of 'janitor' stuff. When ego moves far enough into room, he
[ trips over a broom. (if ego tries to pick up broom, that also starts
[ the tripping sequence.) Tripping results in ego causing wall to
[ collapse, revealing a hole to another room. The sink faucet has a
[ slight drip; ego can fix it to get extra points. if broom is left
[ on floor, ego will trip again (but not actually fall over) at random
[ time intervals. Ego can put broom in corner to get extra points.
[ Touching the plunger will subtract points. Ego can wash hands in
[ sink to recover lost points.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define wall                         o1
#define broom                        o2
#define drip                         o3
#define door                         o4
#define oBucket                      o5

#define fallSeq                    v220
  #define NOFALL                 0
  #define STARTFALL              1
  #define MOVE2WALL1             2
  #define MOVE2WALL2             3
  #define FALLDOWN               4
  #define BREAKWALL              5
  #define SITUP                  6
  #define FALLDONE               7
  #define STANDUP                8
#define movebroomstatus            v221
  #define NOMOVE                 0
  #define MOVE2CORNER            1
  #define PLACEBROOM             2
#define driptimerM                 v222
#define driptimerS                 v223
#define triptimer                  v224
#define tmpLoop                    v225
#define washSeq                    v226
  #define MOVESINK1              1
  #define MOVESINK2              2
  #define WASHING                3
#define kickSeq                    v227
  #define MOVEMIDDLE             1
  #define STARTKICK              2
  #define KICKING                3
  #define DONEKICK               4
  
#define fDone                      f220
#define fFalling                   f221
#define clickbroom                 f222
#define clickmops                  f223
#define dripping                   f224
#define dripdone                   f225
#define cantrip                    f226
#define crouch                     f227
#define uncrouch                   f228
#define opendoor                   f229
#define closedoor                  f230
#define fDoorDone                  f231
#define fEgoDead                   f232
#define fDoneWash                  f233
#define kickBucket                 f234
#define bucketDone                 f235

#define TRIPDELAY                    80

[***************************************
[ FIRST CYCLE ONLY
[***************************************
if (newRoom) {
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  
  [ the horizon defines the upper limit of ego's movement
  set.horizon(0);
  
  [ add toolbar buttons
  load.view(vw.ButtonsDown);
  call(lgc.InitToolbar);
  
  load.view(vw.ClosetArt);
  load.view(vw.Tripping);
  [ closet door
  animate.obj(door);
  set.view(door, vw.ClosetArt);
  set.loop(door, 5);
  if (closetopen) { 
    set.cel(door, 3);
  } else {
    set.cel(door, 0);
  }
  position(door, 107, 148);
  draw(door);
  stop.update(door);
  
  [ wall animation
  animate.obj(wall);
  set.view(wall, vw.ClosetArt);
  set.loop(wall, 1);
  position(wall, 69, 142);
  set.priority(wall, 4);
  [ if wall not broken yet, cover up the hole
  if (!wallbreak) {
    set.cel(wall, 0);
  } else {
    if (trapped) {
      set.loop(wall, 0);
      set.cel(wall, 2);
    } else {
      set.cel(wall, 12);
      ignore.objs(wall);
    }
  }
  draw(wall);
  stop.cycling(wall);
  
  [ add the broom
  animate.obj(broom);
  set.view(broom, vw.ClosetArt);
  set.loop(broom, 0);
  ignore.objs(broom);
  ignore.blocks(broom);
  [ if moved, put in corner
  if (broommoved) {
    position(broom, 44, 153);
    set.cel(broom, 1);
    block(43, 148, 50, 154);
  } else {
    [ if not moved, it's still on floor
    set.cel(broom, 0);
    set.priority(broom, 11);
    position(broom, 59, 152);
    if (wallbreak) {
      triptimer = TRIPDELAY;
    } else {
      triptimer = 0;
    }
  }
  draw(broom);
  stop.update(broom);
  
  [ drip
  if (!faucetfixed) {
    animate.obj(drip);
    position(drip, 63, 129);
    set.view(drip, vw.ClosetArt);
    set.loop(drip, 2);
    set.cel(drip, 3);
    ignore.objs(drip);
    ignore.blocks(drip);
    draw(drip);
    stop.update(drip);
    
    [ setup a timer; every few seconds, show another drip
    [ until faucet gets tightened
    driptimerM = 0;
    driptimerS = 3;
    block(START.TIMER, &driptimerM, &driptimerS, &dripdone); [ start.timer(vMINUTES, vSECONDS, fDONE)
    load.sound(s.Drip);
  }
  
  if (!wallbreak) {
    [ breaking wall sounds
    load.sound(s.Crumble1);
    load.sound(s.Crumble2);
  }
  load.sound(s.DoorOpen);
  load.sound(s.DoorClose);
  
  [ setup ego
  egoDir = STOPPED;
  if (previousRoom == rm.SecretRoom) {
    if (trapped) {
      set.view(ego, vw.ClosetArt);
      set.loop(ego, 4);
      set.cel(ego, 0);
      set(fEgoDead);
      deathType = DT_TRAPPED;
    } else {
      position(ego, 72, 141);
      [ uncrouch
      set.view(ego, vw.ClosetArt);
      set.loop(ego, 4);
      set.cel(ego, 0);
      program.control();
      prevent.input();
      work1 = CYCLE_AT_REST;
      set.upper.left(&ego, &work1); [ auto.cycle(oSOBJ, vMODE)
      end.of.loop(ego, uncrouch);
    }
  } else {
    position(ego, 100, 147);
    set.loop(ego, 1);
  }
  [ add ego to the room, unless trapped
  if (!trapped) {
    draw(ego);
  }
  
  [ display the picture on screen
  show.pic();
  [ fade in
  block(FADE.IN, BYNUM, FADECOUNT, BLACK); [ fade.in(FN_MODE, DELAY, COLOR)
  [ only restore cursor for Hallway entrance, or if trapped
  [ (coming from secret room has extra standup sequence)
  if ((previousRoom == rm.Hallway || fEgoDead)) {
    [ restore cursor
    cursoricon = cursormode;
    set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  }
  return();
}

[***************************************
[ NON-INPUT CODE 
[***************************************

[*******************
[ FAUCET DRIP
[*******************
if (dripdone && !faucetfixed) {
  if (dripping) {
    stop.update(drip);
    [ ok to use timer here; the closet door timer is never
    [ active in this room
    driptimerM = 0;
    driptimerS = 3;
    block(START.TIMER, &driptimerM, &driptimerS, &dripdone); [ start.timer(vMIN, vSEC, fDONE)
  } else {
    set.cel(drip, 0);
    end.of.loop(drip, dripdone);
    start.update(drip);
    [ only play sound if walkman is not in use, and not crashing through wall
    if (!playWalkman  && (fallSeq == NOFALL || fallSeq >= SITUP)) {
      [ play drip sound, force 4-channel FM
      set(4channelsound);
      set.key(FM_MODE, 0, SET.SNDMODE); [ set.sndmode(MODE)
      [ use correct instrument
      work1 = 0;
      work2 = 115;
      set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
      sound(s.Drip, soundDone);
      set(playSound);
    }
  }
  toggle(dripping);    
}

[ if dead, skip player input
if (fEgoDead) {
  return();
}

[*******************
[ HOLE-IN-WALL
[*******************
[ check for uncrouching
if (uncrouch) {
  [ restore player control
  reset(uncrouch);
  set.view(ego, vw.Ego);
  set.loop(ego, 2);
  normal.cycle(ego);
  player.control();
  accept.input();
  [ restore autocycle
  work1 = AUTO_CYCLE;
  set.upper.left(&ego, &work1); [ auto.cycle(oSOBJ, vMODE)
  [ restore cursor
  cursoricon = cursormode;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
}

[ trip and fall into wall
if (egoHitSpecial && !wallbreak && fallSeq == NOFALL && !kickSeq) {
  [ fall, and break wall
  print("Look out for that broom!");
  fallSeq = STARTFALL;
}
[ startfall is a separate state so that it can be reached
[ by trying to pick up the broom, or by moving over it
if (fallSeq == STARTFALL) {
  fallSeq = MOVE2WALL1;
  set.view(ego, vw.Tripping);
  set.loop(ego, 0);
  fix.loop(ego);
  move.obj(ego, 72, 145, 1, fDone);
  prevent.input();
  cursoricon = C_WAIT;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  [ disable click2move if in walk mode
  if (cursormode == C_WALK) {
    reset(click2move);
  }
    
}
if (fDone && fallSeq == MOVE2WALL1) {
  fallSeq = MOVE2WALL2;
  move.obj(ego, 72, 146, 1, fDone);
}
if (fDone && fallSeq == MOVE2WALL2) {
  fallSeq = FALLDOWN;
  work1 = CYCLE_AT_REST;
  set.upper.left(&ego, &work1); [ auto.cycle(oSOBJ, vMODE)
  set.loop(ego, 2);
  set.cel(ego, 0);
  end.of.loop(ego, fDone);
}
if (fDone && fallSeq == FALLDOWN) {
  fallSeq = BREAKWALL;
  [ drip could be a problem
  if (playSound) {
    stop.sound();
    reset(soundDone);
    reset(playSound);
  }
  [ no walkman to worry about when wall breaks 
  work1 = 0;
  work2 = 100;  [ instrument 100
  set.key(&work1, &work2, SET.INST); [ set.inst(vCHANNEL, vINSTRUMENT)
  set(playSound);
  sound(s.Crumble1, soundDone);
  start.update(wall);
  end.of.loop(wall, fDone);
}
if (fallSeq == BREAKWALL) {
  current.cel(wall, work1);
  if (work1 == 10) {
    sound(s.Crumble2, soundDone);
  }
  if (fDone) {
    reset(fDone);
    fallSeq = SITUP;
    print("As you fall against the wall, it caves in, revealing a large hole.");
    set(wallbreak);
    stop.update(wall);
    ignore.objs(wall);
    set.loop(ego, 3);
    set.cel(ego, 0);
    end.of.loop(ego, fDONE);
  }
}
if (fDone && fallSeq == SITUP) {
  reset(fDone);
  player.control();
  accept.input();
  cursoricon = cursormode;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  fallSeq = FALLDONE;
  work1 = 5;
  call(lgc.ScoreHandler);
}
if (egoDir != STOPPED && fallSeq == FALLDONE) {
  [ get up first
  :getup
  egoDir = STOPPED;
  fallSeq = STANDUP;
  set.loop(ego, 4);
  end.of.loop(ego, fDone);
}
if (fDone && fallSeq == STANDUP) {
  reset(fDone);
  fallSeq = NOFALL;
  set.view(ego, vw.Ego);
  set.loop(ego, 2);
  start.cycling(ego);
  release.loop(ego);
  [ reenable click2move if in walk mode
  if (cursormode == C_WALK) {
    set(click2move);
  }
  [ restore auto-cycle
  work1 = AUTO_CYCLE;
  set.upper.left(&ego, &work1); [ auto.cycle(oSOBJ, vMODE)
  triptimer = TRIPDELAY;
}

[*******************
[ BROOM TRIP
[*******************
[ trip over broom even after first fall, unless it's been moved
if (egoHitSpecial && !broommoved && cantrip && egodir != STOPPED && 
    movebroomstatus == NOMOVE && !kickSeq) {
  print("You trip over the broom again!");
  work1 = -1;
  call(lgc.ScoreHandler);
  reset(cantrip);
  triptimer = TRIPDELAY;
  triptimer = 90;
  set.view(ego, vw.Tripping);
  current.loop(ego, work1);
  if (work1 > 1) {
    work1 -= 2;
  }
  set.loop.v(ego, work1);
  fix.loop(ego);
  wander(ego);
  prevent.input();
  cursoricon = C_WAIT;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  prevent.input();
}
[ check for end of stumbling sequence
if (triptimer > TRIPDELAY) {
  --triptimer;
  if (triptimer == TRIPDELAY) {
    [ restore ego movement
    set.view(ego, vw.Ego);
    release.loop(ego);
    egoDir = STOPPED;
    player.control();
    accept.input();
    cursoricon = cursormode;
    set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
  }
} else {
  [ not stumbling - if not on the broom, run the countdown
  if (!egoHitSpecial && triptimer > 0 && !broommoved) {
    --triptimer;
    if (triptimer == 0) {
      set(cantrip);
    }
  }
}

[ move broom to corner
if (fDone && movebroomstatus == MOVE2CORNER) {
  erase(broom);
  set.cel(broom, 1);
  position(broom, 44, 153);
  draw(broom);
  stop.update(broom);
  movebroomstatus = NOMOVE;
  block(43, 148, 50, 154);
  set(broommoved);
  work1 = 2;
  call(lgc.ScoreHandler);
}

[*******************
[ CLOSET DOOR
[*******************
if (opendoor) {
  reset(opendoor);
  if (closetopen) {
    print("The closet door is already open.");
  } else {
    if (posn(ego, 97, 142, 106, 147)) {
      [ only play sound if walkman is not in use
      if (!playWalkman) {
        [ drip could be a problem
        if (playSound) {
          stop.sound();
          reset(soundDone);
          reset(playSound);
        }
        call(lgc.SetSound);
        sound(s.DoorOpen, soundDone);
        set(playSound);
      }
      end.of.loop(door, fDoorDone);
    } else {
      print("Move closer.");
    }
  }
}
if (closedoor) {
  reset(closedoor);
  if (closetopen) {
    if (posn(ego, 97, 142, 106, 156)) {
      reverse.loop(door, fDoorDone);
      [ only play sound if walkman is not in use
      if (!playWalkman) {
        [ drip could be a problem
        if (playSound) {
          stop.sound();
          reset(soundDone);
          reset(playSound);
        }
        call(lgc.SetSound);
        sound(s.DoorClose, soundDone);
        set(playSound);
      }
    } else {
      print("Move closer.");
    }
  } else {
    print("The closet door is already closed.");
  }
}
if (fDoorDone) {
  reset(fDoorDone);
  if (closetopen) {
    reset(closetopen);
  } else {
    set(closetopen);
  }
}

[*******************
[ WASH HANDS
[*******************
if (fDoneWash) {
  if (washSeq == MOVESINK1) {
    washSeq = MOVESINK2;
    move.obj(ego, 60, 144, 1, fDoneWash);
    return();
  }
  if (washSeq == MOVESINK2) {
    set(noScript);
    load.view(vw.EgoWashingHands);
    set.view(ego, vw.EgoWashingHands);
    set.loop(ego, 0);
    set.cel(ego, 0);
    work1 = CYCLE_AT_REST;
    set.upper.left(&ego, &work1);  [ autocycle(oSOBJ, vMODE)
    end.of.loop(ego, fDoneWash);
    washSeq = WASHING;
    return();
  }
  if (washSeq == WASHING) {
    washSeq = 0;
    set.view(ego, vw.Ego);
    set.loop(ego, 3);
    discard.view(vw.EgoWashingHands);
    start.cycling(ego);
    work1 = AUTO_CYCLE;
    set.upper.left(&ego, &work1);  [ autocycle(oSOBJ, vMODE)
    reset(noScript);
    reset(disableGameFunctions);
    accept.input();
    set(handsWashed);
    if (touchTrees && touchPlunger) {
      print("Washing the sap and plunger-stink from your hands was a good "
            "idea. They are now clean and germ-free!");
      work1 = 3;
    } else {
      if (touchTrees) {
        print("You wash the sap from your hands. Now they aren't so sticky.");
        work1 = 1;
      } else {
        if (touchPlunger) {
          print("Touching that plunger was not a great idea. Washing your "
                "hands is.");
          work1 = 2;
        } else {
          print("Might as well wash your hands. Cleanliness is next to "
                "godliness!");
          work1 = 0;
        }
      }
    }
    if (!firstWash) {
      set(firstWash);
      ++work1;
    }
    call(lgc.ScoreHandler);
    reset(touchTrees);
    reset(touchPlunger);
  }
}

[*******************
[ KICK BUCKET
[*******************
if (kickSeq) {
  if (kickSeq == MOVEMIDDLE && kickBucket) {
    reset(kickBucket);
    ++kickSeq;
    [ begin kick sequence
    work1 = CYCLE_AT_REST;
    set.upper.left(&ego, &work1);  [ auto.cycle(oSOBJ, vMODE)
    [ start by showing kicking loop
    load.view(vw.KickBucket);
    set.view(ego, vw.KickBucket);
    set.loop(ego, 0);
    set.cel(ego, 0);
    end.of.loop(ego, bucketDone);
    [ remove bucket from corner
    add.to.pic(vw.KickBucket, 3, 0, 50, 141, 0, 15);
    [ add the bucket object
    animate.obj(oBucket);
    get.posn(ego, work1, work2);
    work1 += 8;
    position.v(oBucket, work1, work2);
    set.view(oBucket, vw.KickBucket);
    set.loop(oBucket, 2);
    fix.loop(oBucket);
    set.priority(oBucket, 15);
    ignore.blocks(oBucket);
    ignore.objs(oBucket);
    ignore.horizon(oBucket);
    work1 = 3;
    step.size(oBucket, work1);
    draw(oBucket);
  }

  if (kickSeq == STARTKICK) {
    [ during kick cycle, begin moving bucket at cel 2
    current.cel(ego, work1);
    if (work1 == 2) {
      work1 = UP_RIGHT;
      set.dir(oBucket, work1);
      ++kickSeq;
    }
  }

  if (kickSeq == KICKING && bucketDone) {
    [ after kicking, switch to falling
    set.loop(ego, 1);
    set.cel(ego, 0);
    end.of.loop(ego, bucketDone);
    ++kickSeq;
  }
  
  if (kickSeq == DONEKICK && bucketDone) {
      [ after falling, end the sequence
      reset(kickBucket);
      ++kickSeq;
      deathType = DT_KICK_BUCKET;
      return();
  }
  
  [ if bucket reaches right edge, erase it
  if (objHitEdge == &oBucket) {
    erase(oBucket);
  }
}

[ if ego is dead, skip player input
if (deathType) {
  return();
}

[***************************************
[ PROCESS PLAYER INPUT
[***************************************
if (haveInput && !haveMatch && unknownWordNum == 0) {

  if (said("stand up") && fallSeq == FALLDONE) {
    goto(getup);
  } else {
    [ if still sitting (after falling), don't do anything until
    [ getting back up
    if (fallSeq == FALLDONE) {
      print("You should stand up first.");
      reset(haveInput);
      goto(doneclick);
    }
  }
  if (said("look")) {
    print("This is an old janitor closet. It is full of janitor stuff.");
  }
  if (said("look", "wall")) {
    print("The walls are stained and worn, with lots of cracks. They "
          "could be use a new coat of paint.");
    if (wallbreak) {
      print("There is a large hole in the wall where you fell.");
    }
  }
  if (said("look", "floor")) {
    print("The floor is scuffed and worn, but clean. There is a drain in "
          "the center.");
  }
  if (said("look", "ceiling")) {
    print("You see a drain pipe hanging from the ceiling.");
  }
  if (said("look", "drain")) {
    print("The stainless steel drain keeps the floor dry.");
  }
  if (said("look", "in", "drain")) {
    if (obj.in.box(ego, 66, 142, 89, 156)) {
      print("You can see dirt and debris in the drain. It looks "
            "kind of gross when you look at it closely.");
    } else {
      print("Move closer.");
    }
  }
  if (said("pee", "in", "drain")) {
    if (obj.in.box(ego, 66, 142, 89, 156)) {
      print("Even though there's no one around, it's still a "
            "disgusting thought. Don't go there.");
    } else {
      print("Move closer.");
    }
  }
  if ((said("get", "drain") || said("move", "drain"))) {
    goto(getdrain);
  }
  if (said("look", "ladder")) {
    print("There is a large ladder hanging on the wall.");
  }
  if (said("get", "ladder")) {
    print("You have not taken ladder safety training recently, so you "
          "decide to leave it on the wall.");
  }
  if (said("look", "mop")) {
    print("There is a mop and bucket in the corner and several mops and "
          "brooms hanging on the wall.");
  }
  if ((said("get", "mop") || said("use", "mop") || said("mop", "floor"))) {
    print("As much as you've always wanted to become a janitor, perhaps you "
          "should just leave the mops and brooms alone.");
  }
  if (said("look", "bucket")) {
    print("A bucket sits in the corner. A dirty mop is resting inside it.");
  }
  if (said("get", "bucket")) {
    if (posn(ego, 44, 133, 62, 150)) {
      print("You don't need a bucket.");
    } else {
      print("Move closer.");
    }
  }
  if (said("use", "bucket")) {
    if (posn(ego, 44, 133, 62, 150)) {
    print("As much as you've always wanted to become a janitor, perhaps you "
          "should just leave the bucket alone.");
    } else {
      print("You don't have a bucket.");
    }
  }
  if (said("kick", "bucket")) {
    print("OK.");
    [ stop ego, have him kick a bucket
    program.control();
    prevent.input();
    kickSeq = MOVEMIDDLE;
    move.obj(ego, 60, 148, 1, kickbucket);
  }
  
  if (said("look", "broom")) {
    if (broommoved) {
      s12 = ", including that stupid broom you tripped over earlier.";
    } else {
      if (!wallbreak) {
        s12 = ". One broom is lying on the floor in the "
              "middle of the room. It looks like a tripping hazard!";
      } else {
        s12 = ". The broom you tripped over is still lying on the "
              "floor in the middle of the room.";
      }
    }
    print("There are several mops and brooms in this closet along "
          "the back wall%s12");
  }
  if (said("get", "broom")) {
    if (broommoved) {
      print("As much as you've always wanted to become a janitor, "
            "perhaps you should just leave the mops and brooms alone.");
    } else {
      goto(getbroom);
    }
  }
  if ((said("use", "broom") || said("sweep", "floor"))) {
    print("You don't have a broom.");
  }
  if ((said("put", "broom", "away") || said("move", "broom") ||
       said("hang", "up", "broom"))) {
    if (broommoved) {
      print("The brooms are already set neatly along the back wall.");
    } else {
      goto(getbroom);
    }
  }
  if (said("look", "sink")) {
    print("It's a typical utility closet sink. Great for rinsing mops.");
  }
  if ((said("use", "sink") || said("turn", "on", "faucet"))) {
    print("Is there something you need to wash?");
  }
  if ((said("wash", "hands") || said("wash", "hands", "in", "sink"))) {
    goto(washhands);
  }
  if (said("dry", "hands")) {
    if (handsWashed) {
      print("Shaking them dry after washing was good enough.");
    } else {
      print("Yes, your hands are dry.");
    }
  }
  if (said("pee", "in", "sink")) {
    print("That's disgusting. What kind of sicko are you?");
  }
  if (said("look", "faucet")) {
    goto(lookfaucet);
  }
  if ((said("turn", "off", "faucet") || said("tighten", "faucet"))) {
    goto(faucetoff);
  }
  if (said("look", "plunger")) {
    print("This old plunger looks like it needs to be rinsed clean.");
  }
  if (said("get", "plunger")) {
    goto(getplunger1);
  }
  if (said("lick", "plunger")) {
    if (obj.in.box(ego, 72, 138, 92, 147)) {
      print("After touching the dirty plunger, you suddenly realize "
            "that licking it is no longer a good idea.");
      goto(getplunger2);
    } else {
      print("Move closer.");
    }
  }
  if (said("look", "shelves")) {
      print("There are an assortment of typical cleaning supplies on "
            "the sturdy metal shelves in the closet. shelf.");
      print("The sturdy metal shelves have an assortment of typical cleaning supplies on this "
      "shelf.");
      print("This is a study metal shelf unit.");
  }
  if (said("climb", "shelves")) {
    print("There is no reason to climb the shelves.");
  }
  if (said("look", "supplies")) {
    print("You see boxes of toilet paper and other cleaning supplies "
          "on the various shelves in the closet.");
  }
  if (said("get", "supplies")) {
    print("You have no need for cleaning supplies.");
  }
  if (said("get", "toilet paper")) {
    print("You don't need any toilet paper. Besides, you don't have "
          "any way to open the boxes.");
  }
  if (said("look", "pipe")) {
    print("It looks like a drain pipe from the second floor.");
  }
  if ((said("climb", "pipe") || said("climb", "pipe"))) {
    print("That pipe is WAY too high for you to reach it.");
  }
  if (said("look", "boxes")) {
    print("Labels on the boxes say they contain toilet paper and assorted "
          "cleaning supplies.");
  }
  if (said("get", "boxes")) {
    print("The boxes are much too large for you to pick up.");
  }
  if (said("look", "in", "boxes")) {
    print("All of the boxes are securely taped shut.");
  }
  if (said("open", "boxes")) {
    print("You don't have anything that you could use to opent the boxes.");
  }
  if ((said("look", "door") || said("look", "closet", "door"))) {
    goto(lookdoor);
  }
  if ((said("open", "door") || said("open", "closet", "door"))) {
    if (closetopen) {
      print("The closet door is already open.");
    } else {
      set(opendoor);
    }
  }
  if ((said("close", "door") || said("close", "closet", "door"))) {
    if (closetopen) {
      set(closedoor);
    } else {
      print("The closet door is already closed.");
    }
  }
  if ((said("lock", "door") || said("lock", "closet", "door") ||
       said("unlock", "door") || said("unlock", "closet", "door"))) {
    if (posn(ego, 97, 142, 106, 156)) {
      print("There is no lock on the closet door.");
    } else {
      print("Move closer.");
    }
  }
}

[***************************************
[ MOUSE INPUT
[***************************************
[ if cursor is look/talk/use and left-click and NOT 
[ clicking on the actual toolbar, check for clicks
[ on in-game items
if (cursoricon > C_WALK && cursoricon < C_WAIT && 
    controller(cLeftClick) &&
    (mouseX < 14 || mouseX > 145 || mouseY > 17)) {
  [ ignore borders
  if ((mouseX < 41 || mouseX > 113 || mouseY < 62 || mouseY > 155)) {
    goto(doneclick);
  }
  
  [ if still sitting (after falling)
  if (fallSeq == FALLDONE) {
    print("You should stand up first.");
    goto(doneclick);
  }
  
  [ always stop motion
  egoDir = STOPPED;
  
  [ if ego isn't facing the location clicked, change loop
  [ current loop
  current.loop(ego, tmpLoop);
  [ get left/right pos of ego
  get.posn(ego, work1, work2);
  work3 = work1;
  work3 += 6;
  if (mouseX < work1) {
    [looking left
    if (tmpLoop != 1) {
      set.loop(ego, 1);
      force.update(ego);
    }
  } else {
    if (mouseX > work3) {
      [ looking right
      if (tmpLoop != 0) {
        set.loop(ego, 0);
        force.update(ego);
      }
    } else {
      [ looking up or down
      work3 = work2; 
      work3 -= 33;
      if (mouseY < work3) {
        [ looking up
        if (tmpLoop != 3) {
          set.loop(ego, 3);
          force.update(ego);
        }
      } else {
        if (mouseY > work2) {
          [ looking down
          if (tmpLoop != 2) {
            set.loop(ego, 2);
            force.update(ego);
          }
        }
      }
    }
  }
  
  [ look
  if (cursormode == C_LOOK) {
    [ ego
    if (posn(ego, ON.OBJ, OBJ_VISIBLE, &mouseX, &mouseY)) {
      print("You see you.");
      goto(doneclick);
    }
    
    [ closet door
    if (posn(door, ON.OBJ, OBJ_FRAME, &mouseX, &mouseY)) {
      :lookdoor
      if (closetopen) {
        print("The closet door is open.");
      } else {
        print("The closet door is closed.");
      }
      goto(doneclick);
    }
    
    [ broom
    reset(clickbroom);
    if (broommoved) {
      [ broom is in corner
      if (mouseX > 40 && mouseX < 48 && mouseY > 130 && mouseY < 155) {
        print("After tripping over that stupid broom, you're glad you "
              "moved it out of the way.");
        goto(doneclick);
      }
    } else {
      [ broom is on floor
      if (mouseX > 57 && mouseX < 65 && mouseY > 146 && mouseY < 154) {
        set(clickbroom);
      }
      if (mouseX > 62 && mouseX < 67 && mouseY > 143 && mouseY < 149) {
        set(clickbroom);
      }
      if (mouseX > 65 && mouseX < 70 && mouseY > 141 && mouseY < 147) {
        set(clickbroom);
      }
      if (mouseX > 68 && mouseX < 73 && mouseY > 139 && mouseY < 146) {
        set(clickbroom);
      }
    }
    if (clickbroom) {
      if (!wallbreak) {
        print("That broom looks like a serious tripping hazard!");
      } else {
        print("It's the broom you tripped over.");
      }
      goto(doneclick);
    }
    
    [ ladder (55, 93, 76, 105)
    if (mouseX > 54 && mouseX < 77 && mouseY > 92 && mouseY < 106) {
      print("There is a large ladder hanging on the wall.");
      goto(doneclick);
    }
    
    [ faucet (62, 117, 66, 125)
    if (mouseX > 61 && mouseX < 67 && mouseY > 116 && mouseY < 126) {
      :lookfaucet
      if (faucetfixed) {
        print("The faucet is no longer dripping.");
      } else {
        print("The faucet has a slight drip.");
      }
      goto(doneclick);
    }
    
    [ sink (59, 123, 68, 136)
    if (mouseX > 58 && mouseX < 69 && mouseY > 122 && mouseY < 137) {
      print("It's a typical utility closet sink. Great for rinsing mops.");
      goto(doneclick);
    }
    
    [ mop/bucket/items on wall (41, 106, 48, 148 || 49, 117, 52, 142 || 53, 126, 58, 142)
    reset(clickmops);
    if (mouseX > 40 && mouseX < 49 && mouseY > 105 && mouseY < 149) {
      set(clickmops);
    }
    if (mouseX > 48 && mouseX < 53 && mouseY > 116 && mouseY < 143) {
      set(clickmops);
    }
    if (mouseX > 52 && mouseX < 59 && mouseY > 125 && mouseY < 143) {
      set(clickmops);
    }
    if (clickmops) {
      print("There is a mop and bucket in the corner and several mops and "
            "brooms hanging on the wall.");
      goto(doneclick);
    }
    
    [ plunger (80, 129, 84, 142)
    if (mouseX > 79 && mouseX < 85 && mouseY > 128 && mouseY < 143) {
      print("This old plunger looks like it needs to be rinsed clean.");
      goto(doneclick);
    }
    [ boxes on top shelf (86, 92, 102, 102)
    if (mouseX > 85 && mouseX < 103 && mouseY > 91 && mouseY < 103) {
      print("There are several boxes on the top shelf.");
      goto(doneclick);
    }
    
    [ boxes on ground (90, 139, 112, 154)
    if (mouseX > 89 && mouseX < 113 && mouseY > 138 && mouseY < 155) {
      print("The label on the boxes says 'Toilet Paper - 100 rolls'. "
            "That's a lot of toilet paper.");
      goto(doneclick);
    }
    
    [ shelf1 supplies (89, 107, 102, 113)
    if (mouseX > 88 && mouseX < 103 && mouseY > 106 && mouseY < 114) {
      print("There are an assortment of typical cleaning supplies on this "
      "shelf.");
      goto(doneclick);
    }
    
    [ shelf2 supplies (89, 118, 102, 126)
    if (mouseX > 88 && mouseX < 103 && mouseY > 117 && mouseY < 127) {
      print("There are an assortment of typical cleaning supplies on this shelf.");
      goto(doneclick);
    }
    
    [ shelf (84, 103, 105, 141)
    if (mouseX > 83 && mouseX < 106 && mouseY > 102 && mouseY < 142) {
      print("This is a study metal shelf unit.");
      goto(doneclick);
    }
    
    [ floor drain (74, 142, 81, 158)
    if (mouseX > 74 && mouseX < 81 && mouseY > 142 && mouseY < 158) {
      print("The stainless steel drain keeps the floor dry.");
      goto(doneclick);
    }
    
    [ steam pipe (44, 77, 98, 85)
    if (mouseX > 43 && mouseX < 99 && mouseY > 76 && mouseY < 86) {
      print("It looks like a drain pipe from the second floor.");
      goto(doneclick);
    }
    
    if (posn(wall, ON.OBJ, OBJ_VISIBLE, &mouseX, &mouseY)) {
      if (wallbreak) {
        print("There is a large hole in the wall where you fell.");
      } else {
        [ if wall not broken yet
        print("The wall looks severely cracked and worn here.");
      }
      goto(doneclick);
    }
     
    [ nothing specific - check general areas
    [ ceiling - 41, 62, 113, 73
    if (mouseX > 40 && mouseX < 114 && mouseY > 61 && mouseY < 74) {
      print("You see a drain pipe hanging from the ceiling.");
      goto(doneclick);
    }
    [ walls - 41, 74, 113, 139
    if (mouseX > 40 && mouseX < 114 && mouseY > 73 && mouseY < 140) {
      print("The walls are stained and worn, with lots of cracks. They "
            "could be use a new coat of paint.");
      goto(doneclick);
    }
    [ floor - 41, 140, 113, 158
    if (mouseX > 40 && mouseX < 114 && mouseY > 139 && mouseY < 159) {
      print("The floor is scuffed and worn, but clean. There is a drain "
            "in the center.");
      goto(doneclick);
    }
  }
  
  [ talk
  if (cursormode == C_TALK) {
    [ ego
    if (posn(ego, ON.OBJ, OBJ_VISIBLE, &mouseX, &mouseY)) {
      print("You have nothing to say.");
    } else {
      print("There is no one here to talk to.");
    }
    goto(doneclick);
  }

  [ grab/use
  if (cursormode == C_USE) {
    [ ego
    if (posn(ego, ON.OBJ, OBJ_VISIBLE, &mouseX, &mouseY)) {
      print("Please don't touch yourself. Not even in a closet.");
      goto(doneclick);
    }
    
    [ closet door
    if (posn(door, ON.OBJ, OBJ_FRAME, &mouseX, &mouseY)) {
      if (closetopen) {
        set(closedoor);
      } else {
        set(opendoor);
      }
      goto(doneclick);
    }
    
    [ broom
    reset(clickbroom);
    if (broommoved) {
      [ broom is in corner
      if (mouseX > 40 && mouseX < 48 && mouseY > 130 && mouseY < 155) {
        if (obj.in.box(ego, 47, 149, 58, 155)) {
          print("You don't need the broom so you leave it in the corner.");
        } else {
          print("Move closer.");
        }
        goto(doneclick);
      }
    } else {
      [ broom is on floor
      if (mouseX > 57 && mouseX < 65 && mouseY > 146 && mouseY < 154) {
        set(clickbroom);
      }
      if (mouseX > 62 && mouseX < 67 && mouseY > 143 && mouseY < 149) {
        set(clickbroom);
      }
      if (mouseX > 65 && mouseX < 70 && mouseY > 141 && mouseY < 147) {
        set(clickbroom);
      }
      if (mouseX > 68 && mouseX < 73 && mouseY > 139 && mouseY < 146) {
        set(clickbroom);
      }
    }
    
    if (clickbroom) {
      :getbroom
      if ((obj.in.box(ego, 47, 146, 77, 156) ||
           obj.in.box(ego, 57, 140, 85, 147))) {
        if (!wallbreak) {
          print("As you bend over to pick up the broom, you trip and fall!");
          fallSeq = STARTFALL;
        } else {
          print("You decide to move the broom out of the way so you won't "
                "trip on it anymore.");
          erase(broom);
          move.obj(ego, 50, 153, 1, fDone);
          movebroomstatus = MOVE2CORNER;
        }
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ ladder (55, 93, 76, 105)
    if (mouseX > 54 && mouseX < 77 && mouseY > 92 && mouseY < 106) {
      print("You have not taken ladder safety training recently, so you "
            "decide to leave it on the wall.");
      goto(doneclick);
    }
    
    [ faucet (62, 117, 66, 125)
    if (mouseX > 61 && mouseX < 67 && mouseY > 116 && mouseY < 126) {
      :faucetoff
      if (posn(ego, 57, 140, 70, 146)) {
        if (faucetfixed) {
          print("You already tightened the faucet handle.");
        }else {
          print("After tightening the faucet handle, the drip stops.");
          set(faucetfixed);
          work1 = 3;
          call(lgc.ScoreHandler);
        }
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ sink (59, 123, 68, 136)
    if (mouseX > 58 && mouseX < 69 && mouseY > 122 && mouseY < 137) {
      :washhands
      if (posn(ego, 57, 140, 70, 150)) {
        if (!handsWashed) {
          set(disableGameFunctions);
          prevent.input();
          if (egoY < 144) {
            washSeq = MOVESINK1;
            move.obj(ego, 68, 144, 1, fDoneWash);
          } else {
            washSeq = MOVESINK2;
            move.obj(ego, 60, 144, 1, fDoneWash);
          }
        } else {
          print("You already washed your hands.");
        }
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ mop/bucket/items on wall (41, 106, 48, 148 || 49, 117, 52, 142 || 53, 126, 58, 142)
    reset(clickmops);
    if (mouseX > 40 && mouseX < 49 && mouseY > 105 && mouseY < 149) {
      set(clickmops);
    }
    if (mouseX > 48 && mouseX < 53 && mouseY > 116 && mouseY < 143) {
      set(clickmops);
    }
    if (mouseX > 52 && mouseX < 59 && mouseY > 125 && mouseY < 143) {
      set(clickmops);
    }
    if (clickmops) {
      if ((posn(ego, 52, 138, 61, 149) || posn(ego, 41, 148, 51, 155))) {
        print("As much as you've always wanted to become a janitor, perhaps you "
              "should just leave the mops and brooms alone.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ plunger (80, 129, 84, 142)
    if (mouseX > 79 && mouseX < 85 && mouseY > 128 && mouseY < 143) {
      :getplunger1
      if (obj.in.box(ego, 72, 138, 92, 147)) {
        print("Maybe touching a dirty smelly plunger wasn't such a good idea.");
        :getplunger2
        if (!touchPlunger) {
          [ lose 2 points
          work1 = -2;
          call(lgc.ScoreHandler);
          set(touchPlunger);
          reset(handsWashed);
        }
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    [ boxes on top shelf (86, 92, 102, 102)
    if (mouseX > 85 && mouseX < 103 && mouseY > 91 && mouseY < 103) {
      if (obj.in.box(ego, 83, 140, 108, 146)) {
        print("The boxes are up too high for you to reach.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ boxes on ground (90, 139, 112, 154)
    if (mouseX > 89 && mouseX < 113 && mouseY > 138 && mouseY < 155) {
      if (obj.in.box(ego, 83, 144, 108, 156)) {
        print("The boxes are sealed up. You shouldn't open them.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ shelf1 supplies (89, 107, 102, 113)
    if (mouseX > 88 && mouseX < 103 && mouseY > 106 && mouseY < 114) {
      if (obj.in.box(ego, 85, 140, 108, 148)) {
        print("You have no need for cleaning supplies.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ shelf2 supplies (89, 118, 102, 126)
    if (mouseX > 88 && mouseX < 103 && mouseY > 117 && mouseY < 127) {
      if (obj.in.box(ego, 85, 140, 108, 148)) {
        print("You have no need for cleaning supplies.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ shelf (84, 103, 105, 141)
    if (mouseX > 83 && mouseX < 106 && mouseY > 102 && mouseY < 142) {
      if (obj.in.box(ego, 74, 140, 108, 148)) {
        print("There is nothing you can do with the shelf.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ floor drain (74, 142, 81, 158)
    if (mouseX > 74 && mouseX < 81 && mouseY > 142 && mouseY < 154) {
      :getdrain
      if (obj.in.box(ego, 66, 142, 89, 156)) {
        print("The drain is firmly attached to the floor. You can't "
              "pull it up.");
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ steam pipe (44, 77, 98, 83)
    if (mouseX > 43 && mouseX < 99 && mouseY > 76 && mouseY < 86) {
      print("You can't reach the pipe. Not even if you jumped.");
    }
  }
  
  :doneclick
  set.key(CLR.CTRL, CLR.CTRL, cLeftClick); [ clear.controller(cNUM)
}

[***************************************
[ CHECK FOR AN EXIT CONDITION
[***************************************
:exit

if (wallbreak && !crouch && posn(ego, 70, 139, 80, 139)) {
  egoDir = STOPPED;
  set(crouch);
  set.view(ego, vw.ClosetArt);
  set.loop(ego, 3);
  set.cel(ego, 0);
  program.control();
  prevent.input();
  work1 = CYCLE_AT_REST;
  set.upper.left(&ego, &work1);  [ autocycle(oSOBJ, vMODE)
  end.of.loop(ego, fDone);
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
}
if (crouch && fDone) {
  [ stop drip timer
  block(TOGGLE.TIMER, STOP_TIMER, 0, 0); [ toggle.timer(STATE)
  [ fade out, then change room
  block(FADE.OUT, BYNUM, FADECOUNT, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
  new.room(rm.SecretRoom);  [ ##LE002##
}

if ((posn(ego, 100, 143, 100, 143) || posn(ego, 101, 144, 101, 144) ||
     posn(ego, 101, 145, 101, 145) || posn(ego, 102, 146, 102, 146) ||
     posn(ego, 102, 147, 102, 147))) {
  if (closetopen) { 
    [ show wait cursor
    cursoricon = C_WAIT;
    set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)
    [ stop drip timer
    block(TOGGLE.TIMER, STOP_TIMER, 0, 0); [ toggle.timer(STATE)
    [ fade out, then change room
    block(FADE.OUT, BYNUM, FADECOUNT, BLACK); [ fade.out(FN_MODE, DELAY, COLOR)
    new.room(rm.Hallway);  [ ##LE001##
  } else {
    if (egoDir > 0 && egoDir < 5) {
      egoDir = STOPPED;
    }
  }
}
return();


[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "%g30"
#message 2 "%g31"
#message 3 "%g32"
#message 4 "%g33"
#message 5 "%g34"
#message 6 "%g35"
#message 7 "%g36"
#message 8 "%g37"
