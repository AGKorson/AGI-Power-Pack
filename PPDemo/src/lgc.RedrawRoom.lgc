[*********************************************************************
[ 
[ lgc.RedrawRoom
[ 
[ After close up logics are done, this logic handles restoring 
[ appropriate settings based on which room called for the close up.
[
[ Room-specific views don't need to be loaded, since they are already
[ loaded by the room that called this function.
[
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
[ none

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ don't use scripting when redrawing
set(noScript);

[ restore the current room
load.pic(currentRoom);
draw.pic(currentRoom);
discard.pic(currentRoom);

[ add button-up images
load.view(vw.ButtonsUp);
add.to.pic(vw.ButtonsUp, 0, 0, 15, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 1, 32, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 2, 48, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 3, 64, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 4, 81, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 5, 97, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 6, 113, 16, 15, 4);
add.to.pic(vw.ButtonsUp, 0, 7, 129, 16, 15, 4);
discard.view(vw.ButtonsUp);

[ room-specific adds
if (currentRoom == rm.ParkingLot) {
  [ add permanently parked cars
  #define tmpView     v240
  #define tmpLoop     v241
  #define tmpCel      v242
  #define tmpX        v243
  #define tmpY        v244
  #define tmpPri      v245
  #define tmpMgn      v246
 
  [ parking spot 1
  tmpView = vw.Cars;
  tmpLoop = car0car1;
  tmpLoop /= 16;
  tmpLoop += 19;
  tmpCel = 0;
  tmpX = 106;
  tmpY = 141;
  tmpPri = 13;
  tmpMgn = 4;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 2
  tmpLoop = car0car1;
  block(BIT.AND, BYNUM, &tmpLoop, 15); [ bit.and(FN_MODE, VAR, MASK)
  tmpX = 92;
  tmpY = 154;
  tmpPri = 14;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 3
  tmpLoop = car2car3;
  tmpLoop /= 16;
  tmpLoop += 19;
  tmpX = 51;
  tmpY = 167;
  tmpPri = 15;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 4
  tmpLoop = car2car3;
  block(BIT.AND, BYNUM, &tmpLoop, 15); [ bit.and(FN_MODE, VAR, MASK)
  tmpLoop += 19;
  tmpX = 46;
  tmpY = 155;
  tmpPri = 14;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  [ parking spot 5
  tmpLoop = car4car5;
  tmpLoop /= 16;
  tmpX = 26;
  tmpY = 156;  
  tmpPri = 0;
  add.to.pic.v(tmpView, tmpLoop, tmpCel, tmpX, tmpY, tmpPri, tmpMgn);
  goto(finish);
}

if (currentRoom == rm.Hallway) {
  [ add the two doors that don't open
  add.to.pic(vw.HallwayArt, 1, 0, 86, 132, 12,  4);
  add.to.pic(vw.HallwayArt, 1, 0, 126, 132, 12, 4);
  goto(finish);
}

if (currentRoom == rm.Stairway) {
  [ lights
  add.to.pic(vw.StairwayArt, 0, 0, 128, 81, 4, 15);
  goto(finish);
}

if (currentRoom == rm.ControlRoom) {
  [ add room-specific initialization here
  if (enableCAISOCC) {
    add.to.pic(vw.CtrlRoomArt, 0, 0, 35, 78, 11, 15);
  } else {
    add.to.pic(vw.CtrlRoomArt, 1, 0, 35, 78, 11, 15);
  }    
  if (enableRANDOCC) {
    add.to.pic(vw.CtrlRoomArt, 0, 1, 98, 78, 10, 15);
  } else {
    add.to.pic(vw.CtrlRoomArt, 1, 1, 98, 78, 10, 15);
  }    
  if (enableICAPOCC) {
    add.to.pic(vw.CtrlRoomArt, 0, 2, 41, 106, 9, 15);
  } else {
    add.to.pic(vw.CtrlRoomArt, 1, 2, 41, 106, 9, 15);
  }    
  if (enableESADOCC) {
    add.to.pic(vw.CtrlRoomArt, 0, 3, 98, 106, 8, 15);
  } else {
    add.to.pic(vw.CtrlRoomArt, 1, 3, 98, 106, 8, 15);
  }    
  if (enableOFROCC) {
    add.to.pic(vw.CtrlRoomArt, 0, 4, 35, 120, 7, 15);
  } else {
    add.to.pic(vw.CtrlRoomArt, 1, 4, 35, 120, 7, 15);
  }    
  if (enableERIDOCC) {
    add.to.pic(vw.CtrlRoomArt, 0, 5, 99, 120, 6, 15);
  } else {
    add.to.pic(vw.CtrlRoomArt, 1, 5, 99, 120, 6, 15);
  }    
  
  [ if access system hasn't been reset, door is closed
  if (!resetBaDASS) {
    add.to.pic(vw.CtrlRoomArt, 4, 0, 71, 167, 15, 15);
    block(71, 165, 90, 167);
  }
  goto(finish);
}

if (currentRoom == rm.Office) {
  if (has("memo")) {
    [ memo is not on printer
    add.to.pic(vw.OfficeArt, 5, 0, 80, 107, 4, 15);
  }
}

:finish

[ restore cursor
cursoricon = cursormode;
set.key(BYVAR, &cursoricon, mouse); [ set.cursor(FN_MODE, MSGNUM)

[ clear any text from bottom rows
clear.lines(23, 24, BLACK);

[ redisplay objects
block(HIDE.OBJS, SHOW_OBJS, 0, 0); [ hide.objs(MODE)
show.pic();
[ now fade in 
block(FADE.IN, BYNUM, 5, BLACK); [ fade.in(FN_MODE, DELAY, COLOR)

[ restore colors
set.text.attribute(0, POP.ATTRIBUTES); [ pop.attributes()

[ turn scripting back on
reset(noScript);
[ and allow input
accept.input();
status.line.on();

[ restart the clock
block(PAUSE.CLOCK, START_CLOCK, 0, 0); [ pause.clock(MODE)

[ make sure no extraneous clicks after returning
set(resetClicks);

return();

[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "%g30"
#message 2 "%g31"
#message 3 "%g32"
#message 4 "%g33"
#message 5 "%g34"
#message 6 "%g35"
#message 7 "%g36"
#message 8 "%g37"
