[*********************************************************************
[ 
[ lgc.TerminalFunctions
[ 
[ valid commands:
[ AMOS       CLS        CD         CHDIR   
[ CHKDSK     DIR        COPY       DEL
[ ERASE      EXIT       FORMAT     HELP
[ LOGOFF     MD         MKDIR      RD
[ RMDIR      REN        RENAME     SUDO
[ TYPE       VER        VOL
[*********************************************************************

[ power pack support
#include "powerpack.txt"

[***************************************
[ LOCAL DEFINES
[***************************************
#define cursor_row    v240
#define cursor_col    v241
#define cursor_char   v242
#define cursor_toggle v243
#define inputmode     v244
  #define IM_USERID    0 [ wait for userid
  #define IM_PASSWORD  1 [ wait for pw
  #define IM_CMDLINE   2 [ wait for commandline
  #define IM_ARGINPUT  3 [ wait for additional args/input
#define terminalfn    v245
  #define LINEFEED     1
  #define DELAY        2
  #define DELAY_LF     3
  #define ADDLINE      4
  #define ADDLINE_LF   5
  #define CLS          6
  #define DELAY_ADD    7
  #define NO_ACCESS    8
  #define SHOW_DIR     9
  #define CHKDSK_A    10
  #define CHKDSK_C    11
  #define FORMAT_A    12
  #define TYPE_PP     13
  #define SHOW_HELP   14
#define outputvar     v246
#define tmpCounter1   v247
#define tmpCounter2   v248
#define PWfunction    v249
  #define PW_LOGON     0
  #define PW_BADASS    1
  #define PW_CAISOCC   2
  #define PW_ERIDOCC   3
  #define PW_ESADOCC   4
  #define PW_ICAPOCC   5
  #define PW_OFROCC    6
  #define PW_RANDOCC   7
  #define PW_SUDO      8
#define vCurDir       v250
  #define C_ROOT    0 [ c:\
  #define C_USERS   1 [ c:\USERS\
  #define C_KW002   2 [ c:\USERS\KW002
  #define A_ROOT    3 [ a:
#define vShowDir      v251

#define cursorstate   f241
#define loggedon      f242
#define tmpFlag       f245

#define input          s12
#define char           s13
#define output         s14
#define userid         s15
#define sCmd           s16
#define sTemp2         s17
#define sTemp3         s18

#define charmsg         m3
#define outputmsg       m4

#define TOPROW         4
#define BTMROW        18
#define LEFTCOL        9
#define RIGHTCOL      48

[***************************************
[ MAIN CODE BLOCK 
[***************************************

[ linefeed
:addlinefeed
if (terminalfn == LINEFEED) {
  [ moves to next line, and clears input
  if (cursor_row < BTMROW) {
    ++cursor_row;
  } else {
    [ scroll up
    clear.text.rect(TOPROW, LEFTCOL, BTMROW, RIGHTCOL, -1);
  }
  cursor_col = LEFTCOL;
  return();
}

[ .75 sec delay with or without linefeed
:delay1
if ((terminalfn == DELAY || terminalfn == DELAY_LF)) {
  work2 = 250;
  cycle.time(DELAY.TIME, work2); [ delay(vMSEC)
  cycle.time(DELAY.TIME, work2); [ delay(vMSEC)
  cycle.time(DELAY.TIME, work2); [ delay(vMSEC)
  if (terminalfn == DELAY_LF) {
    terminalfn = LINEFEED;
    goto(addlinefeed);
  }
  return();
}

if ((terminalfn == ADDLINE || terminalfn == ADDLINE_LF || terminalfn == DELAY_ADD)) {
  [ calling function needs to make sure line won't
  [ extend past edge of display; no check is currently
  [ made for that
  outputvar = &outputmsg;
  display.v(cursor_row, cursor_col, outputvar);
  if (terminalfn == ADDLINE_LF) {
    terminalfn = LINEFEED;
    goto(addlinefeed);
  } else {
    [ adjust cursor column
    block(STR.FORMAT, &output, &output, 0); [ str.format(sINPUT, sRESULT)
    block(STR.LEN, &output, &work1, 0); [ str.len(sINPUT, vRESULT)
    cursor_col += work1;
    if (terminalfn == DELAY_ADD) {
      terminalfn = DELAY;
      goto(delay1);
    }
  }
  return();
}

if (terminalfn == CLS) {
  clear.text.rect(TOPROW, LEFTCOL, BTMROW, RIGHTCOL, BLACK);
  cursor_col = LEFTCOL;
  cursor_row = TOPROW;
  return();
}

if (terminalfn == NO_ACCESS) {
  output = "requires access level 3 or higher:";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "  access denied";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  return();
}

if (terminalfn == SHOW_DIR) {
  tmpCounter1 = &output;
  if (vShowDir == C_ROOT) {
    output = "%m6C:\\\\";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    terminalfn = LINEFEED;
    call(lgc.TerminalFunctions);
    tmpCounter2 = 11;
    :nextfile1
      block(SET.STRING.V, &tmpCounter1, &tmpCounter2, 0); [ set.string.v(vSTR, vMSG)
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      ++tmpCounter2;
      if (tmpCounter2 == 22) {
        output = "-- pause --";
        terminalfn = ADDLINE;
        call(lgc.TerminalFunctions);
        lastChar = 0;
        :wait1
        if (!have.key()) {
          goto(wait1);
        }
        terminalfn = LINEFEED;
        call(lgc.TerminalFunctions);
      }
    if (tmpCounter2 < 28) {
      goto(nextfile1);
    }
  }
  if (vShowDir == C_USERS) {
    output = "%m6C:\\\\USERS";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    terminalfn = LINEFEED;
    call(lgc.TerminalFunctions);
    tmpCounter2 = 28;
    :nextfile2
      block(SET.STRING.V, &tmpCounter1, &tmpCounter2, 0); [ set.string.v(vSTR, vMSG)
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      ++tmpCounter2;
      if (tmpCounter2 == 39) {
        output = "-- pause --";
        terminalfn = ADDLINE;
        call(lgc.TerminalFunctions);
        lastChar = 0;
        :wait2
        if (!have.key()) {
          goto(wait2);
        }
        terminalfn = LINEFEED;
        call(lgc.TerminalFunctions);
      }
    if (tmpCounter2 < 42) {
      goto(nextfile2);
    }
  }
  if (vShowDir == C_KW002) {
    output = "%m6C:\\\\USERS\\\\KW002";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    terminalfn = LINEFEED;
    call(lgc.TerminalFunctions);
    tmpCounter2 = 42;
    :nextfile3
      block(SET.STRING.V, &tmpCounter1, &tmpCounter2, 0); [ set.string.v(vSTR, vMSG)
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      ++tmpCounter2;
    if (tmpCounter2 < 46) {
      goto(nextfile3);
    }
  }
  if (vShowDir == A_ROOT) {
    output = "%m6A:\\\\";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    terminalfn = LINEFEED;
    call(lgc.TerminalFunctions);
    if ((floppyfiles == 1 || floppyfiles == 3)) {
      [ txt
      output = m42;
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
    }
    if ((floppyfiles == 2 || floppyfiles == 3)) {
      [ zip
      output = m43;
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
    }
    work1 = floppyfiles;
    work1 *= 2;
    work1 += 46;
    work2 = &output;
    block(SET.STRING.V, &work2, &work1, 0); [ set.string.v(vSTR, vMSG)
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    ++work1;
    block(SET.STRING.V, &work2, &work1, 0); [ set.string.v(vSTR, vMSG)
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
  }
  return();
}

if (terminalfn == CHKDSK_A) {
  output = "File system: FAT16";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "Volume label: %s5";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "Checking sectors: 0"; [ 720 512 B sectors
  terminalfn = ADDLINE;
  call(lgc.TerminalFunctions);
  --cursor_col;
  work1 = 0;
  work2 = 0;
  work3 = &m54;
  :chka_loop
    ++work1;
    if (work1 == 10) {
      work1 = 0;
      ++work2;
    }
    display.v(cursor_row, cursor_col, work3);
  if (work2 < 72) {
    goto(chka_loop);
  }
  terminalfn = LINEFEED;
  call(lgc.TerminalFunctions);
  output = "    360 KB total disk space";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  if (floppyfiles == 0) {
    work1 = 0;
    sTemp2 = "  0";
  } else {
    if (floppyfiles == 1) {
      work1 = 1;
      sTemp2 = "  1";
    } else {
      if (floppyfiles == 2) {
        work1 = 2;
        sTemp2 = "300";
      } else {
        work1 = 2;
        sTemp2 = "301";
      }
    }
  }
  output = "    %s17 KB in %v46 files";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "      0 KB in bad sectors";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  return();
}

if (terminalfn == CHKDSK_C) {
  output = "File system: FAT16";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "Volume label: AMOSDISK";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  sTemp2 = "0";
  output = "Checking sectors: 0"; [ 76,800 4 KB sectors
  terminalfn = ADDLINE;
  call(lgc.TerminalFunctions);
  
  --cursor_col;
  work1 = 0;
  work2 = 0;
  tmpCounter1 = 0;
  work3 = &m54;
  :fmtc_loop
    work1 += 6;
    if (work1 > 9) {
      work1 -= 10;
      ++work2;
      if (work2 == 100) {
        work2 = 0;
        ++tmpCounter1;
      }
    }
    if (tmpCounter1 > 0) {
      work3 = &m55;
    }
    display.v(cursor_row, cursor_col, work3);
  if ((tmpCounter1 < 76 || work2 < 80)) { [tmC=76 wk2=80
    goto(fmtc_loop);
  }
  terminalfn = LINEFEED;
  call(lgc.TerminalFunctions);
  
  output = "307,200 KB total disk space";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "184,392 KB in 7,325 files";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = " 72,996 KB in bad sectors";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  return();
}

if (terminalfn == FORMAT_A) {
  output = "Checking existing disk format.";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  work1 = 250;
  cycle.time(o254, work1); [ delay(vDELAY)
  cycle.time(o254, work1); [ delay(vDELAY)
  cycle.time(o254, work1); [ delay(vDELAY)
  cycle.time(o254, work1); [ delay(vDELAY)
  output = "The new file system is FAT.";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "Formatting 0K";
  terminalfn = ADDLINE;
  call(lgc.TerminalFunctions);
  cursor_col -= 2;
  tmpCounter1 = 0;
  tmpCounter2 = 0;
  work3 = &m56;
  :fmta_loop
    work1 = 50;
    cycle.time(o254, work1); [ delay(vDELAY)
    ++tmpCounter1;
    if (tmpCounter1 == 10) {
      tmpCounter1 = 0;
      ++tmpCounter2;
    }
    display.v(cursor_row, cursor_col, work3);
  if (tmpCounter2 < 36) {
    goto(fmta_loop);
  }
  terminalfn = LINEFEED;
  call(lgc.TerminalFunctions);

  output = "Initializing the File Allocation";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "Table (FAT)...";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  work1 = 250;
  cycle.time(o254, work1); [ delay(vDELAY)
  cycle.time(o254, work1); [ delay(vDELAY)

  output = "Volume label (11 characters, ENTER";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = " for none)? ";
  terminalfn = ADDLINE;
  call(lgc.TerminalFunctions);
  [ get label here (limit to 11 chars, valid name chars only)
  work2 = 0;
  floppylabel = "";
  sTemp2 = "\\/:*?\"<>|";
  :getlabel
  lastChar = 0;
  if (!have.key()) {
    [ delay 25 msec
    work1 = 25;
    cycle.time(o254, work1); 
    [ toggle the cursor every 200 msec
    ++cursor_toggle;
    if (cursor_toggle > 9) {
      cursor_toggle = 0;
      cursor_char *= -1;
      cursor_char += 3; [ this toggles cursor msg num between 1 and 2
      display.v(cursor_row, cursor_col, cursor_char);
    }
    goto(getlabel);
  }
  [ make sure cursor gets hidden
  if (cursor_char == 1) {
    cursor_char = 2;
    display.v(cursor_row, cursor_col, cursor_char);
  }
  if (lastChar != 13) {
    if (lastChar == 8 && work2 > 0) {
      --cursor_col;
      [ remove char from display
      lastChar = &m2;
      display.v(cursor_row, cursor_col, lastChar);
      [ remove the last char from the input line
      --work2;
      block(STR.LEFT, &floppylabel, &floppylabel, &work2); [ str.left(sINPUT, sRESULT, vLEN)
    } else {
      [ check for invalid characters
      work3 = 0;
      block(INSTR, &sTemp2, &lastChar, &work3); [ instr(sINPUT, vCHAR, vPOS)
      if (work2 != 11 && work3 == -1 && lastChar > 32 && lastChar < 126) {
        [ if any other char, add it to input
        if (lastChar > 96 && lastChar < 123) {
          lastChar -= 32;
        }
        ++work2;
        block(BYTE2CHAR, &char, &lastChar, 0); [ byte2char(sRESULT, vCHAR)
        block(STR.CONCAT, &floppylabel, &char, 0); [ str.concat(sINPUT, sADD)
        work1 = &charmsg;
        display.v(cursor_row, cursor_col, work1);
        
        [ advance cursor
        ++cursor_col;
      }
    }
    goto(getlabel);
  }
  terminalfn = LINEFEED;
  call(lgc.TerminalFunctions);
  output = "Format complete.";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "     360.0 KB total disk space.";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  output = "     360.0 KB are available.";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  [ create a random serial number
  random(16, 255, work1);
  block(BYTE2HEX, &sTemp2, &work1, 0); [ byte2hex(sRESULT, vINPUT)
  random(0, 255, work1);
  block(BYTE2HEX, &sTemp3, &work1, 0); [ byte2hex(sRESULT, vINPUT)
  block(STR.CONCAT, &sTemp2, &sTemp3, 0); [ str.concat(sINPUT, sADD)
  sTemp3 = "-";
  block(STR.CONCAT, &sTemp2, &sTemp3, 0); [ str.concat(sINPUT, sADD)
  random(0, 255, work1);
  block(BYTE2HEX, &sTemp3, &work1, 0); [ byte2hex(sRESULT, vINPUT)
  block(STR.CONCAT, &sTemp2, &sTemp3, 0); [ str.concat(sINPUT, sADD)
  random(0, 255, work1);
  block(BYTE2HEX, &sTemp3, &work1, 0); [ byte2hex(sRESULT, vINPUT)
  block(STR.CONCAT, &sTemp2, &sTemp3, 0); [ str.concat(sINPUT, sADD)
  block(STR.UPPER, &sTemp2, &sTemp2, 0); [ str.upper(sINPUT, sRESULT)
  output = "Volume Serial Number is %s17";
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  [ change item description
  sTemp2 = "formatted floppy disk";
  block(SET.ITEM, BYNUM, &floppydisk, &sTemp2); [ set.item(FN_MODE, ITEM, STRNEW)
  return();
}

if (terminalfn == TYPE_PP) {
  work1 = &output;
  work2 = 57;
  :typeout1
    block(SET.STRING.V, &work1, &work2, 0); [ set.string.v(vSTR, vMSG)
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    ++work2;
  if (work2 < 61) {
    goto(typeout1);
  }
  terminalfn = LINEFEED;
  call(lgc.TerminalFunctions);
  :typeout2
    block(SET.STRING.V, &work1, &work2, 0); [ set.string.v(vSTR, vMSG)
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    ++work2;
  if (work2 < 63) {
    goto(typeout2);
  }
  terminalfn = LINEFEED;
  call(lgc.TerminalFunctions);
  block(SET.STRING.V, &work1, &work2, 0); [ set.string.v(vSTR, vMSG)
  terminalfn = ADDLINE_LF;
  call(lgc.TerminalFunctions);
  return();
}

if (terminalfn == SHOW_HELP) {
  [ check for optional arg value
  sTemp2 = "";
  if (compare.strings(input, sTemp2)) {
    [ no argument - show list of commands
    output = "valid commands:";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "AMOS       Provides access to AMOS sub- ";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           systems and configuration";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "CLS        Clears the screen.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "CD/CHDIR   Changes the current";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           directory.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "CHKDSK     Checks a disk and displays a";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           status report";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "DIR        Displays a list of files in ";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           a directory.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "COPY       Copies files to another";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           location.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "DEL/ERASE  Deletes files.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "-- pause --";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    lastChar = 0;
    :wait3
    if (!have.key()) {
      goto(wait3);
    }
    output = "EXIT       Quits and restarts AMOS ";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "FORMAT     Formats a disk.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "HELP       Displays a list of AMOS ";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           commands.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "LOGOFF     Logs a user off AMOS.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "MD/MKDIR   Creates a directory.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "RD/RMDIR   Removes a directory.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "REN/RENAME Renames a file or files.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "SUDO       Runs AMOS commands with admin";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           privileges. ";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "TYPE       Displays the contents of a";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           text file.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "VER        Displays AMOS version.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
     output = "-- pause --";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    lastChar = 0;
    :wait4
    if (!have.key()) {
      goto(wait4);
    }
    output = "VOL        Displays a disk volume label";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
    output = "           and serial number.";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
  } else {
    reset(tmpFlag);
    [ check for valid command
    sTemp2 = "AMOS";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  AMOS [subcmd]:[option]";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "valid AMOS subcommands:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  stop: stops an running AMOS subsystem";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        use a valid subsystem or 'all'";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        as the option parameter";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  init: initialize an AMOS subsystem so";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        it can be loaded into memory";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        use a valid subsystem or 'all'";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        as the option parameter";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  load: loads an initialized AMOS sub-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        system; use a valid subsystem ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "-- pause --";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      lastChar = 0;
      :wait5
      if (!have.key()) {
        goto(wait5);
      }
      output = "        or 'all' as the option ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        parameter";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  interface: sets the interface mode ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        for AMOS; 'cmdline' or 'gui'; ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        call only one time after AMOS";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        is started";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      
      output = "  open: opens a subsystem on dedicated";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "        monitor";
      return();
    }
    sTemp2 = "CLS";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  CLS";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "clears the entire screen and moves the";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "cursor to the top line of the display";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "this command does not use parameters";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "CD";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    sTemp2 = "CHDIR";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    if (tmpFlag) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  CD newdir|drive:newdir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  CHDIR newdir|drive:newdir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "changes the current directory to a new";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "directory; if no drive letter is used, ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "newdir must exist on the current drive";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "CHKDSK";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  CHKDSK drive";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "runs basic diagnostics on the designated";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "drive; pass drive as a single letter";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "COPY";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  COPY srcfile destdir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "copies srcfile in the current directory";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "to destdir with the same name; use '*'";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "as a wildcard to copy multiple files;";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "e.g. '*.*' to copy all files, 'file.*'";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "to copy files of any type named 'file'";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "DEL";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    sTemp2 = "ERASE";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    if (tmpFlag) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  DEL afile";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  ERASE afile";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "deletes afile from the current dir-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "ectory; use '*' as a wild card to";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "delete multiple files; e.g. '*.*' to";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "delete all files, 'file.*' to delete";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "files of any type named 'file'";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "DIR";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  DIR";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "displays a list of directories and";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "files in the current drive/directory;";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "this command does not use parameters";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "EXIT";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  EXIT";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "log off the current user and exit the";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "current AMOS session; another session";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "will automatically restart; this";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "command does not use parameters;";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "pressing CTRL+SHIFT+ENTER is a short-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "cut to the EXIT command";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "FORMAT";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  FORMAT drive";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "formats a drive so it can be accessed";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "by the operating system; formatting";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "erases all existing files, so it re-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "quires full administrator privileges";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "HELP";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  HELP [command]";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "displays a list of valid AMOS comands;";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "if a command is passed, usage details";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "for that command are displayed";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "LOGOFF";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  LOGOFF";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "logs the current user out of AMOS so";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "another user can log in; this command";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "does not use parameters";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "MD";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    sTemp2 = "MKDIR";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    if (tmpFlag) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  MD newdir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  MAKEDIR newdir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "creates a new subdirectory in the ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "current directory; requires adminis-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "trator access";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "RD";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    sTemp2 = "RMDIR";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    if (tmpFlag) {
      return();
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  RD olddir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  RMDIR olddir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "deletes subdirectory olddir from the";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "current directory; all files in olddir";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "are also deleted; requires adminis-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "trator access";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "REN";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    sTemp2 = "RENAME";
    if (compare.strings(input, sTemp2)) {
      set(tmpFlag);
    }
    if (tmpFlag) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  REN oldname newname";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  RENAME oldname newname";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "renames existing file from oldname to ";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "newname; requires administrator access";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "SUDO";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  SUDO cmd [params]";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "runs a command using elevated priv-";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "ileges; a valid administrator must be";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "entered";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "TYPE";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  TYPE textfile";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "displays the contents of a text file;";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "if textfile is not a text file, an";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "error message is displayed";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "VER";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  VER";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "displays detailed version information";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "about the AMOS environment; this";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "command does not use parameters";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    sTemp2 = "VOL";
    if (compare.strings(input, sTemp2)) {
      output = "syntax:";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "  VOL drive";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      terminalfn = LINEFEED;
      call(lgc.TerminalFunctions);
      output = "displays the volume property of a";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      output = "drive";
      terminalfn = ADDLINE_LF;
      call(lgc.TerminalFunctions);
      return();
    }
    [ no match
    output = "syntax error - invalid command";
    terminalfn = ADDLINE_LF;
    call(lgc.TerminalFunctions);
  }
}
return();


[***************************************
[ DECLARED MESSAGES
[***************************************
#message 1 "_"
#message 2 " "
#message 3 "%s13"
#message 4 "%s14"
#message 5 "*"

[ directory messages
#message 6 " Directory of "
#message 7 "%m6C:\\\\"
#message 8 "%m6C:\\\\USERS"
#message 9 "%m6C:\\\\USERS\\\\KW002"
#message 10 "%m6A:\\\\"
[ DIR C:
#message 11 "07/16/89 09:12AM     438  AMOS.BAT"
#message 12 "08/06/89 09:11AM  42,445  AMOS.EXE"
#message 13 "07/14/89 05:31PM  18,518  AMOS.SYS"
#message 14 "11/30/85 03:42PM   6,732  MEM.SYS"
#message 15 "03/20/88 04:23PM   3,243  MOUSE.CPL"
#message 16 "03/18/88 02:40PM   6,781  MOUSE.DRV"
#message 17 "04/16/88 01:37PM  <DIR>   BADASS"
#message 18 "04/16/88 01:42PM  <DIR>   CAISOCC"
#message 19 "04/19/88 07:19PM  <DIR>   ERIDOCC"
#message 20 "05/09/88 08:16AM  <DIR>   ESADOCC"
#message 21 "04/23/88 05:00PM  <DIR>   ICAPOCC"
#message 22 "04/23/88 03:22PM  <DIR>   OFROCC"
#message 23 "05/08/88 08:09PM  <DIR>   RANDOCC"
#message 24 "04/16/88 01:37PM  <DIR>   SYSTEM"
#message 25 "04/16/88 01:38PM  <DIR>   USERS"
#message 26 "     6 File(s)    78,157 bytes"
#message 27 "     9 Dir(s) 125,755,392 bytes free"
[ DIR C:\USERS:
#message 28 "04/16/88 01:47PM  <DIR>   ADMIN"
#message 29 "04/16/88 01:47PM  <DIR>   AK083"
#message 30 "10/22/88 09:13AM  <DIR>   AL014"
#message 31 "10/22/88 09:14AM  <DIR>   DM073"
#message 32 "10/22/88 09:22AM  <DIR>   JS132"
#message 33 "04/16/88 01:49PM  <DIR>   JW005"
#message 34 "04/16/88 01:49PM  <DIR>   KD101"
#message 35 "10/22/88 09:13AM  <DIR>   KM066"
#message 36 "08/11/89 09:02AM  <DIR>   KW002"
#message 37 "10/22/88 09:13AM  <DIR>   MC048"
#message 38 "08/11/89 09:02AM  <DIR>   RW001"
#message 39 "10/22/88 09:15AM  <DIR>   SM037"
#message 40 "     0 File(s)         0 bytes"
#message 41 "    12 Dir(s) 125,755,392 bytes free"

[ DIR C:\USERS\KW002
#message 42 "08/24/89 07:36AM     438  PWRPACK.TXT"
#message 43 "08/24/89 07:32AM 307,887  PWRPACK.ZIP"
#message 44 "     2 File(s)   308,325 bytes"
#message 45 "     0 Dir(s) 125,755,392 bytes free"

[ DIR A:\
#message 46 "     0 File(s)         0 bytes"
#message 47 "     0 Dir(s)     368,640 bytes free"
#message 48 "     1 File(s)       438 bytes"
#message 49 "     0 Dir(s)     368,202 bytes free"
#message 50 "     1 File(s)   307,887 bytes"
#message 51 "     0 Dir(s)      60,753 bytes free"
#message 52 "     2 File(s)   308,325 bytes"
#message 53 "     0 Dir(s)      59,753 bytes free"

[ disk sector counters
#message 54 "%v47%v46"
#message 55 "%v247,%v47|2%v46"
#message 56 "%v248%v247K"

[ contents of PWRPACK.TXT
[            0123456789012345678901234567890123456789
#message 57 "Ken- as requested, the current version"
#message 58 "of Power Pack source files have been"
#message 59 "compressed into the accompanying ZIP"
#message 60 "file."
#message 61 "It's not encrypted, so make sure you"
#message 62 "don't let it out of your control."
#message 63 "--AK"