[ ********************************************************************
[
[ rm.Stairway
[
[ 
[
[ ********************************************************************

#define lightshadow   o1
#define door          o2

#define doorSeq      v220
#define flickerTime  v221

#define fDoorDone    f220
#define fDoorOpen    f221
#define doorUnlocked f222
#define lightOn      f223


if (newRoom) {
  [ this is the first cycle through this room
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  
  [ the horizon defines the upper limit of ego's movement
  set.horizon(0);
  
  load.view(vw.StairwayArt);
  
  [ lights
  add.to.pic(vw.StairwayArt, 0, 0, 128, 81, 4, 15);
  animate.obj(lightshadow);
  set.view(lightshadow, vw.StairwayArt);
  set.loop(lightshadow, 0);
  set.cel(lightshadow, 0);
  set.priority(lightshadow, 4);
  position(lightshadow, 76, 133);
  stop.cycling(lightshadow);
  ignore.objs(lightshadow);
  ignore.blocks(lightshadow);
  draw(lightshadow);
  set(lightOn);
  [ if MOCC is reset, no flicker
  if (resetMOCC) {
    flickerTime = 0;
  } else {
    random(20, 30, flickerTime);
  }
  
  [ door
  animate.obj(door);
  set.view(door, vw.StairwayArt);
  set.loop(door, 1);
  position(door, 32, 152);
  set.priority(door, 5);
  stop.cycling(door);
  ignore.objs(door);
  draw(door);
  
  [ ego
  if (previousRoom == rm.SecretRoom) {
    egoDir = STOPPED;
    position(ego, 153, 56);
    observe.blocks(ego);
    set.loop(ego, 1);
    set.cel(door, 0);
  }
  if (previousRoom == rm.DoorKeypad) {
    [ remain at current position, with door open/closed
    [ depending on lock status (work2 has door status)
    if (work2 == 1) {
      ignore.blocks(ego);
      set.cel(door, 4);
      set(fDoorOpen);
    } else {
      observe.blocks(ego);
      set.cel(door, 0);
    }
  }
  if (previousRoom == rm.ControlRoom) {  
    [ coming from control room; door is open
    position(ego, 34, 155);
    ignore.blocks(ego);
    set.cel(door, 4);
    set(fDoorOpen);
  }
    
  [ force priority
  set.priority(ego, 6);
  egoDir = STOPPED;
  draw(ego);
  
  [ add button-up images
  set(noScript);
  load.view(vw.ButtonsUp);
  add.to.pic(vw.ButtonsUp, 0, 0, 15, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 1, 32, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 2, 48, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 3, 64, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 4, 81, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 5, 97, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 6, 113, 16, 15, 4);
  add.to.pic(vw.ButtonsUp, 0, 7, 129, 16, 15, 4);
  discard.view(vw.ButtonsUp);
  reset(noScript);
  [ add toolbar buttons
  load.view(vw.ButtonsUp);
  call(lgc.InitToolbar);
  
  [ display the picture on screen
  show.pic();
  [ fade in
  block(FADE.IN, 0, FADECOUNT, BLACK); [ fade.in(BYVAR, DELAY, COLOR)
  [ restore cursor
  cursoricon = cursormode;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  return();
}

[ if by door, and it's open, allow ego to cross over
if (egoX < 44 && fDoorOpen) {
  ignore.blocks(ego);
} else {
  observe.blocks(ego);
}

[ light flickers on/off randomly until MOCC is restarted
if (flickerTime > 0) {
  --flickerTime;
  if (flickerTime == 0) {
    if (lightOn) {
      erase(lightshadow);
      random(1, 8, flickerTime);
    } else {
      draw(lightshadow);
      random(24, 80, flickerTime);
    }
    toggle(lightOn);
  }
}
 
[*****
:handleInput       [ check for input from player
[*****
if (haveInput && !haveMatch && unknownWordNum == 0) {
  [ place said tests here
  if (said("look")) {
    print("You see nothing of interest.");
  }
  if (said("open", "door")) {
    if (posn(ego, 26, 154, 43, 156)) {
      if (doorUnlocked) {
        doorSeq = 1;
      } else {
        print("The door is locked.");
      }
    } else {
      print("you are not close enough.");
    }
  }
  
  if (said("close", "door")) {
    if (posn(ego, 26, 154, 43, 156)) {
      doorSeq = 2;
    } else {
      print("you are not close enough.");
    }
  }
}
  
[ if cursor is look/talk/use and left-click and NOT 
[ clicking on the actual toolbar, check for clicks
[ on in-game items
if (cursoricon > C_WALK && cursoricon < C_WAIT && 
    controller(cLeftClick) &&
    (mouseX < 14 || mouseX > 145 || mouseY > 25)) {
  [ ignore borders
  if ((mouseX < 13 || mouseX > 151 || mouseY < 27 || mouseY > 166)) {
    goto(doneclick);
  }
  
  [ look
  if (cursormode == C_LOOK) {
    [ ego
    if (posn(ego, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("You see you.");
      goto(doneclick);
    }
    
    [ door
    if (mouseX > 30 && mouseX < 44 && mouseY > 125 && mouseY < 162) {
      print("This sturdy door must be protecting something very important.");
      goto(doneclick);
    }
    
    [ access control pad
    if (mouseX > 45 && mouseX < 50 && mouseY > 143 && mouseY < 151) {
      print("It's a door access keypad. With the right code, it will unlock the door.");
      goto(doneclick);
    }
    [ stairs/wall
    if (mouseX > 53) {
      work1 = 223;
      work1 -= mouseX;
      if (work1 >= mouseY) {
        work2 = work1;
        work2 -= mouseY;
        if (work2 < 12) {
          print("A long set of stairs leads down from the secret room to a small foyer.");
        } else {
          if (work2 < 56) {
            print("The walls are a bit plain, and show signs of age with various cracks clearly visible.");
            print("The stairwell is illuninated by a couple of overhead lights.");
            if (!resetMOCC) {
              print("The lower light flickers a lot, as if there is something not quite right with the electrical circuit.");
            }
          }
        }
        goto(doneclick);
      } else {
        [ below stairs
        goto(doneclick);
      }
    }
    [ rest of wall
    if (mouseX > 22 && mouseX < 60 && mouseY > 107 && mouseY < 162) {
            print("The walls are a bit plain, and show signs of age with "
                  "various cracks clearly visible.");
            print("The stairwell is illuninated by a couple of overhead "
                  "lights.");
            if (!resetMOCC) {
              print("The lower light flickers a lot, as if there is something "
                    "not quite right with the electrical circuit.");
            }
      goto(doneclick);
    }
    
[    [ nothing specific
[    print("black space");
[    goto(doneclick);
  }
  
  [ talk
  if (cursormode == C_TALK) {
    [ ego
    if (posn(ego, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("You have nothing to say.");
    } else {
      print("There is no one here to talk to.");
    }
    goto(doneclick);
  }
  
  [ use
  if (cursormode == C_USE) {
    [ ego
    if (posn(ego, ON.OBJ, 1, &mouseX, &mouseY)) {
      print("Please don't touch yourself. Not even when you're alone.");
      goto(doneclick);
    }
    
    [ door
    if (mouseX > 30 && mouseX < 44 && mouseY > 125 && mouseY < 162) {
      if (posn(ego, 26, 154, 43, 156)) {
        if (fDoorOpen) {
          [ close it
          doorSeq = 2;
        } else {
          [ open it (if not locked)
          if (doorUnlocked) {
            doorSeq = 1;
          } else {
            print("The door is locked.");
          }
        }
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
    
    [ access control pad
    if (mouseX > 45 && mouseX < 50 && mouseY > 143 && mouseY < 151) {
      if (posn(ego, 38, 154, 51, 157)) {
        [ if door is open
        if (fDoorOpen) {
          print("The door is already open.");
        } else {
          [ show wait cursor
          cursoricon = C_WAIT;
          set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
          [ fade out, then display access panel
          block(FADE.OUT, 0, 10, BLACK); [ fade.out(BYVAR, DELAY, COLOR)
          new.room(rm.DoorKeypad); [ ##LE001##
        }
      } else {
        print("Move closer.");
      }
      goto(doneclick);
    }
  }
  
  :doneclick
  set.key(-1, -1, cLeftClick); [ clear.controller(cLeftClick);
}
  
[*****
:noInput           [  all non-input related code goes here 
[*****
if (doorSeq == 1) {
  [ open the door
  doorSeq = 3;
  end.of.loop(door, fDoorDone);
}
if (doorSeq == 2) {
  [ close the door
  doorSeq = 4;
  reverse.loop(door, fDoorDone);
  observe.blocks(ego);
  reset(fDoorOpen);
}

if (fDoorDone) {
  reset(fDoorDone);
  if (doorSeq == 3) {
    ignore.blocks(ego);
    set(fDoorOpen);
  }
  doorSeq = 0;
}


[*****
:exit              [  test for leaving the room
[*****

[ add exit checks here (or use layout editor)
if (edgeEgoHit == RIGHT_EDGE) {
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  [ fade out, then change room
  block(FADE.OUT, 0, FADECOUNT, BLACK); [ fade.out(BYVAR, DELAY, COLOR)
  new.room(rm.SecretRoom); [ ##LE002##
}

if (egoHitSpecial) {
  [ show wait cursor
  cursoricon = C_WAIT;
  set.key(1, &cursoricon, mouse); [ set.cursor(BYVAR, MSGNUM);
  [ fade out, then change room
  block(FADE.OUT, 0, FADECOUNT, BLACK); [ fade.out(BYVAR, DELAY, COLOR)
  new.room(rm.ControlRoom); [ ##LE003##
}
return();

[*****
[ messages         [  declared messages go here
[*****
#message 1 "%g40"
#message 2 "%g41"
#message 3 "%g42"
#message 4 "%g43"
#message 5 "%g44"
#message 6 "%g45"
#message 7 "You see nothing of interest." 
 