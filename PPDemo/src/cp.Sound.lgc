[ ********************************************************************[[ cp.Sound[[ Electronic Synthesized Audio Data Options Control Console[ [ ESADOCC[ toggle between pc speaker and 4chan[ allow instrument selection for each channel[ test button - play a song, or piano keyboard?[ ********************************************************************#define oCursorB       o1  [ need four objects for cursor otherwise#define oCursorT       o2  [ text gets erased#define oCursorL       o3#define oCursorR       o4#define oMode          o5#define oChannels      o6#define oCheck         o7#define oTest          o8#define cursorpos     v221#define    CP_MOUSE   1#define    CP_KEYB    2#define    CP_1CHAN   3#define    CP_4CHAN   4#define    CP_OK      5#define    CP_CANCEL  6#define    CP_TESTALL 7#define    CP_TEST1   8#define    CP_TEST2   9#define    CP_TEST3  10#define    CP_TEST4  11#define    CP_TEST5  12#define    CP_INST1  13#define    CP_INST2  14#define    CP_INST3  15#define    CP_INST4  16#define    CP_INST5  17#define newpos       v222#define cursorX      v223#define cursorY      v224#define btnAction    v225#define    B_1CHAN    1#define    B_4CHAN    2#define    B_OK       3#define    B_CANCEL   4#define    B_TESTALL  5#define    B_TEST1    6#define    B_TEST2    7#define    B_TEST3    8#define    B_TEST4    9#define    B_TEST5   10#define    B_INST1   11#define    B_INST2   12#define    B_INST3   13#define    B_INST4   14#define    B_INST5   15#define egoPrevX     v227#define egoPrevY     v228#define egoPrevDir   v229#define tmpInst1     v230#define tmpInst2     v231#define tmpInst3     v232#define tmpInst4     v233#define tmpInst5     v234#define update       f220#define tmp4Chan     f221#define cursormode   f222#define sndDone      f223if(newRoom)   {  [ this is the first cycle through this room  [ load, draw and discard the picture resource for the current room  load.pic(currentRoom);  draw.pic(currentRoom);  discard.pic(currentRoom);  [ do basic room initialization  call(lgc.RoomInit);  [ this view has all the art for cursors and buttons  load.view(vw.cp.Sound);    [ load the test sounds  load.sound(s.InstTest);  load.sound(s.NoiseTest);    [ option button that determines input mode; mouse or keyboard  animate.obj(oMode);  set.view(oMode, vw.cp.Sound);  set.loop(oMode, 0);  set.cel(oMode, 0);  stop.cycling(oMode);  position(oMode, 8, 65);  draw(oMode);    [ option button for channel count  animate.obj(oChannels);  set.view(oChannels, vw.cp.Sound);  set.loop(oChannels, 0);  set.cel(oChannels, 0);  stop.cycling(oChannels);  if (4channelsound) {    set(tmp4Chan);    position(oChannels, 8, 113);  } else {    reset(tmp4Chan);    position(oChannels, 8, 97);  }  draw(oChannels);    [ cursor, in four parts, default to keyboard option position  animate.obj(oCursorB);  ignore.objs(oCursorB);  set.view(oCursorB, vw.cp.Sound);  set.loop(oCursorB, 1);  set.cel(oCursorB, 0);  stop.cycling(oCursorB);    animate.obj(oCursorL);  ignore.objs(oCursorL);  set.view(oCursorL, vw.cp.Sound);  set.loop(oCursorL, 1);  set.cel(oCursorL, 6);  stop.cycling(oCursorL);    animate.obj(oCursorT);  ignore.objs(oCursorT);  set.view(oCursorT, vw.cp.Sound);  set.loop(oCursorT, 1);  set.cel(oCursorT, 0);  stop.cycling(oCursorT);    animate.obj(oCursorR);  ignore.objs(oCursorR);  set.view(oCursorR, vw.cp.Sound);  set.loop(oCursorR, 1);  set.cel(oCursorR, 6);  stop.cycling(oCursorR);    [ cursor starts on keyboard option button  cursorpos = CP_KEYB;  newpos = CP_KEYB;  [ don't draw it yet though    [ display the picture on screen  show.pic();    [ add text  set.text.attribute(-1, 0);  set.text.attribute(BLACK, LT_GRAY);  display(6, 5, "Mode");  display(8, 4, "Ms");  display(8, 10, "Kb");  display(12, 4, "1chan PC");  display(14, 4, "4chan SB");    set.text.attribute(BLACK, WHITE);  display(18, 3, "OK");  display(20, 1, "Cancel");  display(19, 9, "Test");  display(8, 16, "\x0E");  display(11, 16, "\x0E");  display(14, 16, "\x0E");  display(17, 16, "\x0E");  display(20, 16, "\x0E");  [ current instruments  cursorY = 19;  cursorX = 8;  work = instrument1;  ++work;  display.v(cursorX, cursorY, work);  cursorX = 11;  work = instrument2;  display.v(cursorX, cursorY, work);  cursorX = 14;  work = instrument3;  display.v(cursorX, cursorY, work);  cursorX = 17;  work = instrument4;  display.v(cursorX, cursorY, work);  cursorX = 20;  work = instrument5;  display.v(cursorX, cursorY, work);    set.text.attribute(0, -1);    [ no text input in this room  prevent.input();  lastChar = 0;  [ arrow keys control cursor here  egoDir = 0;    [ mouse is enabled, not cursor; no button active  enable.item(mouse);  reset(cursormode);  btnAction = 0;  [ cache ego movement parameters (to be restored  [ when returning to the control room)  egoPrevX = egoX;  egoPrevY = egoY;  egoPrevDir = egoDir;    return();}[ **************************************[ FIRST CYCLE ONLY[ **************************************[ is cursor in text mode?if (cursormode) {  [ check for direction arrow keypress  if (egoDir != STOPPED) {    [ cursor up    if (egoDir == UP) {      if (cursorpos == CP_1CHAN) {        newpos = CP_MOUSE;      }      if (cursorpos > CP_1CHAN && cursorpos < CP_TESTALL) {        --newpos;      }      if (cursorpos == CP_TESTALL) {        newpos = CP_4CHAN;      }      if (cursorpos > CP_TEST1 && cursorpos < CP_INST1) {        --newpos;      }      if (cursorpos > CP_INST1) {        --newpos;      }    }        [ cursor right    if (egoDir == RIGHT) {      if (cursorpos == CP_MOUSE) {        newpos = CP_KEYB;      }      if (cursorpos > CP_MOUSE && cursorpos < CP_OK) {        newpos += 6;      }      if ((cursorpos == CP_OK || cursorpos == CP_CANCEL)) {        newpos = CP_TESTALL;      }      if (cursorpos == CP_TESTALL) {        newpos = CP_TEST4;      }      if (cursorpos > CP_TESTALL && cursorpos < CP_INST1) {        newpos += 5;      }    }        [ cursor down    if (egoDir == DOWN) {      if (cursorpos < CP_1CHAN) {        newpos = CP_1CHAN;      }      if (cursorpos > CP_KEYB && cursorpos < CP_CANCEL) {        ++newpos;      }      if (cursorpos > CP_TESTALL && cursorpos < CP_TEST5) {        ++newpos;      }      if (cursorpos > CP_TEST5 && cursorpos < CP_INST5) {        ++newpos;      }    }        [ cursor left    if (egoDir == LEFT) {      if (cursorpos == CP_KEYB) {        newpos = CP_MOUSE;      }      if (cursorpos == CP_TESTALL) {        newpos = CP_CANCEL;      }      if (cursorpos == CP_TEST1) {        newpos = CP_KEYB;      }      if (cursorpos == CP_TEST2) {        newpos = CP_1CHAN;      }      if (cursorpos == CP_TEST3) {        newpos = CP_4CHAN;      }      if (cursorpos == CP_TEST4) {        newpos = CP_TESTALL;      }      if (cursorpos == CP_TEST5) {        newpos = CP_TESTALL;      }      if (cursorpos > CP_TEST5) {        newpos -= 5;      }    }        [ always reset dir so another keypress can be detected    egoDir = 0;        [ check for new cursor position    if (cursorpos != newpos) {      [ to move cursor, erase it first, otherwise, it will      [ clear any text that is present anywhere between the      [ new position and the old position      erase(oCursorB);      erase(oCursorL);      erase(oCursorT);      erase(oCursorR);      [ update the position      cursorpos = newpos;      [ depending on where cursor is, set the position and size/shape      if ((cursorpos == CP_MOUSE || cursorpos == CP_KEYB)) {        [ option buttons        set.cel(oCursorB, 0);        set.cel(oCursorT, 0);        set.cel(oCursorL, 6);        set.cel(oCursorR, 6);        cursorY = 65;        if (cursorpos == 1) {          cursorX = 7;        }        if (cursorpos == 2) {          cursorX = 31;        }      }            [ channel count options      if ((cursorpos == CP_1CHAN || cursorpos == CP_4CHAN)) {        set.cel(oCursorB, 1);        set.cel(oCursorT, 1);        set.cel(oCursorL, 6);        set.cel(oCursorR, 6);        [ convert cursorpos into desired y value        cursorX = 7;        cursorY = cursorpos;        cursorY -= 3;        cursorY *= 16;        cursorY += 97;      }              [ OK, Cancel      if ((cursorpos == CP_OK || cursorpos == CP_CANCEL)) {        set.cel(oCursorB, 2);        set.cel(oCursorT, 2);        set.cel(oCursorL, 7);        set.cel(oCursorR, 7);                [ convert cursorpos into desired y value        cursorX = 3;        cursorY = cursorpos;        cursorY -= 5;        cursorY *= 16;        cursorY += 144;      }            [ test all      if (cursorpos == CP_TESTALL) {        set.cel(oCursorB, 3);        set.cel(oCursorT, 3);        set.cel(oCursorL, 7);        set.cel(oCursorR, 7);        cursorX = 35;        cursorY = 152;      }            [ test channel buttons      if (cursorpos > CP_TESTALL && cursorpos < CP_INST1) {        set.cel(oCursorB, 4);        set.cel(oCursorT, 4);        set.cel(oCursorL, 7);        set.cel(oCursorR, 7);                [ convert cursorpos into desired y value        cursorX = 63;        cursorY = cursorpos;        cursorY -= 8;        cursorY *= 24;        cursorY += 64;      }                  [ instrument text boxes      if (cursorpos > CP_TEST5) {        set.cel(oCursorB, 5);        set.cel(oCursorT, 5);        set.cel(oCursorL, 7);        set.cel(oCursorR, 7);                [ convert cursorpos into desired y value        cursorX = 75;        cursorY = cursorpos;        cursorY -= 13;        cursorY *= 24;        cursorY += 64;      }            [ ***** need a get.size function to retrieve an object's      [ height/width; it would make these calculations MUCH easier      [ ******      [ redraw the cursor      position.v(oCursorB, cursorX, cursorY);      draw(oCursorB);      --cursorY;      position.v(oCursorL, cursorX, cursorY);      draw(oCursorL);      if (cursorpos < CP_OK) {        cursorY -= 10;      } else {        cursorY -= 8;      }      position.v(oCursorT, cursorX, cursorY);      draw(oCursorT);      if (cursorpos < CP_1CHAN) {        cursorX += 17;        cursorY += 10;      } else {        if ((cursorpos == CP_1CHAN || cursorpos == CP_4CHAN)) {          cursorX += 41;          cursorY += 10;        } else {          if ((cursorpos == CP_OK || cursorpos == CP_CANCEL)) {            cursorX += 25;          }          if (cursorpos == CP_TESTALL) {            cursorX += 17;          }          if (cursorpos > CP_TESTALL && cursorpos < CP_INST1) {            cursorX += 5;          }          if (cursorpos > CP_TEST5) {            cursorX += 77;          }          cursorY += 8;        }      }      position.v(oCursorR, cursorX, cursorY);      draw(oCursorR);    }  }    [ check for selection (space/enter for buttons)  if (have.key()) {    [ space/enter    if ((lastChar == 32 || lastChar == 13 || lastChar == 10)) {      if (cursorpos  == CP_MOUSE) {        [ switch to mouse control        reset(cursormode);        enable.item(mouse);        erase(oMode);        position(oMode, 8, 65);        draw(oMode);        [ erase the cursor objects        erase(oCursorB);        erase(oCursorT);        erase(oCursorL);        erase(oCursorR);      }      if (cursorpos > 2) {        btnAction = cursorpos;        btnAction -= 2;      }    }    }} else {  [ check for mouse click  if (controller(cLeftClick)) {    [ over cursor type keyboard option [31, 53 - 49, 66]    if (mouseX > 32 && mouseX < 38 && mouseY > 63 && mouseY < 72) {      [ switch to keyboard cursor      set(cursormode);      disable.item(mouse);      erase(oMode);      position(oMode, 32, 65);      draw(oMode);      [ start cursor on keyboard option button      cursorpos = CP_KEYB;      newpos = CP_KEYB;      position(oCursorB, 31, 65);      draw(oCursorB);      position(oCursorL, 31, 64);      draw(oCursorL);      position(oCursorT, 31, 54);      draw(oCursorT);      position(oCursorR, 48, 64);      draw(oCursorR);    }        [ over OK button [3, 103 - 32, 112] (need to add 8 to y due to pic offset)    if (mouseX > 2 && mouseX < 33 && mouseY > 110 && mouseY < 120) {      btnAction = B_OK;    }          [ over Cancel button [3, 119 - 32, 128]    if (mouseX > 2 && mouseX < 33 && mouseY > 126 && mouseY < 136) {      btnAction = B_CANCEL;    }        [ other buttons  }}[ check for button actionif (btnAction == 0) {  return();}if (btnAction == B_OK) {  print.at("sound changed ", 5, 6, 31);    [ restore ego movement parameters  egoX = egoPrevX;  egoY = egoPrevY;  egoDir = egoPrevDir;    [ update sound parameters  [  [ go back to previous room  new.room.v(previousRoom); }if (btnAction == B_CANCEL) {  [ restore ego movement parameters  egoX = egoPrevX;  egoY = egoPrevY;  egoDir = egoPrevDir;    [ and go back to previous room  new.room.v(previousRoom);}[ other button actions...if (btnAction == B_TESTALL) {  [ set all instruments    sound(s.InstTest, sndDone);}if (btnAction == B_TEST1) {  [ set first channel to inst1[   [ to change channel envelopes (instruments):[   set.key(-2, CHANNEL, INSTRUMENT*);   }if (btnAction == B_TEST2) {}if (btnAction == B_TEST3) {}if (btnAction == B_TEST4) {}if (btnAction == B_TEST5) {}[ always reset button actionbtnaction = 0;return();[ **************************************[ DECLARED MESSAGES[ **************************************#message 1 "Acoust. Grand Piano"#message 2 "Bright Acous. Piano"#message 3 "Elec. Grand Piano"#message 4 "Honky-tonk Piano"#message 5 "Electric Piano 1"#message 6 "Electric Piano 2"#message 7 "Harpsichord"#message 8 "Clavinet"#message 9 "Celesta"#message 10 "Glockenspiel"#message 11 "Music Box"#message 12 "Vibraphone"#message 13 "Marimba"#message 14 "Xylophone"#message 15 "Tubular Bells"#message 16 "Dulcimer"#message 17 "Drawbar Organ"#message 18 "Percussive Organ"#message 19 "Rock Organ"#message 20 "Church Organ"#message 21 "Reed Organ"#message 22 "Accordion"#message 23 "Harmonica"#message 24 "Tango Accordion"#message 25 "Ac. Guitar (nylon)"#message 26 "Ac. Guitar (steel)"#message 27 "Elec. Guitar (jazz)"#message 28 "El. Guitar (clean)"#message 29 "El. Guitar (muted)"#message 30 "Overdriven Guitar"#message 31 "Distortion Guitar"#message 32 "Guitar harmonics"#message 33 "Acoustic Bass"#message 34 "Elec. Bass (finger)"#message 35 "Elec. Bass (pick)"#message 36 "Fretless Bass"#message 37 "Slap Bass 1"#message 38 "Slap Bass 2"#message 39 "Synth Bass 1"#message 40 "Synth Bass 2"#message 41 "Violin"#message 42 "Viola"#message 43 "Cello"#message 44 "Contrabass"#message 45 "Tremolo Strings"#message 46 "Pizzicato Strings"#message 47 "Orchestral Harp"#message 48 "Timpani"#message 49 "String Ensemble 1"#message 50 "String Ensemble 2"#message 51 "Synth Strings 1"#message 52 "Synth Strings 2"#message 53 "Choir Aahs"#message 54 "Voice Oohs"#message 55 "Synth Voice"#message 56 "Orchestra Hit"#message 57 "Trumpet"#message 58 "Trombone"#message 59 "Tuba"#message 60 "Muted Trumpet"#message 61 "French Horn"#message 62 "Brass Section"#message 63 "Synth Brass 1"#message 64 "Synth Brass 2"#message 65 "Soprano Sax"#message 66 "Alto Sax"#message 67 "Tenor Sax"#message 68 "Baritone Sax"#message 69 "Oboe"#message 70 "English Horn"#message 71 "Bassoon"#message 72 "Clarinet"#message 73 "Piccolo"#message 74 "Flute"#message 75 "Recorder"#message 76 "Pan Flute"#message 77 "Blown Bottle"#message 78 "Shakuhachi"#message 79 "Whistle"#message 80 "Ocarina"#message 81 "Lead 1 (square)"#message 82 "Lead 2 (sawtooth)"#message 83 "Lead 3 (calliope)"#message 84 "Lead 4 (chiff)"#message 85 "Lead 5 (charang)"#message 86 "Lead 6 (voice)"#message 87 "Lead 7 (fifths)"#message 88 "Lead 8 (bass+lead)"#message 89 "Pad 1 (new age)"#message 90 "Pad 2 (warm)"#message 91 "Pad 3 (polysynth)"#message 92 "Pad 4 (choir)"#message 93 "Pad 5 (bowed)"#message 94 "Pad 6 (metallic)"#message 95 "Pad 7 (halo)"#message 96 "Pad 8 (sweep)"#message 97 "FX 1 (rain)"#message 98 "FX 2 (soundtrack)"#message 99 "FX 3 (crystal)"#message 100 "FX 4 (atmosphere)"#message 101 "FX 5 (brightness)"#message 102 "FX 6 (goblins)"#message 103 "FX 7 (echoes)"#message 104 "FX 8 (sci-fi)"#message 105 "Sitar"#message 106 "Banjo"#message 107 "Shamisen"#message 108 "Koto"#message 109 "Kalimba"#message 110 "Bag pipe"#message 111 "Fiddle"#message 112 "Shanai"#message 113 "Tinkle Bell"#message 114 "Agogo"#message 115 "Steel Drums"#message 116 "Woodblock"#message 117 "Taiko Drum"#message 118 "Melodic Tom"#message 119 "Synth Drum"#message 120 "Reverse Cymbal"#message 121 "Guitar Fret Noise"#message 122 "Breath Noise"#message 123 "Seashore"#message 124 "Bird Tweet"#message 125 "Telephone Ring"#message 126 "Helicopter"#message 127 "Applause"#message 128 "Gunshot"#message 129 "AGISB Default"#message 130 "Sierra White Noise"#message 131 "Sierra Tone Noise"