[ ********************************************************************
[ 
[ cp.RANDOCC
[
[ Rectangular Alpha-Numeric Display Options Control Console
[ RANDOCC
[
[ ********************************************************************

#define oCursorB       o1  [ need four objects for cursor otherwise
#define oCursorT       o2  [ text gets erased
#define oCursorL       o3
#define oCursorR       o4
#define optRightBtn    o5
#define optCursor      o6

[ loop values assigned to cursor objects
#define LP_OPT      0 [ option button states
#define LP_CF_OPT   1 [ cursor frame for mouse/keyb and right-click option buttons
#define LP_CF_CMD   2 [    "     "    "  OK, Cancel, Reset command buttons
#define LP_CF_LT_PAL_H   3 [    horizontal frame for bright palette color selection
#define LP_CF_DK_PAL_H   4 [    horizontal frame for dark palette color selection
#define LP_CF_LT_PAL_V   5 [    vertical frame for bright palette color selection
#define LP_CF_DK_PAL_V   6 [    vertical frame for dark palette color selection

#define tmpBG        v220
#define tmpFG        v221
#define tmpBorder    v222
#define cRow         v223
#define cCol         v224
#define cInit        v225
#define palFG        v226
#define palBG        v227
#define colorindex   v228
#define cursorpos    v229
#define    CP_MOUSE  1
#define    CP_KEYB   2
#define    CP_RT_BG  3
#define    CP_RT_BD  4
#define    CP_OK     5
#define    CP_CANCEL 6
#define    CP_RESET  7
[ 8 and above are color choices

#define newpos       v230
#define cursorX      v231
#define cursorY      v232
#define btnAction    v233
#define    B_OK      1
#define    B_CANCEL  2
#define    B_RESET   3
#define    B_PAL_FG  4
#define    B_PAL_BG  5
#define    B_PAL_BD  6
#define    B_OP_BG   7
#define    B_OP_BD   8
#define egoPrevX     v234
#define egoPrevY     v235
#define egoPrevDir   v236
#define oldFG        v237

#define update       f220
#define rightmode    f221   [ when true, rightclick sets border
                            [ when false, rightclick sets bg
#define cursormode   f222
#define noredraw     f223 [ fg only needs text re-displayed

#define sTemp        s12  [ includes s13
#define hexBG        s14
#define hexBD        s15

[if this control panel is not enabled show error screen
if (!enableRANDOCC) {
  if (newRoom) {
    work1 = pic.cp.Error;
    load.pic(work1);
    draw.pic(work1);
    discard.pic(work1);
    show.pic();
    set.text.attribute(-1, 0);
    set.text.attribute(GREEN, BLACK);
    display(1, 1, "> subsystem error");
    set.text.attribute(0, -1);
    block(FADE.IN, 0, FADECOUNT, BLACK); [ fade.in(BYVAR, DELAY, COLOR);
    lastChar = 0;
  }
  [ any key, or any mouse-click to exit
  if ((have.key() || controller(cLeftClick) || controller(cRightClick))) {
    [ fade out 
    block(FADE.OUT, 0, FADECOUNT, BLACK);  [ fade.out(BYVAR, DELAY, COLOR);
    new.room.v(previousRoom); [ ##LE001##
  }
  return();
}

[ **************************************
[ FIRST CYCLE ONLY
[ **************************************
if (newRoom) {
  [ this is the first cycle through this room
  [ do basic room initialization
  
  [ if first time, score it
  work1 = cpusage;
  block(BIT.AND, 0, &work1, 2); [ bit.and(BYVAL, VAR, MASK)
  if (work1 == 2) {
    work1 = 5;
    call(lgc.ScoreHandler);
    block(BIT.OR, 0, &cpusage, 2); [ bit.or(BYVAL, VAR, MASK)
  }
  
  [ load, draw and discard the picture resource for the current room
  load.pic(currentRoom);
  draw.pic(currentRoom);
  discard.pic(currentRoom);
  
  [ this view has all the art for cursors and buttons
  load.view(vw.cp.RANDOCC);
  
  [ option button that determines input mode; mouse or keyboard
  animate.obj(optCursor);
  set.view(optCursor, vw.cp.RANDOCC);
  set.loop(optCursor, LP_OPT);
  set.cel(optCursor, 0);
  stop.cycling(optCursor);
  position(optCursor, 8, 97);
  draw(optCursor);
  
  [ option button that determines action on palette right-click
  animate.obj(optRightBtn);
  set.view(optRightBtn, vw.cp.RANDOCC);
  set.loop(optRightBtn, LP_OPT);
  set.cel(optRightBtn, 0);
  stop.cycling(optRightBtn);
  position(optRightBtn, 104, 97);
  draw(optRightBtn);
  
  [ four-part cursor; default position is the Keyboard input option
  animate.obj(oCursorB);
  ignore.objs(oCursorB);
  set.view(oCursorB, vw.cp.RANDOCC);
  set.loop(oCursorB, LP_CF_OPT);
  set.cel(oCursorB, 0);
  stop.cycling(oCursorB);
  position(oCursorB, 30, 97);
  
  animate.obj(oCursorT);
  ignore.objs(oCursorT);
  set.view(oCursorT, vw.cp.RANDOCC);
  set.loop(oCursorT, LP_CF_OPT);
  set.cel(oCursorT, 0);
  stop.cycling(oCursorT);
  position(oCursorT, 30, 86);
  
  animate.obj(oCursorL);
  ignore.objs(oCursorL);
  set.view(oCursorL, vw.cp.RANDOCC);
  set.loop(oCursorL, LP_CF_OPT);
  set.cel(oCursorL, 1);
  stop.cycling(oCursorL);
  position(oCursorL, 30, 96);
  
  animate.obj(oCursorR);
  ignore.objs(oCursorR);
  set.view(oCursorR, vw.cp.RANDOCC);
  set.loop(oCursorR, LP_CF_OPT);
  set.cel(oCursorR, 1);
  stop.cycling(oCursorR);
  position(oCursorR, 47, 97);
  
  [ cursor for keyboard mode starts on keyboard option button
  cursorpos = CP_KEYB;
  newpos = CP_KEYB;
  [ don't draw it yet though
  
  lastChar = 0;
  [ arrow keys control cursor here
  egoDir = 0;
  
  [ mouse is enabled, not cursor
  enable.item(mouse);
  reset(cursormode);
  
  btnAction = 0;

  [ update the sample messagebox and palette
  tmpBG = msgBoxBG;
  tmpFG = msgBoxFG;
  tmpBorder = msgBoxBorder;

  [ cache ego movement parameters (to be restored
  [ when returning to the control room)
  egoPrevX = egoX;
  egoPrevY = egoY;
  egoPrevDir = egoDir;
  
  set(update);
  goto(checkupdate);
}


[ **************************************
[ EVERY CYCLE
[ **************************************

[ is cursor in text mode?
if (cursormode) {
  [ check for direction arrow keypress
  if (egoDir != STOPPED) {
    [ cursor up
    if (egoDir == UP) {
      if (cursorpos == CP_OK) {
        newpos = CP_MOUSE;
      }
      if ((cursorpos == CP_CANCEL || cursorpos == CP_RESET)) {
        newpos -= 1;
      } 
      if (cursorpos >= 16) {
        newpos -= 8;
      }
    }
    
    [ cursor right
    if (egoDir == RIGHT) {
      if (cursorpos < 2) {
        newpos += 1;
      }
      if ((cursorpos == CP_OK || cursorpos == CP_CANCEL)) {
        newpos = 8;
      }
      if (cursorpos == CP_RESET) {
        newpos = 16;
      }
      if (cursorpos > 7 && cursorpos < 15) {
        newpos += 1;
      }
      if (cursorpos > 15 && cursorpos < 23) {
        newpos += 1;
      }
    }
    
    [ cursor down
    if (egoDir == DOWN) {
      if (cursorpos < 3) {
        newpos = 5;
      }
      if (cursorpos == 3) {
        newpos = 12;
      }
      if (cursorpos == 4) {
        newpos = 14;
      }
      if ((cursorpos == 5 || cursorpos == 6)) {
        newpos += 1;
      }
      if (cursorpos > 7 && cursorpos < 16) {
        newpos += 8;
      }
    }
    
    [ cursor left
    if (egoDir == LEFT) {
      if (cursorpos > 1 && cursorpos < 5) {
        newpos -= 1;
      }
      if (cursorpos == 8) {
        newpos = 5;
      }
      if (cursorpos > 8 && cursorpos < 16) {
        newpos -= 1;
      }
      if (cursorpos == 16) {
        newpos = 7;
      }
      if (cursorpos > 16) {
        newpos -= 1;
      }
    }
    
    [ always reset dir so another keypress can be detected
    egoDir = 0;
    
    [ check for new cursor position
    if (cursorpos != newpos) {
      [ update the position
      cursorpos = newpos;
      [ depending on where cursor is, set the position and size/shape
      if (cursorpos < CP_OK) {
        [ option buttons (note that only the input types are 
        [ allowed; the right-button option button is disabled
        [ in keyboard mode)
        set.loop(oCursorB, LP_CF_OPT);
        stop.cycling(oCursorB);
        set.cel(oCursorB, 0);
        set.loop(oCursorT, LP_CF_OPT);
        stop.cycling(oCursorT);
        set.cel(oCursorT, 0);
        set.loop(oCursorL, LP_CF_OPT);
        stop.cycling(oCursorL);
        set.cel(oCursorL, 1);
        set.loop(oCursorR, LP_CF_OPT);
        stop.cycling(oCursorR);
        set.cel(oCursorR, 1);
        [ position cursor to bottom-left corner of desired location
        cursorY = 97;
        if (cursorpos == 1) {
          cursorX = 7;
        }
        if (cursorpos == 2) {
          cursorX = 31;
        }
      }
      [ OK, Cancel, and Restore buttons
      if (cursorpos > 4 && cursorpos < 8) {
        set.loop(oCursorB, LP_CF_CMD);
        [ if previously on a palette color, need to stop cycling
        [ and reset to correct cel
        stop.cycling(oCursorB);
        set.cel(oCursorB, 0);
        set.loop(oCursorT, LP_CF_CMD);
        stop.cycling(oCursorT);
        set.cel(oCursorT, 0);
        set.loop(oCursorL, LP_CF_CMD);
        stop.cycling(oCursorL);
        set.cel(oCursorL, 1);
        set.loop(oCursorR, LP_CF_CMD);
        stop.cycling(oCursorR);
        set.cel(oCursorR, 1);
        
        cursorX = 3;
        [ convert cursorpos into desired y value
        cursorY = cursorpos;
        cursorY -= 5;
        cursorY *= 16;
        cursorY += 128;
      }
      
      [ palette 'buttons' (color squares)
      if (cursorpos > 7) {
        cursorX = cursorpos;
        cursorX -= 8;
        cursorX *= 12;
        cursorX += 55;
        if (cursorpos > 15) {
          cursorY = 162;
          cursorX -= 96;
          set.loop(oCursorB, LP_CF_DK_PAL_H);
          set.loop(oCursorT, LP_CF_DK_PAL_H);
          set.loop(oCursorL, LP_CF_DK_PAL_V);
          set.loop(oCursorR, LP_CF_DK_PAL_V);
        } else {
          cursorY = 138;
          set.loop(oCursorB, LP_CF_LT_PAL_H);
          set.loop(oCursorT, LP_CF_LT_PAL_H);
          set.loop(oCursorL, LP_CF_LT_PAL_V);
          set.loop(oCursorR, LP_CF_LT_PAL_V);
        }
        [ offset starting cels to give a better effect
        set.cel(oCursorB, 0);
        start.cycling(oCursorB);
        set.cel(oCursorT, 1);
        start.cycling(oCursorT);
        set.cel(oCursorL, 2);
        start.cycling(oCursorL);
        set.cel(oCursorR, 3);
        start.cycling(oCursorR);
      }
      [ to move cursor, erase it first, otherwise, it will
      [ clear any text that is present anywhere between the
      [ new position and the old position
      erase(oCursorB);
      position.v(oCursorB, cursorX, cursorY);
      draw(oCursorB);
      
      erase(oCursorL);
      --cursorY;
      position.v(oCursorL, cursorX, cursorY);
      draw(oCursorL);
      
      erase(oCursorT);
      if (cursorpos < 5) {
        cursorY -= 10;
      } else {
        if (cursorpos < 8) {
          cursorY -= 8;
        } else {
          cursorY -= 21;
        }
      }
      position.v(oCursorT, cursorX, cursorY);
      draw(oCursorT);
      
      erase(oCursorR);
      if (cursorpos < 5) {
        cursorX += 17;
        cursorY += 10;
      } else {
        if (cursorpos < 8) {
          cursorX += 25;
          cursorY += 8;
        } else {
          cursorX += 10;
          cursorY += 21;
        }
      }
      position.v(oCursorR, cursorX, cursorY);
      draw(oCursorR);
    }
  }
  
  [ check for selection (space/enter for button, 'B/F/D' for colors)
  if (have.key()) {
    [ space/enter
    if ((lastChar == 32 || lastChar == 13 || lastChar == 10)) {
      if (cursorpos  == CP_MOUSE) {
        [ switch to mouse control
        reset(cursormode);
        enable.item(mouse);
        erase(optCursor);
        position(optCursor, 8, 97);
        draw(optCursor);
        [ erase the cursor objects
        erase(oCursorB);
        erase(oCursorT);
        erase(oCursorL);
        erase(oCursorR);
        [ re-enable right button option
        set.cel(optRightBtn, 0);
      }
      if (cursorpos  == CP_OK) {
        btnAction = B_OK;
      }
      if (cursorpos  == CP_CANCEL) {
        btnAction = B_CANCEL;
      }
      if (cursorpos  == CP_RESET) {
        btnAction = B_RESET;
      }
    }
    
    colorindex = cursorpos;
    colorindex -= 8;
    [ B
    if ((lastChar == 66 || lastChar == 98)) {
      if (cursorpos > 7) {
        btnAction = B_PAL_BG;
      }
    }
    
    [ F
    if ((lastChar == 70 || lastChar == 102)) {
      if (cursorpos > 7) {
        btnAction = B_PAL_FG;
      }
    }
    
    [ D
    if ((lastChar == 68 || lastChar == 100)) {
      if (cursorpos > 7) {
        btnAction = B_PAL_BD;
      }
    }
  }
} else {
  [ mouse is active: check for mouse actions
  
  [ is cursor over the palette? [54, 115 - 150, 163]
  if (mouseX > 54 && mouseX < 150 && mouseY > 115 && mouseY < 163) {
    [ calculate color index
    colorindex = mouseX;
    colorindex -= 54;
    colorindex /= 12;
    if (mouseY > 139) {
      colorindex += 8;
    }
  } else {
    colorindex = -1;
  }
  [ [ if on a line, exit? ?add fn to check pixel color?


  [ check for mouse clicks
  if (controller(cLeftClick)) {
    [ over OK button [2,118 - 29,129]
    if (mouseX > 2 && mouseX < 29 && mouseY > 118 && mouseY < 129) {
      btnAction = B_OK;
    }
      
    [ over Cancel button [2, 134 - 29, 145]
    if (mouseX > 2 && mouseX < 29 && mouseY > 134 && mouseY < 145) {
      btnAction = B_CANCEL;
    }
    
    [ over Reset button [2, 150 - 29, 161]
    if (mouseX > 2 && mouseX < 29 && mouseY > 150 && mouseY < 161) {
      btnAction = B_RESET;
    }
    
    [ over palette (color index != -1)
    if (colorindex != -1) {
      btnAction = B_PAL_FG;
    } 
    
    [ over right button bg option
    if (mouseX > 104 && mouseX < 110 && mouseY > 87 && mouseY < 96) {
      btnAction = B_OP_BG;
    }
  
    [ over right button border option 
    if (mouseX > 128 && mouseX < 134 && mouseY > 87 && mouseY < 96) {
      btnAction = B_OP_BD;
    }
  
    [ over cursor type keyboard option 
    if (mouseX > 30 && mouseX < 38 && mouseY > 87 && mouseY < 96) {
      [ switch to keyboard cursor
      set(cursormode);
      disable.item(mouse);
      erase(optCursor);
      position(optCursor, 32, 97);
      draw(optCursor);
      [ start cursor on keyboard option button
      cursorpos = CP_KEYB;
      newpos = CP_KEYB;
      position(oCursorB, 31, 97);
      draw(oCursorB);
      position(oCursorT, 31, 86);
      draw(oCursorT);
      position(oCursorL, 31, 96);
      draw(oCursorL);
      position(oCursorR, 48, 96);
      draw(oCursorR);
      
      set.cel(optRightBtn, 2);
    }
  }

  [ check for right-click
  if (controller(cRightClick)) {
    [ over palette (color index != -1)
    if (colorindex != -1) {
      if (rightmode) {
        btnAction = B_PAL_BD;
      } else {
        btnAction = B_PAL_BG;
      }
    }  
  }
}

[ check for button action
if (btnAction == 0) {
  return();
}

if (btnAction == B_OK) {
  [ save the colors
  msgBoxBG = tmpBG;
  msgBoxFG = tmpFG;
  msgBoxBorder = tmpBorder;
  [ make the change
  block(MSGBOX.COLOR.V, &msgBoxBorder, &msgBoxFG, &msgBoxBG);
  print.at("Message box colors have been changed.", 5, 6, 31);
  
  [ restore ego movement parameters
  egoX = egoPrevX;
  egoY = egoPrevY;
  egoDir = egoPrevDir;
  
  [ fade out 
  block(FADE.OUT, 0, FADECOUNT, BLACK);  [ fade.out(BYVAR, DELAY, COLOR);
  [ go back to previous room
  new.room.v(previousRoom); 
}

if (btnAction == B_CANCEL) {
  [ restore ego movement parameters
  egoX = egoPrevX;
  egoY = egoPrevY;
  egoDir = egoPrevDir;
  
  [ fade out 
  block(FADE.OUT, 0, FADECOUNT, BLACK);  [ fade.out(BYVAR, DELAY, COLOR);
  [ just go back to previous room
  new.room.v(previousRoom);
}

if (btnAction == B_RESET) {
  [ change to default colors
  tmpBG = WHITE;
  tmpFG = BLACK;
  tmpBorder = RED;
  [ and update them
  set(update);
}

if (btnAction == B_PAL_FG) {
  [ change FG IF it doesn't match current FG/BG
  if (tmpFG != colorindex && tmpBG != colorindex) {
    [ change FG
    oldFG = tmpFG;
    tmpFG = colorindex;
    set(update);
    [ redisplay text only
    set(noredraw);
  }
}
if (btnAction ==  B_PAL_BG) {
  [ change BG, IF it doesn't match current FG/BG
  if (tmpFG != colorindex && tmpBG != colorindex) {
    tmpBG = colorindex;
    set(update);
  }
}

if (btnAction ==  B_PAL_BD) {
  [ change border
  tmpBorder = colorindex;
  set(update);
}

if (btnAction ==  B_OP_BG) {
  [ right-click will control background
  reset(rightmode);
  erase(optRightBtn);
  position(optRightBtn, 104, 97);
  draw(optRightBtn);
}

if (btnAction ==  B_OP_BD) {
  [ right-click will control border
  set(rightmode);
  erase(optRightBtn);
  position(optRightBtn, 128, 97);
  draw(optRightBtn);
}

[ always reset button action
btnaction = 0;
  
:checkupdate
[ if colors have changed, update the palette and sample
if (update) {
  reset(update);
  
  [ if drawing entire box
  if (!noredraw) {
    [ this string draws a blank msgbox with correct bkgd color and border
    sTemp = "F0%s14F41B233480231CF81E28F0%s15F41C24337F241DFF";
    [ convert bkgd and border colors to hex strings
    block(BYTE2HEX, &hexBG, &tmpBG, 0); [ byte2Hex(sRESULT, vINPUT); 
    block(BYTE2HEX, &hexBD, &tmpBorder, 0); [ byte2Hex(sRESULT, vINPUT);
    [ now execute the picdraw function (enable paintover)
    block(PIC.DRAW, 1, &sTemp, 0); [ pic.draw(FILLSTYLE, sCMDS);
  
    [ the draw function clears all text from the screen
    
    [ if picture is not visible yet, show it now 
    if (newroom) {
      show.pic();
    }
  }
  
  [ push display colors
  set.text.attribute(-1, 0);
  
  [ attributes by var
  toggle.monitor();
  set.text.attribute(&tmpFG, &tmpBG);
  [ add test message text
  display(6, 8, "This is a test message.");
  
  [ update palette to show current color selections
  
  [ add FG text to palette
  cInit = 2; [ FG
  cRow = 16;
  cCol = tmpFG;
  cCol *= 3;
  palBG = tmpFG;
  if (tmpFG > 7) {
    cRow += 3;
    cCol -= 10;
    palFG = BLACK;
  } else {
    cCol += 14;
    palFG = WHITE;
  }
  [ attributes by var
  toggle.monitor();
  set.text.attribute(&palFG, &palBG);
  display.v(cRow, cCol, cInit);
  
  if (noredraw) {
    [ erase old FG 
    reset(noredraw);
    cInit = 4; [ blank
    cRow = 16;
    cCol = oldFG;
    cCol *= 3;
    palBG = oldFG;
    if (oldFG > 7) {
      cRow += 3;
      cCol -= 10;
      palFG = BLACK;
    } else {
      cCol += 14;
      palFG = WHITE;
    }
    [ attributes by var
    toggle.monitor();
    set.text.attribute(&palFG, &palBG);
    display.v(cRow, cCol, cInit);
  } else {
    [ forced redraw all other text
    cInit = 1; [ BG
    cRow = 16;
    cCol = tmpBG;
    cCol *= 3;
    palBG = tmpBG;
    if (tmpBG > 7) {
      cRow += 3;
      cCol -= 10;
      palFG = BLACK;
    } else {
      cCol += 14;
      palFG = WHITE;
    }
    [ attributes by var
    toggle.monitor();
    set.text.attribute(&palFG, &palBG);
    display.v(cRow, cCol, cInit);
  
    cInit = 3; [ Border
    cRow = 17;
    cCol = tmpBorder;
    cCol *= 3;
    palBG = tmpBorder;
    if (tmpBorder > 7) {
      cRow += 3;
      cCol -= 10;
      palFG = BLACK;
    } else {
      cCol += 14;
      palFG = WHITE;
    }
    [ attributes by var
    toggle.monitor();
    set.text.attribute(&palFG, &palBG);
    display.v(cRow, cCol, cInit);
    
    [ add button text
    set.text.attribute(BLACK, WHITE);
    display(16, 1, "  OK  ");
    display(18, 1, "Cancel");
    display(20, 1, "Reset ");
    
    set.text.attribute(BLACK, LT_GRAY);
    display(10, 2, "  Cursor   ");
    display(12, 4, "Ms");
    display(12, 10, "Kb");
    
    display(10, 26, "Right Click");
    display(12, 28, "BG");
    display(12, 34, "Bd");
  }
  
  [ pop display colors
  set.text.attribute(0, -1);
  
  if (newroom) {
    block(FADE.IN, 0, FADECOUNT, BLACK); [ fade.in(BYVAR, DELAY, COLOR)
  }
}

:done
return();


[ **************************************
[ DECLARED MESSAGES
[ **************************************
#message 1 "BG"
#message 2 "FG"
#message 3 "Bd"
#message 4 "  "