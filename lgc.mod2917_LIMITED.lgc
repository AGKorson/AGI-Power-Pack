[******************************************************************************[[ lgc.mod2917_LIMITED[[ Power Pack v1.0 [LIMITED EDITION] source code (for AGI version 2.917)[[ This limited edition of the AGI power pack only includes the following[ modifications:[[   - fixes a bug in controller assignment function to allow all 49[     slots to be used[[   - fixes 'set.game.id' so it does not quit the game when id gets set[[   - modifies the character printing functions to allow use of[     extended characters in graphics and text modes[[   - modifies the color attributes and text printing functions so text[     will print with any combination of foreground and background[     colors on the graphics screen (this applies to all screen text[     printing, including print/display commands, input line, and all[     commands and internal functions that display text on screen[     regardless of screen mode and color choices)[[   - adds a new function to allow setting message box colors[     (foreground, background and border) to any combination of[     colors[[   - adds support for words to start with non-letters, and also for[    words to contain extended characters[[[ Detailed explanations of each power pack feature are included in its[ respective code block below, including syntax, limitations and[ considerations. Examples of all features provided in the full Power Pack[ are provided in the AGI Power Pack Demo game.[[******************************************************************************[******************************************************************************[ a null string is needed in several of the patches; instead of using a[ separate message for each, declare it once, then use it as needed#message 254 "" [ \x00#define NULLMSG    254[******************************************************************************[******************************************************************************[[ confirm version number before continuing[[ s56=".xxx" means 2.903 through 2.917#define IntVersion      v30#define     VERSION_2917  13s1 = ".917";if (compare.strings(s1, s56)) {  IntVersion = VERSION_2917;} else {  return();}[******************************************************************************[******************************************************************************[[ SET.STRING PATCH AND MEMCOPY FUNCTION[[ This patch is the first step in gaining access to power pack features. It[ modifies the set.string command so it can copy more than 40 characters and[ fixes the bug that adds an extra null character to the end of the string.[[ put patch function in s1#message  1 "\xB8\x90\x90\x2E\xA3\x50\x0D\x2E\xA3\x52\x0D\xB8\x86\x3F\x2E\xA3"            "\x65\x0D\xB0\x04\x2E\xA2\x69\x0D\x8B\xC6\xC3"s1 = m1;[ use stop.sound to run the patch#message  2 "\x85\xA1"s36 = m2;stop.sound();[ The next step is to modify the 'said' command so it will run a custom[ memory copy function that will be stored in s1. (The said command is used[ because it accepts 16 bit unsigned integers, which makes it much easier to[ access memory addresses.) Also, retrieve current codepage, which is needed[ for extended character support.#message  3 "\xB8\x85\xA1\xA3\x2D\x09\xB8\x01\x66\xCD\x21\x89\x1E\x36\x11\x8B"            "\xC6\xC3"s1 = m3;stop.sound();[ Put the custom memcopy function in s1, so calls to said command will[ run it. The syntax used is:[     if (said(numbytes, msgnum, tgtaddr[, 0]) {}[        - numbytes is the number of bytes to be copied[        - msgnum is the message number in this logic that the data[          will be copied from[        - tgtaddr is the target memory address where the data will be[          copied to[        if a fourth argument is used (value doesn't matter), then the target[        segment will be the data segment, otherwise it'll be the code segment#message  4 "\xAC\x8A\xD0\xAD\x50\xAD\x50\xE8\x61\x80\x83\xC4\x02\x50\x1E\xAD"            "\x50\x80\xFA\x04\x75\x03\x1E\xEB\x01\x0E\xE8\x97\xB8\x83\xC4\x0A"            "\x8B\xC6\xC3"s1 = m4;[ 'said' patch is now set; restore stop.sound command#message  5 "\x5D\x51"if (said(2, 5, 1965, 0)){} [ DS:07AD[******************************************************************************[******************************************************************************[[ CONTROLLER TABLE BUGFIX[[ Although AGI allocates space to store and evaluate 49 controllers, there is a[ bug in the set.key command that limits the number of controllers that can be[ assigned to 39. This patch adjusts the controller count to allow up to 49[ assignments.[[ SYNTAX:  n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: none - all 49 controller slots are now available[[ PATCH CODE:#message 6 "\x31"if (said(1, 6, 19569)){} [ 4C71[******************************************************************************[******************************************************************************[[ SET.GAME.ID PATCH[[ This patch skips the check against the built-in gameID, allowing changes to [ the game ID with the 'set.game.id' command without causing AGI to quit.[[ SYNTAX: n/a - patch does not modify any command syntax[ [ LIMITATIONS/CONSIDERATIONS:  The string assigned to gameID is limited to six[ characters, but can now include formatting codes (such as '%v1', '%s1',[ '%m1', etc). If you do use formatting codes, you should make sure the[ formatted string is six or less characters. (The patch uses a buffer of ~40[ characters when doing the conversion before truncating it to 6; if your[ formatted string exceeds that, it may result in crashing AGI.)[[ With the ID check removed, you can now change the ID multiple times during a[ game to give users access to more save game slots, because the save game[ files would have different names. So you could save by 'chapter', or allow[ users to choose an ID to sort their save game files.[[ PATCH CODE:#message 7 "\x68\x9F\x0C\x6A\x02\xC6\x06\x11\x0D\xFF\xE8\x85\x1F\x83\xC4\x04"           "\x8B\xF8\x32\xC0\x88\x05\x6A\x07\x68\x9F\x0C\x6A\x02\xE8" [ \x00"#message 8 "\x4D\x83\xC4\x06\xC3"if (said(36, 7, 1)){} [ 0001#message 9 "\xE8\x5B\xF1"if (said(3, 9, 3747)){} [ 0EA3[******************************************************************************[******************************************************************************[[ EXTENDED CHARACTER SUPPORT PATCH[[ This patch fixes the graphics character display functions so that extended[ characters (ascii values 128 - 254) will display properly just as they do in[ the text mode.[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: DOS includes character glyphs for all ascii[ values except 255. Backspace, linefeed and carriage return (8, 10, 13) have[ glyphs, but the internal print functions adjusts cursor position for these[ values instead of printing the associated glyph.[[ PATCH CODE:[ modify CopyGlyph to point to correct location for glyphs#message 10 "\xC0"if (said(1, 10, 11358)){} [ 2C5E#message 11 "" [ \x00#message 12 "\x01"if (said(2, 11, 11365)){} [ 2C65[ modify character checks to 0FFh instead of 80h#message 13 "\xFF"if (said(1, 13, 10931)){} [ 2AB3if (said(1, 13, 11332)){} [ 2C44if (said(1, 13, 11347)){} [ 2C53if (said(1, 13, 11352)){} [ 2C58#message 14 "\xF8\x07"if (said(2, 14, 10942)){} [ 2ABE[******************************************************************************[******************************************************************************[[  FULL COLOR TEXT IN GRAPHICS MODE[[ This patch patch modifies the graphics text functions so all combinations[ of background and foreground color can be used (normal AGI functionality[ only allows black-on-white, or any-color-on-black).[[ SYNTAX: n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: The DOS interrupt functions necessary to make[ this patch work operate on a character-by-character basis; if you are[ printing or displaying an extremely large amount of text you may see a slight[ delay as the characters are added. With smaller text amounts, the effect[ is barely noticeable.[[ This patch allows for customization of the standard print window. That patch[ is provided below.[[ PATCH CODE:[ in SetBGcolor function, save the actual color not just black or white#message 15 "\x8B\x46\x08\x5D\x5F\x5E\xC3"if (said(7, 15, 30699)){} [ 77EB            [ DrawColorSpace#message 16 "\x50\x52\x32\xC0\x88\xDF\x8B\xCA\x80\xF9\x28\x77\x0A\x90\x90\x90"            "\xB4\x06\xCD\x10\x90\x90\x90\x5A\x32\xFF\xB4\x02\xCD\x10\x58\xC3"            [ InputRedrawPatch            "\xA1\xCF\x05\x80\x3E\x4D\x17\x01\x75\x04\xB1\x04\xD2\xE0\x50\xE9"            "\xE3\x37"if (said(50, 16, 224)){} [ 00E0[ modify PutChar function to call the patch#message 17 "\x8B\x1E\xCF\x05\x53\xE8\x6D\xD6\x5B\x33\x1E\xCD\x05\x80\xCB\x80"            "\x83\x3E\x9C\x0E\x01\x75\x1C\xB3\x8F\x90"if (said(26, 17, 10859)){} [ 2A6B[ menus use CharInvert for shading#message 18 "\xA1\x01"if (said(2, 18, 10900)){} [ 2A94[ modify CharInvert to shade text instead#message 19 "\xB8\x55\xAA\x83\x3E\xCF\x05\x0F\x74\x04\x09\x05\xEB\x02\x21\x05"            "\x47\x47\xE2\xEF\xB0\xFF\xC3"if (said(23, 19, 11322)){} [ 2C3A[ ignore the preset attribute setting to print a character#message 20 "\x90\x90\x90"if (said(3, 20, 10950)){} [ 2AC6[ modify InputRedraw to use color patch#message 21 "\xE9\x0C\xC8"if (said(3, 21, 14577)){} [ 38F1[ backspace needs to use the patch too#message 22 "\x8A\x1E\xCF\x05\x80\x3E\x4D\x17\x01\x75\x03\xC0\xE3\x04\xE8\xB2"            "\xD6\xEB\x01"if (said(19, 22, 10781)){} [ 2A1D[******************************************************************************[******************************************************************************[[ CUSTOM MESSAGE BOX COLORS[[ This patch creates a new function to allow modifying message box colors.[   [ SYNTAX:[   block(-1 , vBORDER*, vFOREGROUND*, vBACKGROUND*);[   block(-2 , BORDER, FOREGROUND, BACKGROUND);[[   * The compiler expects numbers as arguments, not variables, so use the[     NUMBER of the variable, without the 'v' prefix.[[ LIMITATIONS/CONSIDERATIONS: You can pass colors by variable (using -1 as the[ first argument) or by number (using -2 as the first argument).[[ All message boxes will use the new colors, including print/print.at, pause,[ and any other system generated message box.[[  ***in this limited patch, color settings are not reset to default by reset.game[     and are not saved by save.game; you will have to manage colors manually[     during resets and restarts***[[ PATCH CODE:            [ SetMsgBoxColors#message 23 "\x55\x8B\xEC\x8B\x46\x08\x2E\xA2\xF2\x1E\x8B\x46\x06\x8A\xE0\xB0"            "\xB0\x2E\xA3\xB9\x1D\x2E\xA3\x3C\x85\x8B\x46\x04\x2E\xA2\xB6\x1D"            "\x2E\xA2\xF1\x1E\x2E\xA2\x39\x85\x5D\xC3"            [ GetColors            "\x3C\x02\x74\x13\xAC\x32\xE4\xA2\xD4\x1D\x50\xAC\xA2\xD5\x1D\x50"            "\xAC\xA2\xD6\x1D\x50\xEB\x22\xAC\x32\xE4\x32\xFF\x8A\xD8\x8A\x47"            "\x09\xA2\xD4\x1D\x50\xAC\x8A\xD8\x8A\x47\x09\xA2\xD5\x1D\x50\xAC"            "\x8A\xD8\x8A\x47\x09\xA2\xD6\x1D\x50\xE8\x9A\xFF\x83\xC4\x06\x8B"            "\xC6\x5D\x5F\x5E\xC3"if (said(111, 23, 37)){} [ 0025[ save default values#message 24 "\x04" [ \x00#message 25 "\x0F"if (said(3, 24, 7636, 0)){} [ DS:1DD4[******************************************************************************[******************************************************************************[[ EXTENDED CHARACTER WORDS[[ This patch modifies AGI to allow use of extended characters in vocabulary[ words, and also allows words to start with non-alphabet characters.[[ SYNTAX:  n/a - patch does not modify any command syntax[[ LIMITATIONS/CONSIDERATIONS: This patch allows parsing of words that contain[ extended characters. This improves support for languages other than English.[ It also allows words to start with any letter, not just 'a' to 'z'.[[ Because of how AGI stores word text data, the patch also requires a special[ format in WORDS.TOK for words containing extended characters.[[ The format used is to treat character 0x7F as a 'marker'; when that character[ is encountered, the patch will take the next character and add 128 to it,[ generating the desired extended character. This means the words are still[ compatible with unmodified AGI engines, including modern programs such as[ ScummVM and NAGI. The words will just look a little strange and will never[ match anything a player could type in, but the file will still be 100%[ compatible with AGI.[[ If you are using WinAGI version 2.2.1 or greater, it will automatically do[ the formatting for you when you add words to WORDS.TOK.[[ The AGI Power Pack demo game uses this patch, and provides detailed[ information on how to work with extended character words.[[ This patch also fixes a minor coding flaw in AGI's word search function. The[ flaw has no impact because there's duplicate code in the function that masks[ the error. The function is supposed to return a null pointer when the starting[ changes (e.g. going from 'a' to 'b'), which should tell the interpreter that[ a word match is impossible. But the function checks the wrong location, so it[ will never return a null value. It doesn't cause a problem though, because[ there is a second check in the function that identifies the change and exits[ the function.[[ PATCH CODE:            [ FindWordPatch#message 26 "\x3C\x61\x72\x08\x3C\x7A\x77\x04\x83\xE8\x61\xC3\x2B\xC0\xC3"            [ ParsePatch            "\xA3\xC9\x0C\x50\xE8\xFF\x0E\x83\xC4\x02\xC3"            [ NextWordPatch            "\x80\x7C\x03\x01\x73\x11\x8A\x44\x04\x24\x7F\x3C\x05\x72\x08\x3C"            "\x1D\x77\x04\x2B\xC0\xEB\x03\x8D\x44\x03\x5D\x5F\x5E\xC3"            [ ExtLCase            "\x83\xFE\x7F\x77\x04\x83\xFE\x41\xC3\xA1\x36\x11\xBB\x08\x41\xB1"            "\x02\x32\xED\x43\x43\x2E\x3B\x07\xE0\xF9\x74\x08\xB1\x01\xEB\x04"            "\xB5\x01\x5A\x03\xF7\xD9\x83\xC1\x01\xB0\x80\xF6\xE1\x05\x2B\x41"            "\x8B\xF8\x03\xFE\x83\xEF\x7F\x4F\x2E\x8A\x05\x2A\xE4\x8B\xF0\xF9"            "\xC3"            [ CodePageData            [ 437 - US Default)            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"            "\x82\x91\x91\x93\x94\x95\x96\x97\x98\x94\x81\x9B\x9C\x9D\x9E\x9F"            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"            "\xB0\xB1\xB2\xB3\xB4\xB5\xB6\xB7\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC7\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"            "\xD0\xD1\xD2\xD3\xD4\xD5\xD6\xD7\xD8\xD9\xDA\xDB\xDC\xDD\xDE\xDF"            "\xE0\xE1\xE2\xE3\xE5\xE5\xE6\xE7\xED\xE9\xEA\xEB\xEC\xED\xEE\xEF"            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"            [ 858 - 850 with Euro Sign            "\x87\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8A\x8B\x8C\x8D\x84\x86"            "\x82\x91\x91\x93\x94\x95\x96\x97\x98\x94\x81\x9B\x9C\x9B\x9E\x9F"            "\xA0\xA1\xA2\xA3\xA4\xA4\xA6\xA7\xA8\xA9\xAA\xAB\xAC\xAD\xAE\xAF"            "\xB0\xB1\xB2\xB3\xB4\xA0\x83\x85\xB8\xB9\xBA\xBB\xBC\xBD\xBE\xBF"            "\xC0\xC1\xC2\xC3\xC4\xC5\xC6\xC6\xC8\xC9\xCA\xCB\xCC\xCD\xCE\xCF"            "\xD0\xD0\x88\x89\x8A\xD5\xA1\x8C\x8B\xD9\xDA\xDB\xDC\xDD\x8D\xDF"            "\xA2\xE1\x93\x95\xE4\xE4\xE6\xE7\xE7\xA3\x96\x97\xEC\xEC\xEE\xEF"            "\xF0\xF1\xF2\xF3\xF4\xF5\xF6\xF7\xF8\xF9\xFA\xFB\xFC\xFD\xFE\xFF"if (said(376, 26, 16562)){} [ 40B2[ change start letter check to allow ALL characters#message 27 "\x89\x46\xF8\xEB\x17"if (said(5, 27, 6789)){} [ 1A85[ use patch to calculate starting offset for any starting character#message 28 "\xE8\xD6\x25"if (said(3, 28, 6873)){} [ 1AD9[ patch to check for extended char marker#message 29 "\x8B\xC8\x8A\x04\x24\x7F\x75\x05\x46\x8A\x04\x0C\x80\x34\x7F\xEB"            "\x03"if (said(17, 29, 6991)){} [ 1B4F[ fix nextword function to work with non-alphabet characters#message 30 "\xE9\xD5\x24"if (said(3, 30, 7156)){} [ 1BF4[ patch lowercase function to work with extended characters#message 31 "\xE8\xBC\xF1"if (said(3, 31, 20267)){} [ 4F2B[ convert input line to lower case before parsing#message 32 "\xE8\xD9\x27"if (said(3, 32, 6373)){} [ 18E5[******************************************************************************[******************************************************************************[[ CUSTOM FUNCTION HANDLERS[[ This patch modifies the block command and set.key command to be launch[ points for custom functions used by other patches in this power pack. These [ functions are extremely useful, because they have extra arguments available[ to be used by custom functions. For the block command, the first argument is[ only valid to AGI when it is <= 159; passing values above that (as negative[ values to make syntax easier) means there are as many as 95 different[ functions that could be assigned. Since controllers are only valid from 0 to[ 49, over 200 custom test functions are theoretically available.[[ SYNTAX:[   block(FN, ARG1, ARG2, ARG3);[[   set.key(ARG1, ARG2, FN*);[[    * The compiler expects a controller argument so pass the function[      value with the 'c' prefix[[ LIMITATIONS/CONSIDERATIONS: Function number (FN) is always passed as a[ negative value. Argument values are defined by each custom function. Refer[ to the appropriate power pack patch notes for details on argument syntax.[[ PATCH CODE:            [ BlockHandler#message 33 "\x8B\x76\x08\x80\x3C\xFE\x0F\x82\xC1\x79\xAC\xF6\xD8\xD0\xE0\x32"            "\xE4\x8B\xD8\x2E\xFF\xA7\xDA" [ \x00#message 34 "\x4F" [ \x00#message 35 "\x4F" [ \x00"if (said(28, 33, 196)){} [ 00C4[ modify block command to use the patch#message 36 "\xE9\x35\x86"if (said(3, 36, 31372)){} [ 7A8C[******************************************************************************[******************************************************************************[ when done with memCopy, restore said command pointer#message 37 "\x5C\x09"if (said(2, 37, 2349, 0)){} [ DS:092D[******************************************************************************return();[ **************************************[ MESSAGES[ **************************************[ for easier reference, messages are declared as they are used